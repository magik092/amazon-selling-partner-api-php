<?php
/**
 * PrescriptionDetailV0
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\OrdersApiV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Orders
 *
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\OrdersApiV0\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * PrescriptionDetailV0 Class Doc Comment
 *
 * @category Class
 * @description Information about the prescription that is used to verify a regulated product. This must be provided once per order and reflect the sellerâ€™s own records. Only approved orders can have prescriptions.
 * @package  Webcom\Amazon\Rest\OrdersApiV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PrescriptionDetailV0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PrescriptionDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'prescriptionId' => 'string',
        'expirationDate' => '\DateTime',
        'writtenQuantity' => 'int',
        'totalRefillsAuthorized' => 'int',
        'refillsRemaining' => 'int',
        'clinicId' => 'string',
        'usageInstructions' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'prescriptionId' => null,
        'expirationDate' => 'date-time',
        'writtenQuantity' => null,
        'totalRefillsAuthorized' => null,
        'refillsRemaining' => null,
        'clinicId' => null,
        'usageInstructions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'prescriptionId' => 'prescriptionId',
        'expirationDate' => 'expirationDate',
        'writtenQuantity' => 'writtenQuantity',
        'totalRefillsAuthorized' => 'totalRefillsAuthorized',
        'refillsRemaining' => 'refillsRemaining',
        'clinicId' => 'clinicId',
        'usageInstructions' => 'usageInstructions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'prescriptionId' => 'setPrescriptionId',
        'expirationDate' => 'setExpirationDate',
        'writtenQuantity' => 'setWrittenQuantity',
        'totalRefillsAuthorized' => 'setTotalRefillsAuthorized',
        'refillsRemaining' => 'setRefillsRemaining',
        'clinicId' => 'setClinicId',
        'usageInstructions' => 'setUsageInstructions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'prescriptionId' => 'getPrescriptionId',
        'expirationDate' => 'getExpirationDate',
        'writtenQuantity' => 'getWrittenQuantity',
        'totalRefillsAuthorized' => 'getTotalRefillsAuthorized',
        'refillsRemaining' => 'getRefillsRemaining',
        'clinicId' => 'getClinicId',
        'usageInstructions' => 'getUsageInstructions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['prescriptionId'] = $data['prescriptionId'] ?? null;
        $this->container['expirationDate'] = $data['expirationDate'] ?? null;
        $this->container['writtenQuantity'] = $data['writtenQuantity'] ?? null;
        $this->container['totalRefillsAuthorized'] = $data['totalRefillsAuthorized'] ?? null;
        $this->container['refillsRemaining'] = $data['refillsRemaining'] ?? null;
        $this->container['clinicId'] = $data['clinicId'] ?? null;
        $this->container['usageInstructions'] = $data['usageInstructions'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['prescriptionId'] === null) {
            $invalidProperties[] = "'prescriptionId' can't be null";
        }
        if ($this->container['expirationDate'] === null) {
            $invalidProperties[] = "'expirationDate' can't be null";
        }
        if ($this->container['writtenQuantity'] === null) {
            $invalidProperties[] = "'writtenQuantity' can't be null";
        }
        if (($this->container['writtenQuantity'] < 1)) {
            $invalidProperties[] = "invalid value for 'writtenQuantity', must be bigger than or equal to 1.";
        }

        if ($this->container['totalRefillsAuthorized'] === null) {
            $invalidProperties[] = "'totalRefillsAuthorized' can't be null";
        }
        if (($this->container['totalRefillsAuthorized'] < 0)) {
            $invalidProperties[] = "invalid value for 'totalRefillsAuthorized', must be bigger than or equal to 0.";
        }

        if ($this->container['refillsRemaining'] === null) {
            $invalidProperties[] = "'refillsRemaining' can't be null";
        }
        if (($this->container['refillsRemaining'] < 0)) {
            $invalidProperties[] = "invalid value for 'refillsRemaining', must be bigger than or equal to 0.";
        }

        if ($this->container['clinicId'] === null) {
            $invalidProperties[] = "'clinicId' can't be null";
        }
        if ($this->container['usageInstructions'] === null) {
            $invalidProperties[] = "'usageInstructions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets prescriptionId
     *
     * @return string
     */
    public function getPrescriptionId()
    {
        return $this->container['prescriptionId'];
    }

    /**
     * Sets prescriptionId
     *
     * @param string $prescriptionId The identifier for the prescription used to verify the regulated product.
     *
     * @return self
     */
    public function setPrescriptionId($prescriptionId)
    {
        $this->container['prescriptionId'] = $prescriptionId;

        return $this;
    }

    /**
     * Gets expirationDate
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expirationDate'];
    }

    /**
     * Sets expirationDate
     *
     * @param \DateTime $expirationDate The expiration date of the prescription used to verify the regulated product, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.
     *
     * @return self
     */
    public function setExpirationDate($expirationDate)
    {
        $this->container['expirationDate'] = $expirationDate;

        return $this;
    }

    /**
     * Gets writtenQuantity
     *
     * @return int
     */
    public function getWrittenQuantity()
    {
        return $this->container['writtenQuantity'];
    }

    /**
     * Sets writtenQuantity
     *
     * @param int $writtenQuantity The number of units in each fill as provided in the prescription.
     *
     * @return self
     */
    public function setWrittenQuantity($writtenQuantity)
    {

        if (($writtenQuantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $writtenQuantity when calling PrescriptionDetailV0., must be bigger than or equal to 1.');
        }

        $this->container['writtenQuantity'] = $writtenQuantity;

        return $this;
    }

    /**
     * Gets totalRefillsAuthorized
     *
     * @return int
     */
    public function getTotalRefillsAuthorized()
    {
        return $this->container['totalRefillsAuthorized'];
    }

    /**
     * Sets totalRefillsAuthorized
     *
     * @param int $totalRefillsAuthorized The total number of refills written in the original prescription used to verify the regulated product. If a prescription originally had no refills, this value must be 0.
     *
     * @return self
     */
    public function setTotalRefillsAuthorized($totalRefillsAuthorized)
    {

        if (($totalRefillsAuthorized < 0)) {
            throw new \InvalidArgumentException('invalid value for $totalRefillsAuthorized when calling PrescriptionDetailV0., must be bigger than or equal to 0.');
        }

        $this->container['totalRefillsAuthorized'] = $totalRefillsAuthorized;

        return $this;
    }

    /**
     * Gets refillsRemaining
     *
     * @return int
     */
    public function getRefillsRemaining()
    {
        return $this->container['refillsRemaining'];
    }

    /**
     * Sets refillsRemaining
     *
     * @param int $refillsRemaining The number of refills remaining for the prescription used to verify the regulated product. If a prescription originally had 10 total refills, this value must be `10` for the first order, `9` for the second order, and `0` for the eleventh order. If a prescription originally had no refills, this value must be 0.
     *
     * @return self
     */
    public function setRefillsRemaining($refillsRemaining)
    {

        if (($refillsRemaining < 0)) {
            throw new \InvalidArgumentException('invalid value for $refillsRemaining when calling PrescriptionDetailV0., must be bigger than or equal to 0.');
        }

        $this->container['refillsRemaining'] = $refillsRemaining;

        return $this;
    }

    /**
     * Gets clinicId
     *
     * @return string
     */
    public function getClinicId()
    {
        return $this->container['clinicId'];
    }

    /**
     * Sets clinicId
     *
     * @param string $clinicId The identifier for the clinic which provided the prescription used to verify the regulated product.
     *
     * @return self
     */
    public function setClinicId($clinicId)
    {
        $this->container['clinicId'] = $clinicId;

        return $this;
    }

    /**
     * Gets usageInstructions
     *
     * @return string
     */
    public function getUsageInstructions()
    {
        return $this->container['usageInstructions'];
    }

    /**
     * Sets usageInstructions
     *
     * @param string $usageInstructions The instructions for the prescription as provided by the approver of the regulated product.
     *
     * @return self
     */
    public function setUsageInstructions($usageInstructions)
    {
        $this->container['usageInstructions'] = $usageInstructions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


