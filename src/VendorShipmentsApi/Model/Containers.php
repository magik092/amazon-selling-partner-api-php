<?php
/**
 * Containers
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\VendorShipmentsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\VendorShipmentsApi\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * Containers Class Doc Comment
 *
 * @category Class
 * @description A list of the items in this transportation and their associated inner container details. If any of the item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level.
 * @package  Webcom\Amazon\Rest\VendorShipmentsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Containers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Containers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'containerType' => 'string',
        'containerSequenceNumber' => 'string',
        'containerIdentifiers' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\ContainerIdentification[]',
        'trackingNumber' => 'string',
        'dimensions' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\Dimensions',
        'weight' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\Weight',
        'tier' => 'int',
        'block' => 'int',
        'innerContainersDetails' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\InnerContainersDetails',
        'packedItems' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\PackedItems[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'containerType' => null,
        'containerSequenceNumber' => null,
        'containerIdentifiers' => null,
        'trackingNumber' => null,
        'dimensions' => null,
        'weight' => null,
        'tier' => null,
        'block' => null,
        'innerContainersDetails' => null,
        'packedItems' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'containerType' => 'containerType',
        'containerSequenceNumber' => 'containerSequenceNumber',
        'containerIdentifiers' => 'containerIdentifiers',
        'trackingNumber' => 'trackingNumber',
        'dimensions' => 'dimensions',
        'weight' => 'weight',
        'tier' => 'tier',
        'block' => 'block',
        'innerContainersDetails' => 'innerContainersDetails',
        'packedItems' => 'packedItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'containerType' => 'setContainerType',
        'containerSequenceNumber' => 'setContainerSequenceNumber',
        'containerIdentifiers' => 'setContainerIdentifiers',
        'trackingNumber' => 'setTrackingNumber',
        'dimensions' => 'setDimensions',
        'weight' => 'setWeight',
        'tier' => 'setTier',
        'block' => 'setBlock',
        'innerContainersDetails' => 'setInnerContainersDetails',
        'packedItems' => 'setPackedItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'containerType' => 'getContainerType',
        'containerSequenceNumber' => 'getContainerSequenceNumber',
        'containerIdentifiers' => 'getContainerIdentifiers',
        'trackingNumber' => 'getTrackingNumber',
        'dimensions' => 'getDimensions',
        'weight' => 'getWeight',
        'tier' => 'getTier',
        'block' => 'getBlock',
        'innerContainersDetails' => 'getInnerContainersDetails',
        'packedItems' => 'getPackedItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CONTAINER_TYPE_CARTON = 'carton';
    const CONTAINER_TYPE_PALLET = 'pallet';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContainerTypeAllowableValues()
    {
        return [
            self::CONTAINER_TYPE_CARTON,
            self::CONTAINER_TYPE_PALLET,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['containerType'] = $data['containerType'] ?? null;
        $this->container['containerSequenceNumber'] = $data['containerSequenceNumber'] ?? null;
        $this->container['containerIdentifiers'] = $data['containerIdentifiers'] ?? null;
        $this->container['trackingNumber'] = $data['trackingNumber'] ?? null;
        $this->container['dimensions'] = $data['dimensions'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['tier'] = $data['tier'] ?? null;
        $this->container['block'] = $data['block'] ?? null;
        $this->container['innerContainersDetails'] = $data['innerContainersDetails'] ?? null;
        $this->container['packedItems'] = $data['packedItems'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['containerType'] === null) {
            $invalidProperties[] = "'containerType' can't be null";
        }
        $allowedValues = $this->getContainerTypeAllowableValues();
        if (!is_null($this->container['containerType']) && !in_array($this->container['containerType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'containerType', must be one of '%s'",
                $this->container['containerType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['containerIdentifiers'] === null) {
            $invalidProperties[] = "'containerIdentifiers' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets containerType
     *
     * @return string
     */
    public function getContainerType()
    {
        return $this->container['containerType'];
    }

    /**
     * Sets containerType
     *
     * @param string $containerType The type of container.
     *
     * @return self
     */
    public function setContainerType($containerType)
    {
        $allowedValues = $this->getContainerTypeAllowableValues();
        if (!in_array($containerType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'containerType', must be one of '%s'",
                    $containerType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['containerType'] = $containerType;

        return $this;
    }

    /**
     * Gets containerSequenceNumber
     *
     * @return string|null
     */
    public function getContainerSequenceNumber()
    {
        return $this->container['containerSequenceNumber'];
    }

    /**
     * Sets containerSequenceNumber
     *
     * @param string|null $containerSequenceNumber An integer that must be submitted for multi-box shipments only, where one item may come in separate packages.
     *
     * @return self
     */
    public function setContainerSequenceNumber($containerSequenceNumber)
    {
        $this->container['containerSequenceNumber'] = $containerSequenceNumber;

        return $this;
    }

    /**
     * Gets containerIdentifiers
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\ContainerIdentification[]
     */
    public function getContainerIdentifiers()
    {
        return $this->container['containerIdentifiers'];
    }

    /**
     * Sets containerIdentifiers
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\ContainerIdentification[] $containerIdentifiers A list of carton identifiers.
     *
     * @return self
     */
    public function setContainerIdentifiers($containerIdentifiers)
    {
        $this->container['containerIdentifiers'] = $containerIdentifiers;

        return $this;
    }

    /**
     * Gets trackingNumber
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['trackingNumber'];
    }

    /**
     * Sets trackingNumber
     *
     * @param string|null $trackingNumber The tracking number used for identifying the shipment.
     *
     * @return self
     */
    public function setTrackingNumber($trackingNumber)
    {
        $this->container['trackingNumber'] = $trackingNumber;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\Dimensions|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\Dimensions|null $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\Weight|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\Weight|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets tier
     *
     * @return int|null
     */
    public function getTier()
    {
        return $this->container['tier'];
    }

    /**
     * Sets tier
     *
     * @param int|null $tier Number of layers per pallet.
     *
     * @return self
     */
    public function setTier($tier)
    {
        $this->container['tier'] = $tier;

        return $this;
    }

    /**
     * Gets block
     *
     * @return int|null
     */
    public function getBlock()
    {
        return $this->container['block'];
    }

    /**
     * Sets block
     *
     * @param int|null $block Number of cartons per layer on the pallet.
     *
     * @return self
     */
    public function setBlock($block)
    {
        $this->container['block'] = $block;

        return $this;
    }

    /**
     * Gets innerContainersDetails
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\InnerContainersDetails|null
     */
    public function getInnerContainersDetails()
    {
        return $this->container['innerContainersDetails'];
    }

    /**
     * Sets innerContainersDetails
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\InnerContainersDetails|null $innerContainersDetails innerContainersDetails
     *
     * @return self
     */
    public function setInnerContainersDetails($innerContainersDetails)
    {
        $this->container['innerContainersDetails'] = $innerContainersDetails;

        return $this;
    }

    /**
     * Gets packedItems
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\PackedItems[]|null
     */
    public function getPackedItems()
    {
        return $this->container['packedItems'];
    }

    /**
     * Sets packedItems
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\PackedItems[]|null $packedItems A list of packed items.
     *
     * @return self
     */
    public function setPackedItems($packedItems)
    {
        $this->container['packedItems'] = $packedItems;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


