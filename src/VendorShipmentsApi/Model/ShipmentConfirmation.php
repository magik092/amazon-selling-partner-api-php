<?php
/**
 * ShipmentConfirmation
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\VendorShipmentsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\VendorShipmentsApi\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * ShipmentConfirmation Class Doc Comment
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\VendorShipmentsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ShipmentConfirmation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShipmentConfirmation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shipmentIdentifier' => 'string',
        'shipmentConfirmationType' => 'string',
        'shipmentType' => 'string',
        'shipmentStructure' => 'string',
        'transportationDetails' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\TransportationDetails',
        'amazonReferenceNumber' => 'string',
        'shipmentConfirmationDate' => '\DateTime',
        'shippedDate' => '\DateTime',
        'estimatedDeliveryDate' => '\DateTime',
        'sellingParty' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\PartyIdentification',
        'shipFromParty' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\PartyIdentification',
        'shipToParty' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\PartyIdentification',
        'shipmentMeasurements' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\ShipmentMeasurements',
        'importDetails' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\ImportDetails',
        'shippedItems' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\Item[]',
        'cartons' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\Carton[]',
        'pallets' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\Pallet[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shipmentIdentifier' => null,
        'shipmentConfirmationType' => null,
        'shipmentType' => null,
        'shipmentStructure' => null,
        'transportationDetails' => null,
        'amazonReferenceNumber' => null,
        'shipmentConfirmationDate' => 'date-time',
        'shippedDate' => 'date-time',
        'estimatedDeliveryDate' => 'date-time',
        'sellingParty' => null,
        'shipFromParty' => null,
        'shipToParty' => null,
        'shipmentMeasurements' => null,
        'importDetails' => null,
        'shippedItems' => null,
        'cartons' => null,
        'pallets' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipmentIdentifier' => 'shipmentIdentifier',
        'shipmentConfirmationType' => 'shipmentConfirmationType',
        'shipmentType' => 'shipmentType',
        'shipmentStructure' => 'shipmentStructure',
        'transportationDetails' => 'transportationDetails',
        'amazonReferenceNumber' => 'amazonReferenceNumber',
        'shipmentConfirmationDate' => 'shipmentConfirmationDate',
        'shippedDate' => 'shippedDate',
        'estimatedDeliveryDate' => 'estimatedDeliveryDate',
        'sellingParty' => 'sellingParty',
        'shipFromParty' => 'shipFromParty',
        'shipToParty' => 'shipToParty',
        'shipmentMeasurements' => 'shipmentMeasurements',
        'importDetails' => 'importDetails',
        'shippedItems' => 'shippedItems',
        'cartons' => 'cartons',
        'pallets' => 'pallets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipmentIdentifier' => 'setShipmentIdentifier',
        'shipmentConfirmationType' => 'setShipmentConfirmationType',
        'shipmentType' => 'setShipmentType',
        'shipmentStructure' => 'setShipmentStructure',
        'transportationDetails' => 'setTransportationDetails',
        'amazonReferenceNumber' => 'setAmazonReferenceNumber',
        'shipmentConfirmationDate' => 'setShipmentConfirmationDate',
        'shippedDate' => 'setShippedDate',
        'estimatedDeliveryDate' => 'setEstimatedDeliveryDate',
        'sellingParty' => 'setSellingParty',
        'shipFromParty' => 'setShipFromParty',
        'shipToParty' => 'setShipToParty',
        'shipmentMeasurements' => 'setShipmentMeasurements',
        'importDetails' => 'setImportDetails',
        'shippedItems' => 'setShippedItems',
        'cartons' => 'setCartons',
        'pallets' => 'setPallets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipmentIdentifier' => 'getShipmentIdentifier',
        'shipmentConfirmationType' => 'getShipmentConfirmationType',
        'shipmentType' => 'getShipmentType',
        'shipmentStructure' => 'getShipmentStructure',
        'transportationDetails' => 'getTransportationDetails',
        'amazonReferenceNumber' => 'getAmazonReferenceNumber',
        'shipmentConfirmationDate' => 'getShipmentConfirmationDate',
        'shippedDate' => 'getShippedDate',
        'estimatedDeliveryDate' => 'getEstimatedDeliveryDate',
        'sellingParty' => 'getSellingParty',
        'shipFromParty' => 'getShipFromParty',
        'shipToParty' => 'getShipToParty',
        'shipmentMeasurements' => 'getShipmentMeasurements',
        'importDetails' => 'getImportDetails',
        'shippedItems' => 'getShippedItems',
        'cartons' => 'getCartons',
        'pallets' => 'getPallets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SHIPMENT_CONFIRMATION_TYPE_ORIGINAL = 'Original';
    const SHIPMENT_CONFIRMATION_TYPE_REPLACE = 'Replace';
    const SHIPMENT_TYPE_TRUCK_LOAD = 'TruckLoad';
    const SHIPMENT_TYPE_LESS_THAN_TRUCK_LOAD = 'LessThanTruckLoad';
    const SHIPMENT_TYPE_SMALL_PARCEL = 'SmallParcel';
    const SHIPMENT_STRUCTURE_PALLETIZED_ASSORTMENT_CASE = 'PalletizedAssortmentCase';
    const SHIPMENT_STRUCTURE_LOOSE_ASSORTMENT_CASE = 'LooseAssortmentCase';
    const SHIPMENT_STRUCTURE_PALLET_OF_ITEMS = 'PalletOfItems';
    const SHIPMENT_STRUCTURE_PALLETIZED_STANDARD_CASE = 'PalletizedStandardCase';
    const SHIPMENT_STRUCTURE_LOOSE_STANDARD_CASE = 'LooseStandardCase';
    const SHIPMENT_STRUCTURE_MASTER_PALLET = 'MasterPallet';
    const SHIPMENT_STRUCTURE_MASTER_CASE = 'MasterCase';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentConfirmationTypeAllowableValues()
    {
        return [
            self::SHIPMENT_CONFIRMATION_TYPE_ORIGINAL,
            self::SHIPMENT_CONFIRMATION_TYPE_REPLACE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentTypeAllowableValues()
    {
        return [
            self::SHIPMENT_TYPE_TRUCK_LOAD,
            self::SHIPMENT_TYPE_LESS_THAN_TRUCK_LOAD,
            self::SHIPMENT_TYPE_SMALL_PARCEL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentStructureAllowableValues()
    {
        return [
            self::SHIPMENT_STRUCTURE_PALLETIZED_ASSORTMENT_CASE,
            self::SHIPMENT_STRUCTURE_LOOSE_ASSORTMENT_CASE,
            self::SHIPMENT_STRUCTURE_PALLET_OF_ITEMS,
            self::SHIPMENT_STRUCTURE_PALLETIZED_STANDARD_CASE,
            self::SHIPMENT_STRUCTURE_LOOSE_STANDARD_CASE,
            self::SHIPMENT_STRUCTURE_MASTER_PALLET,
            self::SHIPMENT_STRUCTURE_MASTER_CASE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipmentIdentifier'] = $data['shipmentIdentifier'] ?? null;
        $this->container['shipmentConfirmationType'] = $data['shipmentConfirmationType'] ?? null;
        $this->container['shipmentType'] = $data['shipmentType'] ?? null;
        $this->container['shipmentStructure'] = $data['shipmentStructure'] ?? null;
        $this->container['transportationDetails'] = $data['transportationDetails'] ?? null;
        $this->container['amazonReferenceNumber'] = $data['amazonReferenceNumber'] ?? null;
        $this->container['shipmentConfirmationDate'] = $data['shipmentConfirmationDate'] ?? null;
        $this->container['shippedDate'] = $data['shippedDate'] ?? null;
        $this->container['estimatedDeliveryDate'] = $data['estimatedDeliveryDate'] ?? null;
        $this->container['sellingParty'] = $data['sellingParty'] ?? null;
        $this->container['shipFromParty'] = $data['shipFromParty'] ?? null;
        $this->container['shipToParty'] = $data['shipToParty'] ?? null;
        $this->container['shipmentMeasurements'] = $data['shipmentMeasurements'] ?? null;
        $this->container['importDetails'] = $data['importDetails'] ?? null;
        $this->container['shippedItems'] = $data['shippedItems'] ?? null;
        $this->container['cartons'] = $data['cartons'] ?? null;
        $this->container['pallets'] = $data['pallets'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shipmentIdentifier'] === null) {
            $invalidProperties[] = "'shipmentIdentifier' can't be null";
        }
        if ($this->container['shipmentConfirmationType'] === null) {
            $invalidProperties[] = "'shipmentConfirmationType' can't be null";
        }
        $allowedValues = $this->getShipmentConfirmationTypeAllowableValues();
        if (!is_null($this->container['shipmentConfirmationType']) && !in_array($this->container['shipmentConfirmationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipmentConfirmationType', must be one of '%s'",
                $this->container['shipmentConfirmationType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!is_null($this->container['shipmentType']) && !in_array($this->container['shipmentType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipmentType', must be one of '%s'",
                $this->container['shipmentType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShipmentStructureAllowableValues();
        if (!is_null($this->container['shipmentStructure']) && !in_array($this->container['shipmentStructure'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipmentStructure', must be one of '%s'",
                $this->container['shipmentStructure'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['shipmentConfirmationDate'] === null) {
            $invalidProperties[] = "'shipmentConfirmationDate' can't be null";
        }
        if ($this->container['sellingParty'] === null) {
            $invalidProperties[] = "'sellingParty' can't be null";
        }
        if ($this->container['shipFromParty'] === null) {
            $invalidProperties[] = "'shipFromParty' can't be null";
        }
        if ($this->container['shipToParty'] === null) {
            $invalidProperties[] = "'shipToParty' can't be null";
        }
        if ($this->container['shippedItems'] === null) {
            $invalidProperties[] = "'shippedItems' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipmentIdentifier
     *
     * @return string
     */
    public function getShipmentIdentifier()
    {
        return $this->container['shipmentIdentifier'];
    }

    /**
     * Sets shipmentIdentifier
     *
     * @param string $shipmentIdentifier Unique shipment ID (not used over the last 365 days).
     *
     * @return self
     */
    public function setShipmentIdentifier($shipmentIdentifier)
    {
        $this->container['shipmentIdentifier'] = $shipmentIdentifier;

        return $this;
    }

    /**
     * Gets shipmentConfirmationType
     *
     * @return string
     */
    public function getShipmentConfirmationType()
    {
        return $this->container['shipmentConfirmationType'];
    }

    /**
     * Sets shipmentConfirmationType
     *
     * @param string $shipmentConfirmationType Indicates if this shipment confirmation is the initial confirmation, or intended to replace an already posted shipment confirmation. If replacing an existing shipment confirmation, be sure to provide the identical shipmentIdentifier and sellingParty information as in the previous confirmation.
     *
     * @return self
     */
    public function setShipmentConfirmationType($shipmentConfirmationType)
    {
        $allowedValues = $this->getShipmentConfirmationTypeAllowableValues();
        if (!in_array($shipmentConfirmationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipmentConfirmationType', must be one of '%s'",
                    $shipmentConfirmationType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipmentConfirmationType'] = $shipmentConfirmationType;

        return $this;
    }

    /**
     * Gets shipmentType
     *
     * @return string|null
     */
    public function getShipmentType()
    {
        return $this->container['shipmentType'];
    }

    /**
     * Sets shipmentType
     *
     * @param string|null $shipmentType The type of shipment.
     *
     * @return self
     */
    public function setShipmentType($shipmentType)
    {
        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!is_null($shipmentType) && !in_array($shipmentType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipmentType', must be one of '%s'",
                    $shipmentType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipmentType'] = $shipmentType;

        return $this;
    }

    /**
     * Gets shipmentStructure
     *
     * @return string|null
     */
    public function getShipmentStructure()
    {
        return $this->container['shipmentStructure'];
    }

    /**
     * Sets shipmentStructure
     *
     * @param string|null $shipmentStructure Shipment hierarchical structure.
     *
     * @return self
     */
    public function setShipmentStructure($shipmentStructure)
    {
        $allowedValues = $this->getShipmentStructureAllowableValues();
        if (!is_null($shipmentStructure) && !in_array($shipmentStructure, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipmentStructure', must be one of '%s'",
                    $shipmentStructure,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipmentStructure'] = $shipmentStructure;

        return $this;
    }

    /**
     * Gets transportationDetails
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\TransportationDetails|null
     */
    public function getTransportationDetails()
    {
        return $this->container['transportationDetails'];
    }

    /**
     * Sets transportationDetails
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\TransportationDetails|null $transportationDetails transportationDetails
     *
     * @return self
     */
    public function setTransportationDetails($transportationDetails)
    {
        $this->container['transportationDetails'] = $transportationDetails;

        return $this;
    }

    /**
     * Gets amazonReferenceNumber
     *
     * @return string|null
     */
    public function getAmazonReferenceNumber()
    {
        return $this->container['amazonReferenceNumber'];
    }

    /**
     * Sets amazonReferenceNumber
     *
     * @param string|null $amazonReferenceNumber The Amazon Reference Number is a unique identifier generated by Amazon for all Collect/WePay shipments when you submit  a routing request. This field is mandatory for Collect/WePay shipments.
     *
     * @return self
     */
    public function setAmazonReferenceNumber($amazonReferenceNumber)
    {
        $this->container['amazonReferenceNumber'] = $amazonReferenceNumber;

        return $this;
    }

    /**
     * Gets shipmentConfirmationDate
     *
     * @return \DateTime
     */
    public function getShipmentConfirmationDate()
    {
        return $this->container['shipmentConfirmationDate'];
    }

    /**
     * Sets shipmentConfirmationDate
     *
     * @param \DateTime $shipmentConfirmationDate Date on which the shipment confirmation was submitted.
     *
     * @return self
     */
    public function setShipmentConfirmationDate($shipmentConfirmationDate)
    {
        $this->container['shipmentConfirmationDate'] = $shipmentConfirmationDate;

        return $this;
    }

    /**
     * Gets shippedDate
     *
     * @return \DateTime|null
     */
    public function getShippedDate()
    {
        return $this->container['shippedDate'];
    }

    /**
     * Sets shippedDate
     *
     * @param \DateTime|null $shippedDate The date and time of the departure of the shipment from the vendor's location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the Amazon destination warehouse, whichever is sooner. Shipped date mentioned in the shipment confirmation should not be in the future.
     *
     * @return self
     */
    public function setShippedDate($shippedDate)
    {
        $this->container['shippedDate'] = $shippedDate;

        return $this;
    }

    /**
     * Gets estimatedDeliveryDate
     *
     * @return \DateTime|null
     */
    public function getEstimatedDeliveryDate()
    {
        return $this->container['estimatedDeliveryDate'];
    }

    /**
     * Sets estimatedDeliveryDate
     *
     * @param \DateTime|null $estimatedDeliveryDate The date and time on which the shipment is expected to reach buyer's warehouse. It needs to be an estimate based on the average transit time between ship from location and the destination. The exact appointment time will be provided by the buyer and is potentially not known when creating the shipment confirmation.
     *
     * @return self
     */
    public function setEstimatedDeliveryDate($estimatedDeliveryDate)
    {
        $this->container['estimatedDeliveryDate'] = $estimatedDeliveryDate;

        return $this;
    }

    /**
     * Gets sellingParty
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\PartyIdentification
     */
    public function getSellingParty()
    {
        return $this->container['sellingParty'];
    }

    /**
     * Sets sellingParty
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\PartyIdentification $sellingParty sellingParty
     *
     * @return self
     */
    public function setSellingParty($sellingParty)
    {
        $this->container['sellingParty'] = $sellingParty;

        return $this;
    }

    /**
     * Gets shipFromParty
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\PartyIdentification
     */
    public function getShipFromParty()
    {
        return $this->container['shipFromParty'];
    }

    /**
     * Sets shipFromParty
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\PartyIdentification $shipFromParty shipFromParty
     *
     * @return self
     */
    public function setShipFromParty($shipFromParty)
    {
        $this->container['shipFromParty'] = $shipFromParty;

        return $this;
    }

    /**
     * Gets shipToParty
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\PartyIdentification
     */
    public function getShipToParty()
    {
        return $this->container['shipToParty'];
    }

    /**
     * Sets shipToParty
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\PartyIdentification $shipToParty shipToParty
     *
     * @return self
     */
    public function setShipToParty($shipToParty)
    {
        $this->container['shipToParty'] = $shipToParty;

        return $this;
    }

    /**
     * Gets shipmentMeasurements
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\ShipmentMeasurements|null
     */
    public function getShipmentMeasurements()
    {
        return $this->container['shipmentMeasurements'];
    }

    /**
     * Sets shipmentMeasurements
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\ShipmentMeasurements|null $shipmentMeasurements shipmentMeasurements
     *
     * @return self
     */
    public function setShipmentMeasurements($shipmentMeasurements)
    {
        $this->container['shipmentMeasurements'] = $shipmentMeasurements;

        return $this;
    }

    /**
     * Gets importDetails
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\ImportDetails|null
     */
    public function getImportDetails()
    {
        return $this->container['importDetails'];
    }

    /**
     * Sets importDetails
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\ImportDetails|null $importDetails importDetails
     *
     * @return self
     */
    public function setImportDetails($importDetails)
    {
        $this->container['importDetails'] = $importDetails;

        return $this;
    }

    /**
     * Gets shippedItems
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\Item[]
     */
    public function getShippedItems()
    {
        return $this->container['shippedItems'];
    }

    /**
     * Sets shippedItems
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\Item[] $shippedItems A list of the items in this shipment and their associated details. If any of the item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level.
     *
     * @return self
     */
    public function setShippedItems($shippedItems)
    {
        $this->container['shippedItems'] = $shippedItems;

        return $this;
    }

    /**
     * Gets cartons
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\Carton[]|null
     */
    public function getCartons()
    {
        return $this->container['cartons'];
    }

    /**
     * Sets cartons
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\Carton[]|null $cartons A list of the cartons in this shipment.
     *
     * @return self
     */
    public function setCartons($cartons)
    {
        $this->container['cartons'] = $cartons;

        return $this;
    }

    /**
     * Gets pallets
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\Pallet[]|null
     */
    public function getPallets()
    {
        return $this->container['pallets'];
    }

    /**
     * Sets pallets
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\Pallet[]|null $pallets A list of the pallets in this shipment.
     *
     * @return self
     */
    public function setPallets($pallets)
    {
        $this->container['pallets'] = $pallets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


