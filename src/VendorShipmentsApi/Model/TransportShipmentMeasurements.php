<?php
/**
 * TransportShipmentMeasurements
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\VendorShipmentsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\VendorShipmentsApi\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * TransportShipmentMeasurements Class Doc Comment
 *
 * @category Class
 * @description Shipment measurement details.
 * @package  Webcom\Amazon\Rest\VendorShipmentsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class TransportShipmentMeasurements implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransportShipmentMeasurements';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'totalCartonCount' => 'int',
        'totalPalletStackable' => 'int',
        'totalPalletNonStackable' => 'int',
        'shipmentWeight' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\Weight',
        'shipmentVolume' => '\Webcom\Amazon\Rest\VendorShipmentsApi\Model\Volume'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'totalCartonCount' => null,
        'totalPalletStackable' => null,
        'totalPalletNonStackable' => null,
        'shipmentWeight' => null,
        'shipmentVolume' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'totalCartonCount' => 'totalCartonCount',
        'totalPalletStackable' => 'totalPalletStackable',
        'totalPalletNonStackable' => 'totalPalletNonStackable',
        'shipmentWeight' => 'shipmentWeight',
        'shipmentVolume' => 'shipmentVolume'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'totalCartonCount' => 'setTotalCartonCount',
        'totalPalletStackable' => 'setTotalPalletStackable',
        'totalPalletNonStackable' => 'setTotalPalletNonStackable',
        'shipmentWeight' => 'setShipmentWeight',
        'shipmentVolume' => 'setShipmentVolume'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'totalCartonCount' => 'getTotalCartonCount',
        'totalPalletStackable' => 'getTotalPalletStackable',
        'totalPalletNonStackable' => 'getTotalPalletNonStackable',
        'shipmentWeight' => 'getShipmentWeight',
        'shipmentVolume' => 'getShipmentVolume'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['totalCartonCount'] = $data['totalCartonCount'] ?? null;
        $this->container['totalPalletStackable'] = $data['totalPalletStackable'] ?? null;
        $this->container['totalPalletNonStackable'] = $data['totalPalletNonStackable'] ?? null;
        $this->container['shipmentWeight'] = $data['shipmentWeight'] ?? null;
        $this->container['shipmentVolume'] = $data['shipmentVolume'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets totalCartonCount
     *
     * @return int|null
     */
    public function getTotalCartonCount()
    {
        return $this->container['totalCartonCount'];
    }

    /**
     * Sets totalCartonCount
     *
     * @param int|null $totalCartonCount Total number of cartons present in the shipment. Provide the cartonCount only for non-palletized shipments.
     *
     * @return self
     */
    public function setTotalCartonCount($totalCartonCount)
    {
        $this->container['totalCartonCount'] = $totalCartonCount;

        return $this;
    }

    /**
     * Gets totalPalletStackable
     *
     * @return int|null
     */
    public function getTotalPalletStackable()
    {
        return $this->container['totalPalletStackable'];
    }

    /**
     * Sets totalPalletStackable
     *
     * @param int|null $totalPalletStackable Total number of Stackable Pallets present in the shipment.
     *
     * @return self
     */
    public function setTotalPalletStackable($totalPalletStackable)
    {
        $this->container['totalPalletStackable'] = $totalPalletStackable;

        return $this;
    }

    /**
     * Gets totalPalletNonStackable
     *
     * @return int|null
     */
    public function getTotalPalletNonStackable()
    {
        return $this->container['totalPalletNonStackable'];
    }

    /**
     * Sets totalPalletNonStackable
     *
     * @param int|null $totalPalletNonStackable Total number of Non Stackable Pallets present in the shipment.
     *
     * @return self
     */
    public function setTotalPalletNonStackable($totalPalletNonStackable)
    {
        $this->container['totalPalletNonStackable'] = $totalPalletNonStackable;

        return $this;
    }

    /**
     * Gets shipmentWeight
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\Weight|null
     */
    public function getShipmentWeight()
    {
        return $this->container['shipmentWeight'];
    }

    /**
     * Sets shipmentWeight
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\Weight|null $shipmentWeight shipmentWeight
     *
     * @return self
     */
    public function setShipmentWeight($shipmentWeight)
    {
        $this->container['shipmentWeight'] = $shipmentWeight;

        return $this;
    }

    /**
     * Gets shipmentVolume
     *
     * @return \Webcom\Amazon\Rest\VendorShipmentsApi\Model\Volume|null
     */
    public function getShipmentVolume()
    {
        return $this->container['shipmentVolume'];
    }

    /**
     * Sets shipmentVolume
     *
     * @param \Webcom\Amazon\Rest\VendorShipmentsApi\Model\Volume|null $shipmentVolume shipmentVolume
     *
     * @return self
     */
    public function setShipmentVolume($shipmentVolume)
    {
        $this->container['shipmentVolume'] = $shipmentVolume;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


