<?php
/**
 * CustomerInvoicesApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\ApiException;
use Webcom\Amazon\Rest\Configuration;
use Webcom\Amazon\Rest\HeaderSelector;
use Webcom\Amazon\Rest\ObjectSerializer;

/**
 * CustomerInvoicesApi Class Doc Comment
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerInvoicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCustomerInvoice
     *
     * @param  string $purchaseOrderNumber Purchase order number of the shipment for which to return the invoice. (required)
     *
     * @throws \Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1
     */
    public function getCustomerInvoice($purchaseOrderNumber)
    {
        list($response) = $this->getCustomerInvoiceWithHttpInfo($purchaseOrderNumber);
        return $response;
    }

    /**
     * Operation getCustomerInvoiceWithHttpInfo
     *
     * @param  string $purchaseOrderNumber Purchase order number of the shipment for which to return the invoice. (required)
     *
     * @throws \Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerInvoiceWithHttpInfo($purchaseOrderNumber)
    {
        $request = $this->getCustomerInvoiceRequest($purchaseOrderNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerInvoiceAsync
     *
     * 
     *
     * @param  string $purchaseOrderNumber Purchase order number of the shipment for which to return the invoice. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerInvoiceAsync($purchaseOrderNumber)
    {
        return $this->getCustomerInvoiceAsyncWithHttpInfo($purchaseOrderNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerInvoiceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $purchaseOrderNumber Purchase order number of the shipment for which to return the invoice. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerInvoiceAsyncWithHttpInfo($purchaseOrderNumber)
    {
        $returnType = '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1';
        $request = $this->getCustomerInvoiceRequest($purchaseOrderNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerInvoice'
     *
     * @param  string $purchaseOrderNumber Purchase order number of the shipment for which to return the invoice. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerInvoiceRequest($purchaseOrderNumber)
    {
        // verify the required parameter 'purchaseOrderNumber' is set
        if ($purchaseOrderNumber === null || (is_array($purchaseOrderNumber) && count($purchaseOrderNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderNumber when calling getCustomerInvoice'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9]+$/", $purchaseOrderNumber)) {
            throw new \InvalidArgumentException("invalid value for \"purchaseOrderNumber\" when calling CustomerInvoicesApi.getCustomerInvoice, must conform to the pattern /^[a-zA-Z0-9]+$/.");
        }


        $resourcePath = '/vendor/directFulfillment/shipping/v1/customerInvoices/{purchaseOrderNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($purchaseOrderNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderNumber' . '}',
                ObjectSerializer::toPathValue($purchaseOrderNumber),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerInvoices
     *
     * @param  \DateTime $createdAfter Orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format. (required)
     * @param  \DateTime $createdBefore Orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format. (required)
     * @param  string $shipFromPartyId The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses. (optional)
     * @param  int $limit The limit to the number of records returned (optional)
     * @param  string $sortOrder Sort ASC or DESC by order creation date. (optional)
     * @param  string $nextToken Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)
     *
     * @throws \Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoicesResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1
     */
    public function getCustomerInvoices($createdAfter, $createdBefore, $shipFromPartyId = null, $limit = null, $sortOrder = null, $nextToken = null)
    {
        list($response) = $this->getCustomerInvoicesWithHttpInfo($createdAfter, $createdBefore, $shipFromPartyId, $limit, $sortOrder, $nextToken);
        return $response;
    }

    /**
     * Operation getCustomerInvoicesWithHttpInfo
     *
     * @param  \DateTime $createdAfter Orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format. (required)
     * @param  \DateTime $createdBefore Orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format. (required)
     * @param  string $shipFromPartyId The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses. (optional)
     * @param  int $limit The limit to the number of records returned (optional)
     * @param  string $sortOrder Sort ASC or DESC by order creation date. (optional)
     * @param  string $nextToken Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)
     *
     * @throws \Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoicesResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1|\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerInvoicesWithHttpInfo($createdAfter, $createdBefore, $shipFromPartyId = null, $limit = null, $sortOrder = null, $nextToken = null)
    {
        $request = $this->getCustomerInvoicesRequest($createdAfter, $createdBefore, $shipFromPartyId, $limit, $sortOrder, $nextToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoicesResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoicesResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoicesResponseV1';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoicesResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoiceResponseV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerInvoicesAsync
     *
     * 
     *
     * @param  \DateTime $createdAfter Orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format. (required)
     * @param  \DateTime $createdBefore Orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format. (required)
     * @param  string $shipFromPartyId The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses. (optional)
     * @param  int $limit The limit to the number of records returned (optional)
     * @param  string $sortOrder Sort ASC or DESC by order creation date. (optional)
     * @param  string $nextToken Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerInvoicesAsync($createdAfter, $createdBefore, $shipFromPartyId = null, $limit = null, $sortOrder = null, $nextToken = null)
    {
        return $this->getCustomerInvoicesAsyncWithHttpInfo($createdAfter, $createdBefore, $shipFromPartyId, $limit, $sortOrder, $nextToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerInvoicesAsyncWithHttpInfo
     *
     * 
     *
     * @param  \DateTime $createdAfter Orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format. (required)
     * @param  \DateTime $createdBefore Orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format. (required)
     * @param  string $shipFromPartyId The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses. (optional)
     * @param  int $limit The limit to the number of records returned (optional)
     * @param  string $sortOrder Sort ASC or DESC by order creation date. (optional)
     * @param  string $nextToken Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerInvoicesAsyncWithHttpInfo($createdAfter, $createdBefore, $shipFromPartyId = null, $limit = null, $sortOrder = null, $nextToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\VendorDirectFulfillmentShippingApiV1\Model\GetCustomerInvoicesResponseV1';
        $request = $this->getCustomerInvoicesRequest($createdAfter, $createdBefore, $shipFromPartyId, $limit, $sortOrder, $nextToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerInvoices'
     *
     * @param  \DateTime $createdAfter Orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format. (required)
     * @param  \DateTime $createdBefore Orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format. (required)
     * @param  string $shipFromPartyId The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses. (optional)
     * @param  int $limit The limit to the number of records returned (optional)
     * @param  string $sortOrder Sort ASC or DESC by order creation date. (optional)
     * @param  string $nextToken Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerInvoicesRequest($createdAfter, $createdBefore, $shipFromPartyId = null, $limit = null, $sortOrder = null, $nextToken = null)
    {
        // verify the required parameter 'createdAfter' is set
        if ($createdAfter === null || (is_array($createdAfter) && count($createdAfter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createdAfter when calling getCustomerInvoices'
            );
        }
        // verify the required parameter 'createdBefore' is set
        if ($createdBefore === null || (is_array($createdBefore) && count($createdBefore) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createdBefore when calling getCustomerInvoices'
            );
        }
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomerInvoicesApi.getCustomerInvoices, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomerInvoicesApi.getCustomerInvoices, must be bigger than or equal to 1.');
        }


        $resourcePath = '/vendor/directFulfillment/shipping/v1/customerInvoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($shipFromPartyId)) {
            $shipFromPartyId = ObjectSerializer::serializeCollection($shipFromPartyId, '', true);
        }
        if ($shipFromPartyId !== null) {
            $queryParams['shipFromPartyId'] = $shipFromPartyId;
        }
        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($createdAfter)) {
            $createdAfter = ObjectSerializer::serializeCollection($createdAfter, '', true);
        }
        if ($createdAfter !== null) {
            $queryParams['createdAfter'] = $createdAfter;
        }
        // query params
        if (is_array($createdBefore)) {
            $createdBefore = ObjectSerializer::serializeCollection($createdBefore, '', true);
        }
        if ($createdBefore !== null) {
            $queryParams['createdBefore'] = $createdBefore;
        }
        // query params
        if (is_array($sortOrder)) {
            $sortOrder = ObjectSerializer::serializeCollection($sortOrder, '', true);
        }
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = $sortOrder;
        }
        // query params
        if (is_array($nextToken)) {
            $nextToken = ObjectSerializer::serializeCollection($nextToken, '', true);
        }
        if ($nextToken !== null) {
            $queryParams['nextToken'] = $nextToken;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'payload']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'payload'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
