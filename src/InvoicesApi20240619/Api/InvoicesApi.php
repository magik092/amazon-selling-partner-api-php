<?php
/**
 * InvoicesApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\InvoicesApi20240619
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Invoices.
 *
 * Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\InvoicesApi20240619\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Webcom\Amazon\Rest\InvoicesApi20240619\ApiException;
use Webcom\Amazon\Rest\Configuration;
use Webcom\Amazon\Rest\HeaderSelector;
use Webcom\Amazon\Rest\ObjectSerializer;

/**
 * InvoicesApi Class Doc Comment
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\InvoicesApi20240619
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvoicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createInvoicesExport
     *
     * @param  \Webcom\Amazon\Rest\InvoicesApi20240619\Model\ExportInvoicesRequest20240619 $body Information required to create the export request. (required)
     *
     * @throws \Webcom\Amazon\Rest\InvoicesApi20240619\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\InvoicesApi20240619\Model\ExportInvoicesResponse20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619
     */
    public function createInvoicesExport($body)
    {
        list($response) = $this->createInvoicesExportWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createInvoicesExportWithHttpInfo
     *
     * @param  \Webcom\Amazon\Rest\InvoicesApi20240619\Model\ExportInvoicesRequest20240619 $body Information required to create the export request. (required)
     *
     * @throws \Webcom\Amazon\Rest\InvoicesApi20240619\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\InvoicesApi20240619\Model\ExportInvoicesResponse20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInvoicesExportWithHttpInfo($body)
    {
        $request = $this->createInvoicesExportRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ExportInvoicesResponse20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ExportInvoicesResponse20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ExportInvoicesResponse20240619';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ExportInvoicesResponse20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInvoicesExportAsync
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\InvoicesApi20240619\Model\ExportInvoicesRequest20240619 $body Information required to create the export request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInvoicesExportAsync($body)
    {
        return $this->createInvoicesExportAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInvoicesExportAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\InvoicesApi20240619\Model\ExportInvoicesRequest20240619 $body Information required to create the export request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInvoicesExportAsyncWithHttpInfo($body)
    {
        $returnType = '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ExportInvoicesResponse20240619';
        $request = $this->createInvoicesExportRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInvoicesExport'
     *
     * @param  \Webcom\Amazon\Rest\InvoicesApi20240619\Model\ExportInvoicesRequest20240619 $body Information required to create the export request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createInvoicesExportRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createInvoicesExport'
            );
        }

        $resourcePath = '/tax/invoices/2024-06-19/exports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoice
     *
     * @param  string $marketplaceId The marketplace from which you want the invoice. (required)
     * @param  string $invoiceId The invoice identifier. (required)
     *
     * @throws \Webcom\Amazon\Rest\InvoicesApi20240619\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoiceResponse20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619
     */
    public function getInvoice($marketplaceId, $invoiceId)
    {
        list($response) = $this->getInvoiceWithHttpInfo($marketplaceId, $invoiceId);
        return $response;
    }

    /**
     * Operation getInvoiceWithHttpInfo
     *
     * @param  string $marketplaceId The marketplace from which you want the invoice. (required)
     * @param  string $invoiceId The invoice identifier. (required)
     *
     * @throws \Webcom\Amazon\Rest\InvoicesApi20240619\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoiceResponse20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceWithHttpInfo($marketplaceId, $invoiceId)
    {
        $request = $this->getInvoiceRequest($marketplaceId, $invoiceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoiceResponse20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoiceResponse20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoiceResponse20240619';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoiceResponse20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceAsync
     *
     * 
     *
     * @param  string $marketplaceId The marketplace from which you want the invoice. (required)
     * @param  string $invoiceId The invoice identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceAsync($marketplaceId, $invoiceId)
    {
        return $this->getInvoiceAsyncWithHttpInfo($marketplaceId, $invoiceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $marketplaceId The marketplace from which you want the invoice. (required)
     * @param  string $invoiceId The invoice identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceAsyncWithHttpInfo($marketplaceId, $invoiceId)
    {
        $returnType = '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoiceResponse20240619';
        $request = $this->getInvoiceRequest($marketplaceId, $invoiceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoice'
     *
     * @param  string $marketplaceId The marketplace from which you want the invoice. (required)
     * @param  string $invoiceId The invoice identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvoiceRequest($marketplaceId, $invoiceId)
    {
        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling getInvoice'
            );
        }
        // verify the required parameter 'invoiceId' is set
        if ($invoiceId === null || (is_array($invoiceId) && count($invoiceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoiceId when calling getInvoice'
            );
        }

        $resourcePath = '/tax/invoices/2024-06-19/invoices/{invoiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }


        // path params
        if ($invoiceId !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoiceId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoices
     *
     * @param  string $marketplaceId The response includes only the invoices that match the specified marketplace. (required)
     * @param  string $transactionIdentifierName The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierId&#x60; field.Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionIdentifierName&#x60; options. (optional)
     * @param  int $pageSize The maximum number of invoices you want to return in a single call.  Minimum: 1  Maximum: 200 (optional)
     * @param  \DateTime $dateEnd The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time. (optional)
     * @param  string $transactionType The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options. (optional)
     * @param  string $transactionIdentifierId The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierName&#x60; field. (optional)
     * @param  \DateTime $dateStart The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request. (optional)
     * @param  string $series Return invoices with the specified series number. (optional)
     * @param  string $nextToken The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  string $sortOrder Sort the invoices in the response in ascending or descending order. (optional)
     * @param  string $invoiceType The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options. (optional)
     * @param  string[] $statuses A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1 (optional)
     * @param  string $externalInvoiceId Return invoices that match this external ID. This is typically the Government Invoice ID. (optional)
     * @param  string $sortBy The attribute by which you want to sort the invoices in the response. (optional)
     *
     * @throws \Webcom\Amazon\Rest\InvoicesApi20240619\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesResponse20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619
     */
    public function getInvoices($marketplaceId, $transactionIdentifierName = null, $pageSize = null, $dateEnd = null, $transactionType = null, $transactionIdentifierId = null, $dateStart = null, $series = null, $nextToken = null, $sortOrder = null, $invoiceType = null, $statuses = null, $externalInvoiceId = null, $sortBy = null)
    {
        list($response) = $this->getInvoicesWithHttpInfo($marketplaceId, $transactionIdentifierName, $pageSize, $dateEnd, $transactionType, $transactionIdentifierId, $dateStart, $series, $nextToken, $sortOrder, $invoiceType, $statuses, $externalInvoiceId, $sortBy);
        return $response;
    }

    /**
     * Operation getInvoicesWithHttpInfo
     *
     * @param  string $marketplaceId The response includes only the invoices that match the specified marketplace. (required)
     * @param  string $transactionIdentifierName The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierId&#x60; field.Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionIdentifierName&#x60; options. (optional)
     * @param  int $pageSize The maximum number of invoices you want to return in a single call.  Minimum: 1  Maximum: 200 (optional)
     * @param  \DateTime $dateEnd The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time. (optional)
     * @param  string $transactionType The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options. (optional)
     * @param  string $transactionIdentifierId The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierName&#x60; field. (optional)
     * @param  \DateTime $dateStart The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request. (optional)
     * @param  string $series Return invoices with the specified series number. (optional)
     * @param  string $nextToken The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  string $sortOrder Sort the invoices in the response in ascending or descending order. (optional)
     * @param  string $invoiceType The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options. (optional)
     * @param  string[] $statuses A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1 (optional)
     * @param  string $externalInvoiceId Return invoices that match this external ID. This is typically the Government Invoice ID. (optional)
     * @param  string $sortBy The attribute by which you want to sort the invoices in the response. (optional)
     *
     * @throws \Webcom\Amazon\Rest\InvoicesApi20240619\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesResponse20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoicesWithHttpInfo($marketplaceId, $transactionIdentifierName = null, $pageSize = null, $dateEnd = null, $transactionType = null, $transactionIdentifierId = null, $dateStart = null, $series = null, $nextToken = null, $sortOrder = null, $invoiceType = null, $statuses = null, $externalInvoiceId = null, $sortBy = null)
    {
        $request = $this->getInvoicesRequest($marketplaceId, $transactionIdentifierName, $pageSize, $dateEnd, $transactionType, $transactionIdentifierId, $dateStart, $series, $nextToken, $sortOrder, $invoiceType, $statuses, $externalInvoiceId, $sortBy);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesResponse20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesResponse20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesResponse20240619';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesResponse20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoicesAsync
     *
     * 
     *
     * @param  string $marketplaceId The response includes only the invoices that match the specified marketplace. (required)
     * @param  string $transactionIdentifierName The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierId&#x60; field.Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionIdentifierName&#x60; options. (optional)
     * @param  int $pageSize The maximum number of invoices you want to return in a single call.  Minimum: 1  Maximum: 200 (optional)
     * @param  \DateTime $dateEnd The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time. (optional)
     * @param  string $transactionType The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options. (optional)
     * @param  string $transactionIdentifierId The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierName&#x60; field. (optional)
     * @param  \DateTime $dateStart The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request. (optional)
     * @param  string $series Return invoices with the specified series number. (optional)
     * @param  string $nextToken The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  string $sortOrder Sort the invoices in the response in ascending or descending order. (optional)
     * @param  string $invoiceType The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options. (optional)
     * @param  string[] $statuses A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1 (optional)
     * @param  string $externalInvoiceId Return invoices that match this external ID. This is typically the Government Invoice ID. (optional)
     * @param  string $sortBy The attribute by which you want to sort the invoices in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesAsync($marketplaceId, $transactionIdentifierName = null, $pageSize = null, $dateEnd = null, $transactionType = null, $transactionIdentifierId = null, $dateStart = null, $series = null, $nextToken = null, $sortOrder = null, $invoiceType = null, $statuses = null, $externalInvoiceId = null, $sortBy = null)
    {
        return $this->getInvoicesAsyncWithHttpInfo($marketplaceId, $transactionIdentifierName, $pageSize, $dateEnd, $transactionType, $transactionIdentifierId, $dateStart, $series, $nextToken, $sortOrder, $invoiceType, $statuses, $externalInvoiceId, $sortBy)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoicesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $marketplaceId The response includes only the invoices that match the specified marketplace. (required)
     * @param  string $transactionIdentifierName The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierId&#x60; field.Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionIdentifierName&#x60; options. (optional)
     * @param  int $pageSize The maximum number of invoices you want to return in a single call.  Minimum: 1  Maximum: 200 (optional)
     * @param  \DateTime $dateEnd The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time. (optional)
     * @param  string $transactionType The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options. (optional)
     * @param  string $transactionIdentifierId The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierName&#x60; field. (optional)
     * @param  \DateTime $dateStart The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request. (optional)
     * @param  string $series Return invoices with the specified series number. (optional)
     * @param  string $nextToken The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  string $sortOrder Sort the invoices in the response in ascending or descending order. (optional)
     * @param  string $invoiceType The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options. (optional)
     * @param  string[] $statuses A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1 (optional)
     * @param  string $externalInvoiceId Return invoices that match this external ID. This is typically the Government Invoice ID. (optional)
     * @param  string $sortBy The attribute by which you want to sort the invoices in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesAsyncWithHttpInfo($marketplaceId, $transactionIdentifierName = null, $pageSize = null, $dateEnd = null, $transactionType = null, $transactionIdentifierId = null, $dateStart = null, $series = null, $nextToken = null, $sortOrder = null, $invoiceType = null, $statuses = null, $externalInvoiceId = null, $sortBy = null)
    {
        $returnType = '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesResponse20240619';
        $request = $this->getInvoicesRequest($marketplaceId, $transactionIdentifierName, $pageSize, $dateEnd, $transactionType, $transactionIdentifierId, $dateStart, $series, $nextToken, $sortOrder, $invoiceType, $statuses, $externalInvoiceId, $sortBy);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoices'
     *
     * @param  string $marketplaceId The response includes only the invoices that match the specified marketplace. (required)
     * @param  string $transactionIdentifierName The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierId&#x60; field.Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionIdentifierName&#x60; options. (optional)
     * @param  int $pageSize The maximum number of invoices you want to return in a single call.  Minimum: 1  Maximum: 200 (optional)
     * @param  \DateTime $dateEnd The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time. (optional)
     * @param  string $transactionType The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options. (optional)
     * @param  string $transactionIdentifierId The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierName&#x60; field. (optional)
     * @param  \DateTime $dateStart The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request. (optional)
     * @param  string $series Return invoices with the specified series number. (optional)
     * @param  string $nextToken The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  string $sortOrder Sort the invoices in the response in ascending or descending order. (optional)
     * @param  string $invoiceType The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options. (optional)
     * @param  string[] $statuses A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1 (optional)
     * @param  string $externalInvoiceId Return invoices that match this external ID. This is typically the Government Invoice ID. (optional)
     * @param  string $sortBy The attribute by which you want to sort the invoices in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvoicesRequest($marketplaceId, $transactionIdentifierName = null, $pageSize = null, $dateEnd = null, $transactionType = null, $transactionIdentifierId = null, $dateStart = null, $series = null, $nextToken = null, $sortOrder = null, $invoiceType = null, $statuses = null, $externalInvoiceId = null, $sortBy = null)
    {
        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling getInvoices'
            );
        }
        if ($statuses !== null && count($statuses) < 1) {
            throw new \InvalidArgumentException('invalid value for "$statuses" when calling InvoicesApi.getInvoices, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/tax/invoices/2024-06-19/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($transactionIdentifierName)) {
            $transactionIdentifierName = ObjectSerializer::serializeCollection($transactionIdentifierName, '', true);
        }
        if ($transactionIdentifierName !== null) {
            $queryParams['transactionIdentifierName'] = $transactionIdentifierName;
        }
        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($dateEnd)) {
            $dateEnd = ObjectSerializer::serializeCollection($dateEnd, '', true);
        }
        if ($dateEnd !== null) {
            $queryParams['dateEnd'] = $dateEnd;
        }
        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }
        // query params
        if (is_array($transactionType)) {
            $transactionType = ObjectSerializer::serializeCollection($transactionType, '', true);
        }
        if ($transactionType !== null) {
            $queryParams['transactionType'] = $transactionType;
        }
        // query params
        if (is_array($transactionIdentifierId)) {
            $transactionIdentifierId = ObjectSerializer::serializeCollection($transactionIdentifierId, '', true);
        }
        if ($transactionIdentifierId !== null) {
            $queryParams['transactionIdentifierId'] = $transactionIdentifierId;
        }
        // query params
        if (is_array($dateStart)) {
            $dateStart = ObjectSerializer::serializeCollection($dateStart, '', true);
        }
        if ($dateStart !== null) {
            $queryParams['dateStart'] = $dateStart;
        }
        // query params
        if (is_array($series)) {
            $series = ObjectSerializer::serializeCollection($series, '', true);
        }
        if ($series !== null) {
            $queryParams['series'] = $series;
        }
        // query params
        if (is_array($nextToken)) {
            $nextToken = ObjectSerializer::serializeCollection($nextToken, '', true);
        }
        if ($nextToken !== null) {
            $queryParams['nextToken'] = $nextToken;
        }
        // query params
        if (is_array($sortOrder)) {
            $sortOrder = ObjectSerializer::serializeCollection($sortOrder, '', true);
        }
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = $sortOrder;
        }
        // query params
        if (is_array($invoiceType)) {
            $invoiceType = ObjectSerializer::serializeCollection($invoiceType, '', true);
        }
        if ($invoiceType !== null) {
            $queryParams['invoiceType'] = $invoiceType;
        }
        // query params
        if (is_array($statuses)) {
            $statuses = ObjectSerializer::serializeCollection($statuses, 'form', true);
        }
        if ($statuses !== null) {
            $queryParams['statuses'] = $statuses;
        }
        // query params
        if (is_array($externalInvoiceId)) {
            $externalInvoiceId = ObjectSerializer::serializeCollection($externalInvoiceId, '', true);
        }
        if ($externalInvoiceId !== null) {
            $queryParams['externalInvoiceId'] = $externalInvoiceId;
        }
        // query params
        if (is_array($sortBy)) {
            $sortBy = ObjectSerializer::serializeCollection($sortBy, '', true);
        }
        if ($sortBy !== null) {
            $queryParams['sortBy'] = $sortBy;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoicesAttributes
     *
     * @param  string $marketplaceId The marketplace identifier. (required)
     *
     * @throws \Webcom\Amazon\Rest\InvoicesApi20240619\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesAttributesResponse20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619
     */
    public function getInvoicesAttributes($marketplaceId)
    {
        list($response) = $this->getInvoicesAttributesWithHttpInfo($marketplaceId);
        return $response;
    }

    /**
     * Operation getInvoicesAttributesWithHttpInfo
     *
     * @param  string $marketplaceId The marketplace identifier. (required)
     *
     * @throws \Webcom\Amazon\Rest\InvoicesApi20240619\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesAttributesResponse20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoicesAttributesWithHttpInfo($marketplaceId)
    {
        $request = $this->getInvoicesAttributesRequest($marketplaceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesAttributesResponse20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesAttributesResponse20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesAttributesResponse20240619';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesAttributesResponse20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoicesAttributesAsync
     *
     * 
     *
     * @param  string $marketplaceId The marketplace identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesAttributesAsync($marketplaceId)
    {
        return $this->getInvoicesAttributesAsyncWithHttpInfo($marketplaceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoicesAttributesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $marketplaceId The marketplace identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesAttributesAsyncWithHttpInfo($marketplaceId)
    {
        $returnType = '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesAttributesResponse20240619';
        $request = $this->getInvoicesAttributesRequest($marketplaceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoicesAttributes'
     *
     * @param  string $marketplaceId The marketplace identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvoicesAttributesRequest($marketplaceId)
    {
        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling getInvoicesAttributes'
            );
        }

        $resourcePath = '/tax/invoices/2024-06-19/attributes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoicesDocument
     *
     * @param  string $invoicesDocumentId The export document identifier. (required)
     *
     * @throws \Webcom\Amazon\Rest\InvoicesApi20240619\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesDocumentResponse20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619
     */
    public function getInvoicesDocument($invoicesDocumentId)
    {
        list($response) = $this->getInvoicesDocumentWithHttpInfo($invoicesDocumentId);
        return $response;
    }

    /**
     * Operation getInvoicesDocumentWithHttpInfo
     *
     * @param  string $invoicesDocumentId The export document identifier. (required)
     *
     * @throws \Webcom\Amazon\Rest\InvoicesApi20240619\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesDocumentResponse20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoicesDocumentWithHttpInfo($invoicesDocumentId)
    {
        $request = $this->getInvoicesDocumentRequest($invoicesDocumentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesDocumentResponse20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesDocumentResponse20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesDocumentResponse20240619';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesDocumentResponse20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoicesDocumentAsync
     *
     * 
     *
     * @param  string $invoicesDocumentId The export document identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesDocumentAsync($invoicesDocumentId)
    {
        return $this->getInvoicesDocumentAsyncWithHttpInfo($invoicesDocumentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoicesDocumentAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $invoicesDocumentId The export document identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesDocumentAsyncWithHttpInfo($invoicesDocumentId)
    {
        $returnType = '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesDocumentResponse20240619';
        $request = $this->getInvoicesDocumentRequest($invoicesDocumentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoicesDocument'
     *
     * @param  string $invoicesDocumentId The export document identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvoicesDocumentRequest($invoicesDocumentId)
    {
        // verify the required parameter 'invoicesDocumentId' is set
        if ($invoicesDocumentId === null || (is_array($invoicesDocumentId) && count($invoicesDocumentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoicesDocumentId when calling getInvoicesDocument'
            );
        }

        $resourcePath = '/tax/invoices/2024-06-19/documents/{invoicesDocumentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invoicesDocumentId !== null) {
            $resourcePath = str_replace(
                '{' . 'invoicesDocumentId' . '}',
                ObjectSerializer::toPathValue($invoicesDocumentId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoicesExport
     *
     * @param  string $exportId The unique identifier for the export. (required)
     *
     * @throws \Webcom\Amazon\Rest\InvoicesApi20240619\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesExportResponse20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619
     */
    public function getInvoicesExport($exportId)
    {
        list($response) = $this->getInvoicesExportWithHttpInfo($exportId);
        return $response;
    }

    /**
     * Operation getInvoicesExportWithHttpInfo
     *
     * @param  string $exportId The unique identifier for the export. (required)
     *
     * @throws \Webcom\Amazon\Rest\InvoicesApi20240619\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesExportResponse20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoicesExportWithHttpInfo($exportId)
    {
        $request = $this->getInvoicesExportRequest($exportId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesExportResponse20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesExportResponse20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesExportResponse20240619';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesExportResponse20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoicesExportAsync
     *
     * 
     *
     * @param  string $exportId The unique identifier for the export. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesExportAsync($exportId)
    {
        return $this->getInvoicesExportAsyncWithHttpInfo($exportId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoicesExportAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $exportId The unique identifier for the export. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesExportAsyncWithHttpInfo($exportId)
    {
        $returnType = '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesExportResponse20240619';
        $request = $this->getInvoicesExportRequest($exportId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoicesExport'
     *
     * @param  string $exportId The unique identifier for the export. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvoicesExportRequest($exportId)
    {
        // verify the required parameter 'exportId' is set
        if ($exportId === null || (is_array($exportId) && count($exportId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exportId when calling getInvoicesExport'
            );
        }

        $resourcePath = '/tax/invoices/2024-06-19/exports/{exportId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($exportId !== null) {
            $resourcePath = str_replace(
                '{' . 'exportId' . '}',
                ObjectSerializer::toPathValue($exportId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoicesExports
     *
     * @param  string $marketplaceId The returned exports match the specified marketplace. (required)
     * @param  \DateTime $dateStart The earliest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 30 days ago. (optional)
     * @param  string $nextToken The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  int $pageSize The maximum number of invoices to return in a single call.  Minimum: 1  Maximum: 100 (optional)
     * @param  \DateTime $dateEnd The latest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default value is the time of the request. (optional)
     * @param  string $status Return exports matching the status specified. (optional)
     *
     * @throws \Webcom\Amazon\Rest\InvoicesApi20240619\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesExportsResponse20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619
     */
    public function getInvoicesExports($marketplaceId, $dateStart = null, $nextToken = null, $pageSize = null, $dateEnd = null, $status = null)
    {
        list($response) = $this->getInvoicesExportsWithHttpInfo($marketplaceId, $dateStart, $nextToken, $pageSize, $dateEnd, $status);
        return $response;
    }

    /**
     * Operation getInvoicesExportsWithHttpInfo
     *
     * @param  string $marketplaceId The returned exports match the specified marketplace. (required)
     * @param  \DateTime $dateStart The earliest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 30 days ago. (optional)
     * @param  string $nextToken The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  int $pageSize The maximum number of invoices to return in a single call.  Minimum: 1  Maximum: 100 (optional)
     * @param  \DateTime $dateEnd The latest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default value is the time of the request. (optional)
     * @param  string $status Return exports matching the status specified. (optional)
     *
     * @throws \Webcom\Amazon\Rest\InvoicesApi20240619\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesExportsResponse20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619|\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoicesExportsWithHttpInfo($marketplaceId, $dateStart = null, $nextToken = null, $pageSize = null, $dateEnd = null, $status = null)
    {
        $request = $this->getInvoicesExportsRequest($marketplaceId, $dateStart, $nextToken, $pageSize, $dateEnd, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesExportsResponse20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesExportsResponse20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesExportsResponse20240619';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesExportsResponse20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\ErrorList20240619',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoicesExportsAsync
     *
     * 
     *
     * @param  string $marketplaceId The returned exports match the specified marketplace. (required)
     * @param  \DateTime $dateStart The earliest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 30 days ago. (optional)
     * @param  string $nextToken The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  int $pageSize The maximum number of invoices to return in a single call.  Minimum: 1  Maximum: 100 (optional)
     * @param  \DateTime $dateEnd The latest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default value is the time of the request. (optional)
     * @param  string $status Return exports matching the status specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesExportsAsync($marketplaceId, $dateStart = null, $nextToken = null, $pageSize = null, $dateEnd = null, $status = null)
    {
        return $this->getInvoicesExportsAsyncWithHttpInfo($marketplaceId, $dateStart, $nextToken, $pageSize, $dateEnd, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoicesExportsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $marketplaceId The returned exports match the specified marketplace. (required)
     * @param  \DateTime $dateStart The earliest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 30 days ago. (optional)
     * @param  string $nextToken The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  int $pageSize The maximum number of invoices to return in a single call.  Minimum: 1  Maximum: 100 (optional)
     * @param  \DateTime $dateEnd The latest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default value is the time of the request. (optional)
     * @param  string $status Return exports matching the status specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoicesExportsAsyncWithHttpInfo($marketplaceId, $dateStart = null, $nextToken = null, $pageSize = null, $dateEnd = null, $status = null)
    {
        $returnType = '\Webcom\Amazon\Rest\InvoicesApi20240619\Model\GetInvoicesExportsResponse20240619';
        $request = $this->getInvoicesExportsRequest($marketplaceId, $dateStart, $nextToken, $pageSize, $dateEnd, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoicesExports'
     *
     * @param  string $marketplaceId The returned exports match the specified marketplace. (required)
     * @param  \DateTime $dateStart The earliest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 30 days ago. (optional)
     * @param  string $nextToken The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  int $pageSize The maximum number of invoices to return in a single call.  Minimum: 1  Maximum: 100 (optional)
     * @param  \DateTime $dateEnd The latest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default value is the time of the request. (optional)
     * @param  string $status Return exports matching the status specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvoicesExportsRequest($marketplaceId, $dateStart = null, $nextToken = null, $pageSize = null, $dateEnd = null, $status = null)
    {
        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling getInvoicesExports'
            );
        }

        $resourcePath = '/tax/invoices/2024-06-19/exports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }
        // query params
        if (is_array($dateStart)) {
            $dateStart = ObjectSerializer::serializeCollection($dateStart, '', true);
        }
        if ($dateStart !== null) {
            $queryParams['dateStart'] = $dateStart;
        }
        // query params
        if (is_array($nextToken)) {
            $nextToken = ObjectSerializer::serializeCollection($nextToken, '', true);
        }
        if ($nextToken !== null) {
            $queryParams['nextToken'] = $nextToken;
        }
        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($dateEnd)) {
            $dateEnd = ObjectSerializer::serializeCollection($dateEnd, '', true);
        }
        if ($dateEnd !== null) {
            $queryParams['dateEnd'] = $dateEnd;
        }
        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        if ($status !== null) {
            $queryParams['status'] = $status;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
