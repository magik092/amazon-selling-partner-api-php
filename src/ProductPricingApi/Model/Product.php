<?php
/**
 * Product
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\ProductPricingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\ProductPricingApi\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @description An item.
 * @package  Webcom\Amazon\Rest\ProductPricingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Product implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'identifiers' => '\Webcom\Amazon\Rest\ProductPricingApi\Model\IdentifierType',
        'attributeSets' => 'object[]',
        'relationships' => 'object[]',
        'competitivePricing' => '\Webcom\Amazon\Rest\ProductPricingApi\Model\CompetitivePricingType',
        'salesRankings' => '\Webcom\Amazon\Rest\ProductPricingApi\Model\SalesRankType[]',
        'offers' => '\Webcom\Amazon\Rest\ProductPricingApi\Model\OfferType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'identifiers' => null,
        'attributeSets' => null,
        'relationships' => null,
        'competitivePricing' => null,
        'salesRankings' => null,
        'offers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'identifiers' => 'Identifiers',
        'attributeSets' => 'AttributeSets',
        'relationships' => 'Relationships',
        'competitivePricing' => 'CompetitivePricing',
        'salesRankings' => 'SalesRankings',
        'offers' => 'Offers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'identifiers' => 'setIdentifiers',
        'attributeSets' => 'setAttributeSets',
        'relationships' => 'setRelationships',
        'competitivePricing' => 'setCompetitivePricing',
        'salesRankings' => 'setSalesRankings',
        'offers' => 'setOffers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'identifiers' => 'getIdentifiers',
        'attributeSets' => 'getAttributeSets',
        'relationships' => 'getRelationships',
        'competitivePricing' => 'getCompetitivePricing',
        'salesRankings' => 'getSalesRankings',
        'offers' => 'getOffers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['identifiers'] = $data['identifiers'] ?? null;
        $this->container['attributeSets'] = $data['attributeSets'] ?? null;
        $this->container['relationships'] = $data['relationships'] ?? null;
        $this->container['competitivePricing'] = $data['competitivePricing'] ?? null;
        $this->container['salesRankings'] = $data['salesRankings'] ?? null;
        $this->container['offers'] = $data['offers'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['identifiers'] === null) {
            $invalidProperties[] = "'identifiers' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets identifiers
     *
     * @return \Webcom\Amazon\Rest\ProductPricingApi\Model\IdentifierType
     */
    public function getIdentifiers()
    {
        return $this->container['identifiers'];
    }

    /**
     * Sets identifiers
     *
     * @param \Webcom\Amazon\Rest\ProductPricingApi\Model\IdentifierType $identifiers identifiers
     *
     * @return self
     */
    public function setIdentifiers($identifiers)
    {
        $this->container['identifiers'] = $identifiers;

        return $this;
    }

    /**
     * Gets attributeSets
     *
     * @return object[]|null
     */
    public function getAttributeSets()
    {
        return $this->container['attributeSets'];
    }

    /**
     * Sets attributeSets
     *
     * @param object[]|null $attributeSets A list of product attributes if they are applicable to the product that is returned.
     *
     * @return self
     */
    public function setAttributeSets($attributeSets)
    {
        $this->container['attributeSets'] = $attributeSets;

        return $this;
    }

    /**
     * Gets relationships
     *
     * @return object[]|null
     */
    public function getRelationships()
    {
        return $this->container['relationships'];
    }

    /**
     * Sets relationships
     *
     * @param object[]|null $relationships A list that contains product variation information, if applicable.
     *
     * @return self
     */
    public function setRelationships($relationships)
    {
        $this->container['relationships'] = $relationships;

        return $this;
    }

    /**
     * Gets competitivePricing
     *
     * @return \Webcom\Amazon\Rest\ProductPricingApi\Model\CompetitivePricingType|null
     */
    public function getCompetitivePricing()
    {
        return $this->container['competitivePricing'];
    }

    /**
     * Sets competitivePricing
     *
     * @param \Webcom\Amazon\Rest\ProductPricingApi\Model\CompetitivePricingType|null $competitivePricing competitivePricing
     *
     * @return self
     */
    public function setCompetitivePricing($competitivePricing)
    {
        $this->container['competitivePricing'] = $competitivePricing;

        return $this;
    }

    /**
     * Gets salesRankings
     *
     * @return \Webcom\Amazon\Rest\ProductPricingApi\Model\SalesRankType[]|null
     */
    public function getSalesRankings()
    {
        return $this->container['salesRankings'];
    }

    /**
     * Sets salesRankings
     *
     * @param \Webcom\Amazon\Rest\ProductPricingApi\Model\SalesRankType[]|null $salesRankings A list of sales rank information for the item, by category.
     *
     * @return self
     */
    public function setSalesRankings($salesRankings)
    {
        $this->container['salesRankings'] = $salesRankings;

        return $this;
    }

    /**
     * Gets offers
     *
     * @return \Webcom\Amazon\Rest\ProductPricingApi\Model\OfferType[]|null
     */
    public function getOffers()
    {
        return $this->container['offers'];
    }

    /**
     * Sets offers
     *
     * @param \Webcom\Amazon\Rest\ProductPricingApi\Model\OfferType[]|null $offers A list of offers.
     *
     * @return self
     */
    public function setOffers($offers)
    {
        $this->container['offers'] = $offers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


