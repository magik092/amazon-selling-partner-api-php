<?php
/**
 * Breakdown20240619
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\FinancesApi20240619
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Finances
 *
 * The Selling Partner API for Finances provides financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * The version of the OpenAPI document: 2024-06-19
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\FinancesApi20240619\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * Breakdown20240619 Class Doc Comment
 *
 * @category Class
 * @description Details about the movement of money in the financial transaction. Breakdowns are further categorized into breakdown types, breakdown amounts, and further breakdowns.
 * @package  Webcom\Amazon\Rest\FinancesApi20240619
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Breakdown20240619 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'Breakdown';
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'breakdownType'   => 'string',
        'breakdownAmount' => '\Webcom\Amazon\Rest\FinancesApi20240619\Model\Currency20240619',
        'breakdowns'      => '\Webcom\Amazon\Rest\FinancesApi20240619\Model\Breakdown20240619',
    ];
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'breakdownType'   => null,
        'breakdownAmount' => null,
        'breakdowns'      => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'breakdownType'   => 'breakdownType',
        'breakdownAmount' => 'breakdownAmount',
        'breakdowns'      => 'breakdowns',
    ];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'breakdownType'   => 'setBreakdownType',
        'breakdownAmount' => 'setBreakdownAmount',
        'breakdowns'      => 'setBreakdowns',
    ];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'breakdownType'   => 'getBreakdownType',
        'breakdownAmount' => 'getBreakdownAmount',
        'breakdowns'      => 'getBreakdowns',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['breakdownType'] = $data['breakdownType'] ?? null;
        $this->container['breakdownAmount'] = $data['breakdownAmount'] ?? null;
        $this->container['breakdowns'] = $data['breakdowns'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets breakdownType
     *
     * @return string|null
     */
    public function getBreakdownType()
    {
        return $this->container['breakdownType'];
    }

    /**
     * Sets breakdownType
     *
     * @param string|null $breakdownType The type of charge.
     *
     * @return self
     */
    public function setBreakdownType($breakdownType)
    {
        $this->container['breakdownType'] = $breakdownType;

        return $this;
    }

    /**
     * Gets breakdownAmount
     *
     * @return \Webcom\Amazon\Rest\FinancesApi20240619\Model\Currency20240619|null
     */
    public function getBreakdownAmount()
    {
        return $this->container['breakdownAmount'];
    }

    /**
     * Sets breakdownAmount
     *
     * @param \Webcom\Amazon\Rest\FinancesApi20240619\Model\Currency20240619|null $breakdownAmount breakdownAmount
     *
     * @return self
     */
    public function setBreakdownAmount($breakdownAmount)
    {
        $this->container['breakdownAmount'] = $breakdownAmount;

        return $this;
    }

    /**
     * Gets breakdowns
     *
     * @return \Webcom\Amazon\Rest\FinancesApi20240619\Model\Breakdown20240619|null
     */
    public function getBreakdowns()
    {
        return $this->container['breakdowns'];
    }

    /**
     * Sets breakdowns
     *
     * @param \Webcom\Amazon\Rest\FinancesApi20240619\Model\Breakdown20240619|null $breakdowns breakdowns
     *
     * @return self
     */
    public function setBreakdowns($breakdowns)
    {
        $this->container['breakdowns'] = $breakdowns;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


