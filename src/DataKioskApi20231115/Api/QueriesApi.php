<?php
/**
 * QueriesApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\DataKioskApi20231115
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Data Kiosk
 *
 * The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.
 *
 * The version of the OpenAPI document: 2023-11-15
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\DataKioskApi20231115\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Webcom\Amazon\Rest\DataKioskApi20231115\ApiException;
use Webcom\Amazon\Rest\Configuration;
use Webcom\Amazon\Rest\HeaderSelector;
use Webcom\Amazon\Rest\ObjectSerializer;

/**
 * QueriesApi Class Doc Comment
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\DataKioskApi20231115
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class QueriesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;
    /**
     * @var Configuration
     */
    protected $config;
    /**
     * @var HeaderSelector
     */
    protected $headerSelector;
    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelQuery
     *
     * @param string $queryId The identifier for the query. This identifier is unique only in combination with a selling partner account ID. (required)
     *
     * @return void
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\DataKioskApi20231115\ApiException on non-2xx response
     */
    public function cancelQuery($queryId)
    {
        $this->cancelQueryWithHttpInfo($queryId);
    }

    /**
     * Operation cancelQueryWithHttpInfo
     *
     * @param string $queryId The identifier for the query. This identifier is unique only in combination with a selling partner account ID. (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\DataKioskApi20231115\ApiException on non-2xx response
     */
    public function cancelQueryWithHttpInfo($queryId)
    {
        $request = $this->cancelQueryRequest($queryId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelQueryAsync
     *
     *
     *
     * @param string $queryId The identifier for the query. This identifier is unique only in combination with a selling partner account ID. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function cancelQueryAsync($queryId)
    {
        return $this->cancelQueryAsyncWithHttpInfo($queryId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelQueryAsyncWithHttpInfo
     *
     *
     *
     * @param string $queryId The identifier for the query. This identifier is unique only in combination with a selling partner account ID. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function cancelQueryAsyncWithHttpInfo($queryId)
    {
        $returnType = '';
        $request = $this->cancelQueryRequest($queryId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelQuery'
     *
     * @param string $queryId The identifier for the query. This identifier is unique only in combination with a selling partner account ID. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function cancelQueryRequest($queryId)
    {
        // verify the required parameter 'queryId' is set
        if ($queryId === null || (is_array($queryId) && count($queryId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $queryId when calling cancelQuery'
            );
        }

        $resourcePath = '/dataKiosk/2023-11-15/queries/{queryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($queryId !== null) {
            $resourcePath = str_replace(
                '{' . 'queryId' . '}',
                ObjectSerializer::toPathValue($queryId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createQuery
     *
     * @param \Webcom\Amazon\Rest\DataKioskApi20231115\Model\CreateQuerySpecification20231115 $body The body of the request. (required)
     *
     * @return \Webcom\Amazon\Rest\DataKioskApi20231115\Model\CreateQueryResponse20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\DataKioskApi20231115\ApiException on non-2xx response
     */
    public function createQuery($body)
    {
        [$response] = $this->createQueryWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createQueryWithHttpInfo
     *
     * @param \Webcom\Amazon\Rest\DataKioskApi20231115\Model\CreateQuerySpecification20231115 $body The body of the request. (required)
     *
     * @return array of \Webcom\Amazon\Rest\DataKioskApi20231115\Model\CreateQueryResponse20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\DataKioskApi20231115\ApiException on non-2xx response
     */
    public function createQueryWithHttpInfo($body)
    {
        $request = $this->createQueryRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\CreateQueryResponse20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\CreateQueryResponse20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\CreateQueryResponse20231115';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\CreateQueryResponse20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createQueryAsync
     *
     *
     *
     * @param \Webcom\Amazon\Rest\DataKioskApi20231115\Model\CreateQuerySpecification20231115 $body The body of the request. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function createQueryAsync($body)
    {
        return $this->createQueryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createQueryAsyncWithHttpInfo
     *
     *
     *
     * @param \Webcom\Amazon\Rest\DataKioskApi20231115\Model\CreateQuerySpecification20231115 $body The body of the request. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function createQueryAsyncWithHttpInfo($body)
    {
        $returnType = '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\CreateQueryResponse20231115';
        $request = $this->createQueryRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createQuery'
     *
     * @param \Webcom\Amazon\Rest\DataKioskApi20231115\Model\CreateQuerySpecification20231115 $body The body of the request. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function createQueryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createQuery'
            );
        }

        $resourcePath = '/dataKiosk/2023-11-15/queries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocument
     *
     * @param string $documentId The identifier for the Data Kiosk document. (required)
     *
     * @return \Webcom\Amazon\Rest\DataKioskApi20231115\Model\GetDocumentResponse20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\DataKioskApi20231115\ApiException on non-2xx response
     */
    public function getDocument($documentId)
    {
        [$response] = $this->getDocumentWithHttpInfo($documentId);
        return $response;
    }

    /**
     * Operation getDocumentWithHttpInfo
     *
     * @param string $documentId The identifier for the Data Kiosk document. (required)
     *
     * @return array of \Webcom\Amazon\Rest\DataKioskApi20231115\Model\GetDocumentResponse20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\DataKioskApi20231115\ApiException on non-2xx response
     */
    public function getDocumentWithHttpInfo($documentId)
    {
        $request = $this->getDocumentRequest($documentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\GetDocumentResponse20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\GetDocumentResponse20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\GetDocumentResponse20231115';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\GetDocumentResponse20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentAsync
     *
     *
     *
     * @param string $documentId The identifier for the Data Kiosk document. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getDocumentAsync($documentId)
    {
        return $this->getDocumentAsyncWithHttpInfo($documentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocumentAsyncWithHttpInfo
     *
     *
     *
     * @param string $documentId The identifier for the Data Kiosk document. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getDocumentAsyncWithHttpInfo($documentId)
    {
        $returnType = '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\GetDocumentResponse20231115';
        $request = $this->getDocumentRequest($documentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocument'
     *
     * @param string $documentId The identifier for the Data Kiosk document. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function getDocumentRequest($documentId)
    {
        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling getDocument'
            );
        }

        $resourcePath = '/dataKiosk/2023-11-15/documents/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($documentId !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($documentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQueries
     *
     * @param string[] $processingStatuses A list of processing statuses used to filter queries. (optional)
     * @param int $pageSize The maximum number of queries to return in a single call. (optional, default to 10)
     * @param \DateTime $createdSince The earliest query creation date and time for queries to include in the response, in ISO 8601 date time format. The default is 90 days ago. (optional)
     * @param \DateTime $createdUntil The latest query creation date and time for queries to include in the response, in ISO 8601 date time format. The default is the time of the &#x60;getQueries&#x60; request. (optional)
     * @param string $paginationToken A token to fetch a certain page of results when there are multiple pages of results available. The value of this token is fetched from the &#x60;pagination.nextToken&#x60; field returned in the &#x60;GetQueriesResponse&#x60; object. All other parameters must be provided with the same values that were provided with the request that generated this token, with the exception of &#x60;pageSize&#x60; which can be modified between calls to &#x60;getQueries&#x60;. In the absence of this token value, &#x60;getQueries&#x60; returns the first page of results. (optional)
     *
     * @return \Webcom\Amazon\Rest\DataKioskApi20231115\Model\GetQueriesResponse20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\DataKioskApi20231115\ApiException on non-2xx response
     */
    public function getQueries($processingStatuses = null, $pageSize = 10, $createdSince = null, $createdUntil = null, $paginationToken = null)
    {
        [$response] = $this->getQueriesWithHttpInfo($processingStatuses, $pageSize, $createdSince, $createdUntil, $paginationToken);
        return $response;
    }

    /**
     * Operation getQueriesWithHttpInfo
     *
     * @param string[] $processingStatuses A list of processing statuses used to filter queries. (optional)
     * @param int $pageSize The maximum number of queries to return in a single call. (optional, default to 10)
     * @param \DateTime $createdSince The earliest query creation date and time for queries to include in the response, in ISO 8601 date time format. The default is 90 days ago. (optional)
     * @param \DateTime $createdUntil The latest query creation date and time for queries to include in the response, in ISO 8601 date time format. The default is the time of the &#x60;getQueries&#x60; request. (optional)
     * @param string $paginationToken A token to fetch a certain page of results when there are multiple pages of results available. The value of this token is fetched from the &#x60;pagination.nextToken&#x60; field returned in the &#x60;GetQueriesResponse&#x60; object. All other parameters must be provided with the same values that were provided with the request that generated this token, with the exception of &#x60;pageSize&#x60; which can be modified between calls to &#x60;getQueries&#x60;. In the absence of this token value, &#x60;getQueries&#x60; returns the first page of results. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\DataKioskApi20231115\Model\GetQueriesResponse20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\DataKioskApi20231115\ApiException on non-2xx response
     */
    public function getQueriesWithHttpInfo($processingStatuses = null, $pageSize = 10, $createdSince = null, $createdUntil = null, $paginationToken = null)
    {
        $request = $this->getQueriesRequest($processingStatuses, $pageSize, $createdSince, $createdUntil, $paginationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\GetQueriesResponse20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\GetQueriesResponse20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\GetQueriesResponse20231115';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\GetQueriesResponse20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQueriesAsync
     *
     *
     *
     * @param string[] $processingStatuses A list of processing statuses used to filter queries. (optional)
     * @param int $pageSize The maximum number of queries to return in a single call. (optional, default to 10)
     * @param \DateTime $createdSince The earliest query creation date and time for queries to include in the response, in ISO 8601 date time format. The default is 90 days ago. (optional)
     * @param \DateTime $createdUntil The latest query creation date and time for queries to include in the response, in ISO 8601 date time format. The default is the time of the &#x60;getQueries&#x60; request. (optional)
     * @param string $paginationToken A token to fetch a certain page of results when there are multiple pages of results available. The value of this token is fetched from the &#x60;pagination.nextToken&#x60; field returned in the &#x60;GetQueriesResponse&#x60; object. All other parameters must be provided with the same values that were provided with the request that generated this token, with the exception of &#x60;pageSize&#x60; which can be modified between calls to &#x60;getQueries&#x60;. In the absence of this token value, &#x60;getQueries&#x60; returns the first page of results. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getQueriesAsync($processingStatuses = null, $pageSize = 10, $createdSince = null, $createdUntil = null, $paginationToken = null)
    {
        return $this->getQueriesAsyncWithHttpInfo($processingStatuses, $pageSize, $createdSince, $createdUntil, $paginationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQueriesAsyncWithHttpInfo
     *
     *
     *
     * @param string[] $processingStatuses A list of processing statuses used to filter queries. (optional)
     * @param int $pageSize The maximum number of queries to return in a single call. (optional, default to 10)
     * @param \DateTime $createdSince The earliest query creation date and time for queries to include in the response, in ISO 8601 date time format. The default is 90 days ago. (optional)
     * @param \DateTime $createdUntil The latest query creation date and time for queries to include in the response, in ISO 8601 date time format. The default is the time of the &#x60;getQueries&#x60; request. (optional)
     * @param string $paginationToken A token to fetch a certain page of results when there are multiple pages of results available. The value of this token is fetched from the &#x60;pagination.nextToken&#x60; field returned in the &#x60;GetQueriesResponse&#x60; object. All other parameters must be provided with the same values that were provided with the request that generated this token, with the exception of &#x60;pageSize&#x60; which can be modified between calls to &#x60;getQueries&#x60;. In the absence of this token value, &#x60;getQueries&#x60; returns the first page of results. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getQueriesAsyncWithHttpInfo($processingStatuses = null, $pageSize = 10, $createdSince = null, $createdUntil = null, $paginationToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\GetQueriesResponse20231115';
        $request = $this->getQueriesRequest($processingStatuses, $pageSize, $createdSince, $createdUntil, $paginationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQueries'
     *
     * @param string[] $processingStatuses A list of processing statuses used to filter queries. (optional)
     * @param int $pageSize The maximum number of queries to return in a single call. (optional, default to 10)
     * @param \DateTime $createdSince The earliest query creation date and time for queries to include in the response, in ISO 8601 date time format. The default is 90 days ago. (optional)
     * @param \DateTime $createdUntil The latest query creation date and time for queries to include in the response, in ISO 8601 date time format. The default is the time of the &#x60;getQueries&#x60; request. (optional)
     * @param string $paginationToken A token to fetch a certain page of results when there are multiple pages of results available. The value of this token is fetched from the &#x60;pagination.nextToken&#x60; field returned in the &#x60;GetQueriesResponse&#x60; object. All other parameters must be provided with the same values that were provided with the request that generated this token, with the exception of &#x60;pageSize&#x60; which can be modified between calls to &#x60;getQueries&#x60;. In the absence of this token value, &#x60;getQueries&#x60; returns the first page of results. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function getQueriesRequest($processingStatuses = null, $pageSize = 10, $createdSince = null, $createdUntil = null, $paginationToken = null)
    {
        if ($processingStatuses !== null && count($processingStatuses) < 1) {
            throw new \InvalidArgumentException('invalid value for "$processingStatuses" when calling QueriesApi.getQueries, number of items must be greater than or equal to 1.');
        }

        if ($pageSize !== null && $pageSize > 100) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling QueriesApi.getQueries, must be smaller than or equal to 100.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling QueriesApi.getQueries, must be bigger than or equal to 1.');
        }

        $resourcePath = '/dataKiosk/2023-11-15/queries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($processingStatuses)) {
            $processingStatuses = ObjectSerializer::serializeCollection($processingStatuses, 'form', true);
        }
        if ($processingStatuses !== null) {
            $queryParams['processingStatuses'] = $processingStatuses;
        }
        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($createdSince)) {
            $createdSince = ObjectSerializer::serializeCollection($createdSince, '', true);
        }
        if ($createdSince !== null) {
            $queryParams['createdSince'] = $createdSince;
        }
        // query params
        if (is_array($createdUntil)) {
            $createdUntil = ObjectSerializer::serializeCollection($createdUntil, '', true);
        }
        if ($createdUntil !== null) {
            $queryParams['createdUntil'] = $createdUntil;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuery
     *
     * @param string $queryId The query identifier. (required)
     *
     * @return \Webcom\Amazon\Rest\DataKioskApi20231115\Model\Query20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\DataKioskApi20231115\ApiException on non-2xx response
     */
    public function getQuery($queryId)
    {
        [$response] = $this->getQueryWithHttpInfo($queryId);
        return $response;
    }

    /**
     * Operation getQueryWithHttpInfo
     *
     * @param string $queryId The query identifier. (required)
     *
     * @return array of \Webcom\Amazon\Rest\DataKioskApi20231115\Model\Query20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115|\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\DataKioskApi20231115\ApiException on non-2xx response
     */
    public function getQueryWithHttpInfo($queryId)
    {
        $request = $this->getQueryRequest($queryId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\Query20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\Query20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\Query20231115';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\Query20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\ErrorList20231115',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQueryAsync
     *
     *
     *
     * @param string $queryId The query identifier. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getQueryAsync($queryId)
    {
        return $this->getQueryAsyncWithHttpInfo($queryId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQueryAsyncWithHttpInfo
     *
     *
     *
     * @param string $queryId The query identifier. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getQueryAsyncWithHttpInfo($queryId)
    {
        $returnType = '\Webcom\Amazon\Rest\DataKioskApi20231115\Model\Query20231115';
        $request = $this->getQueryRequest($queryId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQuery'
     *
     * @param string $queryId The query identifier. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function getQueryRequest($queryId)
    {
        // verify the required parameter 'queryId' is set
        if ($queryId === null || (is_array($queryId) && count($queryId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $queryId when calling getQuery'
            );
        }

        $resourcePath = '/dataKiosk/2023-11-15/queries/{queryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($queryId !== null) {
            $resourcePath = str_replace(
                '{' . 'queryId' . '}',
                ObjectSerializer::toPathValue($queryId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
