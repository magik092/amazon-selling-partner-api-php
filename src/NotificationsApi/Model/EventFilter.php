<?php
/**
 * EventFilter
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\NotificationsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\NotificationsApi\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * EventFilter Class Doc Comment
 *
 * @category Class
 * @description A &#x60;notificationType&#x60; specific filter. This object contains all of the currently available filters and properties that you can use to define a &#x60;notificationType&#x60; specific filter.
 * @package  Webcom\Amazon\Rest\NotificationsApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class EventFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EventFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aggregationSettings' => '\Webcom\Amazon\Rest\NotificationsApi\Model\AggregationSettings',
        'marketplaceIds' => 'string[]',
        'orderChangeTypes' => '\Webcom\Amazon\Rest\NotificationsApi\Model\OrderChangeTypeEnum[]',
        'eventFilterType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'aggregationSettings' => null,
        'marketplaceIds' => null,
        'orderChangeTypes' => null,
        'eventFilterType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aggregationSettings' => 'aggregationSettings',
        'marketplaceIds' => 'marketplaceIds',
        'orderChangeTypes' => 'orderChangeTypes',
        'eventFilterType' => 'eventFilterType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aggregationSettings' => 'setAggregationSettings',
        'marketplaceIds' => 'setMarketplaceIds',
        'orderChangeTypes' => 'setOrderChangeTypes',
        'eventFilterType' => 'setEventFilterType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aggregationSettings' => 'getAggregationSettings',
        'marketplaceIds' => 'getMarketplaceIds',
        'orderChangeTypes' => 'getOrderChangeTypes',
        'eventFilterType' => 'getEventFilterType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const EVENT_FILTER_TYPE_ANY_OFFER_CHANGED = 'ANY_OFFER_CHANGED';
    const EVENT_FILTER_TYPE_ORDER_CHANGE = 'ORDER_CHANGE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventFilterTypeAllowableValues()
    {
        return [
            self::EVENT_FILTER_TYPE_ANY_OFFER_CHANGED,
            self::EVENT_FILTER_TYPE_ORDER_CHANGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aggregationSettings'] = $data['aggregationSettings'] ?? null;
        $this->container['marketplaceIds'] = $data['marketplaceIds'] ?? null;
        $this->container['orderChangeTypes'] = $data['orderChangeTypes'] ?? null;
        $this->container['eventFilterType'] = $data['eventFilterType'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['eventFilterType'] === null) {
            $invalidProperties[] = "'eventFilterType' can't be null";
        }
        $allowedValues = $this->getEventFilterTypeAllowableValues();
        if (!is_null($this->container['eventFilterType']) && !in_array($this->container['eventFilterType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eventFilterType', must be one of '%s'",
                $this->container['eventFilterType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aggregationSettings
     *
     * @return \Webcom\Amazon\Rest\NotificationsApi\Model\AggregationSettings|null
     */
    public function getAggregationSettings()
    {
        return $this->container['aggregationSettings'];
    }

    /**
     * Sets aggregationSettings
     *
     * @param \Webcom\Amazon\Rest\NotificationsApi\Model\AggregationSettings|null $aggregationSettings aggregationSettings
     *
     * @return self
     */
    public function setAggregationSettings($aggregationSettings)
    {
        $this->container['aggregationSettings'] = $aggregationSettings;

        return $this;
    }

    /**
     * Gets marketplaceIds
     *
     * @return string[]|null
     */
    public function getMarketplaceIds()
    {
        return $this->container['marketplaceIds'];
    }

    /**
     * Sets marketplaceIds
     *
     * @param string[]|null $marketplaceIds A list of marketplace identifiers to subscribe to (for example: ATVPDKIKX0DER). To receive notifications in every marketplace, do not provide this list.
     *
     * @return self
     */
    public function setMarketplaceIds($marketplaceIds)
    {
        $this->container['marketplaceIds'] = $marketplaceIds;

        return $this;
    }

    /**
     * Gets orderChangeTypes
     *
     * @return \Webcom\Amazon\Rest\NotificationsApi\Model\OrderChangeTypeEnum[]|null
     */
    public function getOrderChangeTypes()
    {
        return $this->container['orderChangeTypes'];
    }

    /**
     * Sets orderChangeTypes
     *
     * @param \Webcom\Amazon\Rest\NotificationsApi\Model\OrderChangeTypeEnum[]|null $orderChangeTypes A list of order change types to subscribe to (for example: `BuyerRequestedChange`). To receive notifications of all change types, do not provide this list.
     *
     * @return self
     */
    public function setOrderChangeTypes($orderChangeTypes)
    {
        $this->container['orderChangeTypes'] = $orderChangeTypes;

        return $this;
    }

    /**
     * Gets eventFilterType
     *
     * @return string
     */
    public function getEventFilterType()
    {
        return $this->container['eventFilterType'];
    }

    /**
     * Sets eventFilterType
     *
     * @param string $eventFilterType An `eventFilterType` value that is supported by the specific `notificationType`. This is used by the subscription service to determine the type of event filter. Refer to [Notification Type Values](https://developer-docs.amazon.com/sp-api/docs/notification-type-values) to determine if an `eventFilterType` is supported.
     *
     * @return self
     */
    public function setEventFilterType($eventFilterType)
    {
        $allowedValues = $this->getEventFilterTypeAllowableValues();
        if (!in_array($eventFilterType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eventFilterType', must be one of '%s'",
                    $eventFilterType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eventFilterType'] = $eventFilterType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


