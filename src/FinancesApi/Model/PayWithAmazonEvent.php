<?php
/**
 * PayWithAmazonEvent
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\FinancesApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\FinancesApi\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * PayWithAmazonEvent Class Doc Comment
 *
 * @category Class
 * @description An event related to the seller&#39;s Pay with Amazon account.
 * @package  Webcom\Amazon\Rest\FinancesApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PayWithAmazonEvent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayWithAmazonEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sellerOrderId' => 'string',
        'transactionPostedDate' => '\DateTime',
        'businessObjectType' => 'string',
        'salesChannel' => 'string',
        'charge' => '\Webcom\Amazon\Rest\FinancesApi\Model\ChargeComponent',
        'feeList' => '\Webcom\Amazon\Rest\FinancesApi\Model\FeeComponent[]',
        'paymentAmountType' => 'string',
        'amountDescription' => 'string',
        'fulfillmentChannel' => 'string',
        'storeName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sellerOrderId' => null,
        'transactionPostedDate' => 'date-time',
        'businessObjectType' => null,
        'salesChannel' => null,
        'charge' => null,
        'feeList' => null,
        'paymentAmountType' => null,
        'amountDescription' => null,
        'fulfillmentChannel' => null,
        'storeName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sellerOrderId' => 'SellerOrderId',
        'transactionPostedDate' => 'TransactionPostedDate',
        'businessObjectType' => 'BusinessObjectType',
        'salesChannel' => 'SalesChannel',
        'charge' => 'Charge',
        'feeList' => 'FeeList',
        'paymentAmountType' => 'PaymentAmountType',
        'amountDescription' => 'AmountDescription',
        'fulfillmentChannel' => 'FulfillmentChannel',
        'storeName' => 'StoreName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sellerOrderId' => 'setSellerOrderId',
        'transactionPostedDate' => 'setTransactionPostedDate',
        'businessObjectType' => 'setBusinessObjectType',
        'salesChannel' => 'setSalesChannel',
        'charge' => 'setCharge',
        'feeList' => 'setFeeList',
        'paymentAmountType' => 'setPaymentAmountType',
        'amountDescription' => 'setAmountDescription',
        'fulfillmentChannel' => 'setFulfillmentChannel',
        'storeName' => 'setStoreName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sellerOrderId' => 'getSellerOrderId',
        'transactionPostedDate' => 'getTransactionPostedDate',
        'businessObjectType' => 'getBusinessObjectType',
        'salesChannel' => 'getSalesChannel',
        'charge' => 'getCharge',
        'feeList' => 'getFeeList',
        'paymentAmountType' => 'getPaymentAmountType',
        'amountDescription' => 'getAmountDescription',
        'fulfillmentChannel' => 'getFulfillmentChannel',
        'storeName' => 'getStoreName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sellerOrderId'] = $data['sellerOrderId'] ?? null;
        $this->container['transactionPostedDate'] = $data['transactionPostedDate'] ?? null;
        $this->container['businessObjectType'] = $data['businessObjectType'] ?? null;
        $this->container['salesChannel'] = $data['salesChannel'] ?? null;
        $this->container['charge'] = $data['charge'] ?? null;
        $this->container['feeList'] = $data['feeList'] ?? null;
        $this->container['paymentAmountType'] = $data['paymentAmountType'] ?? null;
        $this->container['amountDescription'] = $data['amountDescription'] ?? null;
        $this->container['fulfillmentChannel'] = $data['fulfillmentChannel'] ?? null;
        $this->container['storeName'] = $data['storeName'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sellerOrderId
     *
     * @return string|null
     */
    public function getSellerOrderId()
    {
        return $this->container['sellerOrderId'];
    }

    /**
     * Sets sellerOrderId
     *
     * @param string|null $sellerOrderId An order identifier that is specified by the seller.
     *
     * @return self
     */
    public function setSellerOrderId($sellerOrderId)
    {
        $this->container['sellerOrderId'] = $sellerOrderId;

        return $this;
    }

    /**
     * Gets transactionPostedDate
     *
     * @return \DateTime|null
     */
    public function getTransactionPostedDate()
    {
        return $this->container['transactionPostedDate'];
    }

    /**
     * Sets transactionPostedDate
     *
     * @param \DateTime|null $transactionPostedDate transactionPostedDate
     *
     * @return self
     */
    public function setTransactionPostedDate($transactionPostedDate)
    {
        $this->container['transactionPostedDate'] = $transactionPostedDate;

        return $this;
    }

    /**
     * Gets businessObjectType
     *
     * @return string|null
     */
    public function getBusinessObjectType()
    {
        return $this->container['businessObjectType'];
    }

    /**
     * Sets businessObjectType
     *
     * @param string|null $businessObjectType The type of business object.
     *
     * @return self
     */
    public function setBusinessObjectType($businessObjectType)
    {
        $this->container['businessObjectType'] = $businessObjectType;

        return $this;
    }

    /**
     * Gets salesChannel
     *
     * @return string|null
     */
    public function getSalesChannel()
    {
        return $this->container['salesChannel'];
    }

    /**
     * Sets salesChannel
     *
     * @param string|null $salesChannel The sales channel for the transaction.
     *
     * @return self
     */
    public function setSalesChannel($salesChannel)
    {
        $this->container['salesChannel'] = $salesChannel;

        return $this;
    }

    /**
     * Gets charge
     *
     * @return \Webcom\Amazon\Rest\FinancesApi\Model\ChargeComponent|null
     */
    public function getCharge()
    {
        return $this->container['charge'];
    }

    /**
     * Sets charge
     *
     * @param \Webcom\Amazon\Rest\FinancesApi\Model\ChargeComponent|null $charge charge
     *
     * @return self
     */
    public function setCharge($charge)
    {
        $this->container['charge'] = $charge;

        return $this;
    }

    /**
     * Gets feeList
     *
     * @return \Webcom\Amazon\Rest\FinancesApi\Model\FeeComponent[]|null
     */
    public function getFeeList()
    {
        return $this->container['feeList'];
    }

    /**
     * Sets feeList
     *
     * @param \Webcom\Amazon\Rest\FinancesApi\Model\FeeComponent[]|null $feeList A list of fee component information.
     *
     * @return self
     */
    public function setFeeList($feeList)
    {
        $this->container['feeList'] = $feeList;

        return $this;
    }

    /**
     * Gets paymentAmountType
     *
     * @return string|null
     */
    public function getPaymentAmountType()
    {
        return $this->container['paymentAmountType'];
    }

    /**
     * Sets paymentAmountType
     *
     * @param string|null $paymentAmountType The type of payment.  Possible values:  * Sales
     *
     * @return self
     */
    public function setPaymentAmountType($paymentAmountType)
    {
        $this->container['paymentAmountType'] = $paymentAmountType;

        return $this;
    }

    /**
     * Gets amountDescription
     *
     * @return string|null
     */
    public function getAmountDescription()
    {
        return $this->container['amountDescription'];
    }

    /**
     * Sets amountDescription
     *
     * @param string|null $amountDescription A short description of this payment event.
     *
     * @return self
     */
    public function setAmountDescription($amountDescription)
    {
        $this->container['amountDescription'] = $amountDescription;

        return $this;
    }

    /**
     * Gets fulfillmentChannel
     *
     * @return string|null
     */
    public function getFulfillmentChannel()
    {
        return $this->container['fulfillmentChannel'];
    }

    /**
     * Sets fulfillmentChannel
     *
     * @param string|null $fulfillmentChannel The fulfillment channel.  Possible values:  * AFN - Amazon Fulfillment Network (Fulfillment by Amazon)  * MFN - Merchant Fulfillment Network (self-fulfilled)
     *
     * @return self
     */
    public function setFulfillmentChannel($fulfillmentChannel)
    {
        $this->container['fulfillmentChannel'] = $fulfillmentChannel;

        return $this;
    }

    /**
     * Gets storeName
     *
     * @return string|null
     */
    public function getStoreName()
    {
        return $this->container['storeName'];
    }

    /**
     * Sets storeName
     *
     * @param string|null $storeName The store name where the event occurred.
     *
     * @return self
     */
    public function setStoreName($storeName)
    {
        $this->container['storeName'] = $storeName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


