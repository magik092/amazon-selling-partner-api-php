<?php
/**
 * SolutionProviderCreditEvent
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\FinancesApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\FinancesApi\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * SolutionProviderCreditEvent Class Doc Comment
 *
 * @category Class
 * @description A credit given to a solution provider.
 * @package  Webcom\Amazon\Rest\FinancesApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SolutionProviderCreditEvent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SolutionProviderCreditEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'providerTransactionType' => 'string',
        'sellerOrderId' => 'string',
        'marketplaceId' => 'string',
        'marketplaceCountryCode' => 'string',
        'sellerId' => 'string',
        'sellerStoreName' => 'string',
        'providerId' => 'string',
        'providerStoreName' => 'string',
        'transactionAmount' => '\Webcom\Amazon\Rest\FinancesApi\Model\Currency',
        'transactionCreationDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'providerTransactionType' => null,
        'sellerOrderId' => null,
        'marketplaceId' => null,
        'marketplaceCountryCode' => null,
        'sellerId' => null,
        'sellerStoreName' => null,
        'providerId' => null,
        'providerStoreName' => null,
        'transactionAmount' => null,
        'transactionCreationDate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'providerTransactionType' => 'ProviderTransactionType',
        'sellerOrderId' => 'SellerOrderId',
        'marketplaceId' => 'MarketplaceId',
        'marketplaceCountryCode' => 'MarketplaceCountryCode',
        'sellerId' => 'SellerId',
        'sellerStoreName' => 'SellerStoreName',
        'providerId' => 'ProviderId',
        'providerStoreName' => 'ProviderStoreName',
        'transactionAmount' => 'TransactionAmount',
        'transactionCreationDate' => 'TransactionCreationDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'providerTransactionType' => 'setProviderTransactionType',
        'sellerOrderId' => 'setSellerOrderId',
        'marketplaceId' => 'setMarketplaceId',
        'marketplaceCountryCode' => 'setMarketplaceCountryCode',
        'sellerId' => 'setSellerId',
        'sellerStoreName' => 'setSellerStoreName',
        'providerId' => 'setProviderId',
        'providerStoreName' => 'setProviderStoreName',
        'transactionAmount' => 'setTransactionAmount',
        'transactionCreationDate' => 'setTransactionCreationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'providerTransactionType' => 'getProviderTransactionType',
        'sellerOrderId' => 'getSellerOrderId',
        'marketplaceId' => 'getMarketplaceId',
        'marketplaceCountryCode' => 'getMarketplaceCountryCode',
        'sellerId' => 'getSellerId',
        'sellerStoreName' => 'getSellerStoreName',
        'providerId' => 'getProviderId',
        'providerStoreName' => 'getProviderStoreName',
        'transactionAmount' => 'getTransactionAmount',
        'transactionCreationDate' => 'getTransactionCreationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['providerTransactionType'] = $data['providerTransactionType'] ?? null;
        $this->container['sellerOrderId'] = $data['sellerOrderId'] ?? null;
        $this->container['marketplaceId'] = $data['marketplaceId'] ?? null;
        $this->container['marketplaceCountryCode'] = $data['marketplaceCountryCode'] ?? null;
        $this->container['sellerId'] = $data['sellerId'] ?? null;
        $this->container['sellerStoreName'] = $data['sellerStoreName'] ?? null;
        $this->container['providerId'] = $data['providerId'] ?? null;
        $this->container['providerStoreName'] = $data['providerStoreName'] ?? null;
        $this->container['transactionAmount'] = $data['transactionAmount'] ?? null;
        $this->container['transactionCreationDate'] = $data['transactionCreationDate'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets providerTransactionType
     *
     * @return string|null
     */
    public function getProviderTransactionType()
    {
        return $this->container['providerTransactionType'];
    }

    /**
     * Sets providerTransactionType
     *
     * @param string|null $providerTransactionType The transaction type.
     *
     * @return self
     */
    public function setProviderTransactionType($providerTransactionType)
    {
        $this->container['providerTransactionType'] = $providerTransactionType;

        return $this;
    }

    /**
     * Gets sellerOrderId
     *
     * @return string|null
     */
    public function getSellerOrderId()
    {
        return $this->container['sellerOrderId'];
    }

    /**
     * Sets sellerOrderId
     *
     * @param string|null $sellerOrderId A seller-defined identifier for an order.
     *
     * @return self
     */
    public function setSellerOrderId($sellerOrderId)
    {
        $this->container['sellerOrderId'] = $sellerOrderId;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return string|null
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string|null $marketplaceId The identifier of the marketplace where the order was placed.
     *
     * @return self
     */
    public function setMarketplaceId($marketplaceId)
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets marketplaceCountryCode
     *
     * @return string|null
     */
    public function getMarketplaceCountryCode()
    {
        return $this->container['marketplaceCountryCode'];
    }

    /**
     * Sets marketplaceCountryCode
     *
     * @param string|null $marketplaceCountryCode The two-letter country code of the country associated with the marketplace where the order was placed.
     *
     * @return self
     */
    public function setMarketplaceCountryCode($marketplaceCountryCode)
    {
        $this->container['marketplaceCountryCode'] = $marketplaceCountryCode;

        return $this;
    }

    /**
     * Gets sellerId
     *
     * @return string|null
     */
    public function getSellerId()
    {
        return $this->container['sellerId'];
    }

    /**
     * Sets sellerId
     *
     * @param string|null $sellerId The Amazon-defined identifier of the seller.
     *
     * @return self
     */
    public function setSellerId($sellerId)
    {
        $this->container['sellerId'] = $sellerId;

        return $this;
    }

    /**
     * Gets sellerStoreName
     *
     * @return string|null
     */
    public function getSellerStoreName()
    {
        return $this->container['sellerStoreName'];
    }

    /**
     * Sets sellerStoreName
     *
     * @param string|null $sellerStoreName The store name where the payment event occurred.
     *
     * @return self
     */
    public function setSellerStoreName($sellerStoreName)
    {
        $this->container['sellerStoreName'] = $sellerStoreName;

        return $this;
    }

    /**
     * Gets providerId
     *
     * @return string|null
     */
    public function getProviderId()
    {
        return $this->container['providerId'];
    }

    /**
     * Sets providerId
     *
     * @param string|null $providerId The Amazon-defined identifier of the solution provider.
     *
     * @return self
     */
    public function setProviderId($providerId)
    {
        $this->container['providerId'] = $providerId;

        return $this;
    }

    /**
     * Gets providerStoreName
     *
     * @return string|null
     */
    public function getProviderStoreName()
    {
        return $this->container['providerStoreName'];
    }

    /**
     * Sets providerStoreName
     *
     * @param string|null $providerStoreName The store name where the payment event occurred.
     *
     * @return self
     */
    public function setProviderStoreName($providerStoreName)
    {
        $this->container['providerStoreName'] = $providerStoreName;

        return $this;
    }

    /**
     * Gets transactionAmount
     *
     * @return \Webcom\Amazon\Rest\FinancesApi\Model\Currency|null
     */
    public function getTransactionAmount()
    {
        return $this->container['transactionAmount'];
    }

    /**
     * Sets transactionAmount
     *
     * @param \Webcom\Amazon\Rest\FinancesApi\Model\Currency|null $transactionAmount transactionAmount
     *
     * @return self
     */
    public function setTransactionAmount($transactionAmount)
    {
        $this->container['transactionAmount'] = $transactionAmount;

        return $this;
    }

    /**
     * Gets transactionCreationDate
     *
     * @return \DateTime|null
     */
    public function getTransactionCreationDate()
    {
        return $this->container['transactionCreationDate'];
    }

    /**
     * Sets transactionCreationDate
     *
     * @param \DateTime|null $transactionCreationDate transactionCreationDate
     *
     * @return self
     */
    public function setTransactionCreationDate($transactionCreationDate)
    {
        $this->container['transactionCreationDate'] = $transactionCreationDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


