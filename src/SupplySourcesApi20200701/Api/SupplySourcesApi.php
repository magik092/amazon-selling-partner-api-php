<?php
/**
 * SupplySourcesApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\SupplySourcesApi20200701
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\SupplySourcesApi20200701\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Webcom\Amazon\Rest\SupplySourcesApi20200701\ApiException;
use Webcom\Amazon\Rest\Configuration;
use Webcom\Amazon\Rest\HeaderSelector;
use Webcom\Amazon\Rest\ObjectSerializer;

/**
 * SupplySourcesApi Class Doc Comment
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\SupplySourcesApi20200701
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SupplySourcesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation archiveSupplySource
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     *
     * @throws \Webcom\Amazon\Rest\SupplySourcesApi20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701
     */
    public function archiveSupplySource($supplySourceId)
    {
        list($response) = $this->archiveSupplySourceWithHttpInfo($supplySourceId);
        return $response;
    }

    /**
     * Operation archiveSupplySourceWithHttpInfo
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     *
     * @throws \Webcom\Amazon\Rest\SupplySourcesApi20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveSupplySourceWithHttpInfo($supplySourceId)
    {
        $request = $this->archiveSupplySourceRequest($supplySourceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 204:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation archiveSupplySourceAsync
     *
     * 
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveSupplySourceAsync($supplySourceId)
    {
        return $this->archiveSupplySourceAsyncWithHttpInfo($supplySourceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archiveSupplySourceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveSupplySourceAsyncWithHttpInfo($supplySourceId)
    {
        $returnType = '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701';
        $request = $this->archiveSupplySourceRequest($supplySourceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archiveSupplySource'
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function archiveSupplySourceRequest($supplySourceId)
    {
        // verify the required parameter 'supplySourceId' is set
        if ($supplySourceId === null || (is_array($supplySourceId) && count($supplySourceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplySourceId when calling archiveSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($supplySourceId !== null) {
            $resourcePath = str_replace(
                '{' . 'supplySourceId' . '}',
                ObjectSerializer::toPathValue($supplySourceId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSupplySource
     *
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\CreateSupplySourceRequest20200701 $payload A request to create a supply source. (required)
     *
     * @throws \Webcom\Amazon\Rest\SupplySourcesApi20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\CreateSupplySourceResponse20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701
     */
    public function createSupplySource($payload)
    {
        list($response) = $this->createSupplySourceWithHttpInfo($payload);
        return $response;
    }

    /**
     * Operation createSupplySourceWithHttpInfo
     *
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\CreateSupplySourceRequest20200701 $payload A request to create a supply source. (required)
     *
     * @throws \Webcom\Amazon\Rest\SupplySourcesApi20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\CreateSupplySourceResponse20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSupplySourceWithHttpInfo($payload)
    {
        $request = $this->createSupplySourceRequest($payload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\CreateSupplySourceResponse20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\CreateSupplySourceResponse20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\CreateSupplySourceResponse20200701';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\CreateSupplySourceResponse20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSupplySourceAsync
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\CreateSupplySourceRequest20200701 $payload A request to create a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSupplySourceAsync($payload)
    {
        return $this->createSupplySourceAsyncWithHttpInfo($payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSupplySourceAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\CreateSupplySourceRequest20200701 $payload A request to create a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSupplySourceAsyncWithHttpInfo($payload)
    {
        $returnType = '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\CreateSupplySourceResponse20200701';
        $request = $this->createSupplySourceRequest($payload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSupplySource'
     *
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\CreateSupplySourceRequest20200701 $payload A request to create a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSupplySourceRequest($payload)
    {
        // verify the required parameter 'payload' is set
        if ($payload === null || (is_array($payload) && count($payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling createSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($payload)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSupplySource
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     *
     * @throws \Webcom\Amazon\Rest\SupplySourcesApi20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\SupplySource20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701
     */
    public function getSupplySource($supplySourceId)
    {
        list($response) = $this->getSupplySourceWithHttpInfo($supplySourceId);
        return $response;
    }

    /**
     * Operation getSupplySourceWithHttpInfo
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     *
     * @throws \Webcom\Amazon\Rest\SupplySourcesApi20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\SupplySource20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSupplySourceWithHttpInfo($supplySourceId)
    {
        $request = $this->getSupplySourceRequest($supplySourceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\SupplySource20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\SupplySource20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\SupplySource20200701';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\SupplySource20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSupplySourceAsync
     *
     * 
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplySourceAsync($supplySourceId)
    {
        return $this->getSupplySourceAsyncWithHttpInfo($supplySourceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSupplySourceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplySourceAsyncWithHttpInfo($supplySourceId)
    {
        $returnType = '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\SupplySource20200701';
        $request = $this->getSupplySourceRequest($supplySourceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSupplySource'
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSupplySourceRequest($supplySourceId)
    {
        // verify the required parameter 'supplySourceId' is set
        if ($supplySourceId === null || (is_array($supplySourceId) && count($supplySourceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplySourceId when calling getSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($supplySourceId !== null) {
            $resourcePath = str_replace(
                '{' . 'supplySourceId' . '}',
                ObjectSerializer::toPathValue($supplySourceId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSupplySources
     *
     * @param  string $nextPageToken The pagination token to retrieve a specific page of results. (optional)
     * @param  float $pageSize The number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \Webcom\Amazon\Rest\SupplySourcesApi20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\GetSupplySourcesResponse20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701
     */
    public function getSupplySources($nextPageToken = null, $pageSize = 10.0)
    {
        list($response) = $this->getSupplySourcesWithHttpInfo($nextPageToken, $pageSize);
        return $response;
    }

    /**
     * Operation getSupplySourcesWithHttpInfo
     *
     * @param  string $nextPageToken The pagination token to retrieve a specific page of results. (optional)
     * @param  float $pageSize The number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \Webcom\Amazon\Rest\SupplySourcesApi20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\GetSupplySourcesResponse20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSupplySourcesWithHttpInfo($nextPageToken = null, $pageSize = 10.0)
    {
        $request = $this->getSupplySourcesRequest($nextPageToken, $pageSize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\GetSupplySourcesResponse20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\GetSupplySourcesResponse20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\GetSupplySourcesResponse20200701';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\GetSupplySourcesResponse20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSupplySourcesAsync
     *
     * 
     *
     * @param  string $nextPageToken The pagination token to retrieve a specific page of results. (optional)
     * @param  float $pageSize The number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplySourcesAsync($nextPageToken = null, $pageSize = 10.0)
    {
        return $this->getSupplySourcesAsyncWithHttpInfo($nextPageToken, $pageSize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSupplySourcesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $nextPageToken The pagination token to retrieve a specific page of results. (optional)
     * @param  float $pageSize The number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupplySourcesAsyncWithHttpInfo($nextPageToken = null, $pageSize = 10.0)
    {
        $returnType = '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\GetSupplySourcesResponse20200701';
        $request = $this->getSupplySourcesRequest($nextPageToken, $pageSize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSupplySources'
     *
     * @param  string $nextPageToken The pagination token to retrieve a specific page of results. (optional)
     * @param  float $pageSize The number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSupplySourcesRequest($nextPageToken = null, $pageSize = 10.0)
    {

        $resourcePath = '/supplySources/2020-07-01/supplySources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($nextPageToken)) {
            $nextPageToken = ObjectSerializer::serializeCollection($nextPageToken, '', true);
        }
        if ($nextPageToken !== null) {
            $queryParams['nextPageToken'] = $nextPageToken;
        }
        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSupplySource
     *
     * @param  string $supplySourceId The unique identitier of a supply source. (required)
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\UpdateSupplySourceRequest20200701 $payload payload (optional)
     *
     * @throws \Webcom\Amazon\Rest\SupplySourcesApi20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701
     */
    public function updateSupplySource($supplySourceId, $payload = null)
    {
        list($response) = $this->updateSupplySourceWithHttpInfo($supplySourceId, $payload);
        return $response;
    }

    /**
     * Operation updateSupplySourceWithHttpInfo
     *
     * @param  string $supplySourceId The unique identitier of a supply source. (required)
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\UpdateSupplySourceRequest20200701 $payload (optional)
     *
     * @throws \Webcom\Amazon\Rest\SupplySourcesApi20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSupplySourceWithHttpInfo($supplySourceId, $payload = null)
    {
        $request = $this->updateSupplySourceRequest($supplySourceId, $payload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 204:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSupplySourceAsync
     *
     * 
     *
     * @param  string $supplySourceId The unique identitier of a supply source. (required)
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\UpdateSupplySourceRequest20200701 $payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplySourceAsync($supplySourceId, $payload = null)
    {
        return $this->updateSupplySourceAsyncWithHttpInfo($supplySourceId, $payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSupplySourceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $supplySourceId The unique identitier of a supply source. (required)
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\UpdateSupplySourceRequest20200701 $payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplySourceAsyncWithHttpInfo($supplySourceId, $payload = null)
    {
        $returnType = '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701';
        $request = $this->updateSupplySourceRequest($supplySourceId, $payload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSupplySource'
     *
     * @param  string $supplySourceId The unique identitier of a supply source. (required)
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\UpdateSupplySourceRequest20200701 $payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSupplySourceRequest($supplySourceId, $payload = null)
    {
        // verify the required parameter 'supplySourceId' is set
        if ($supplySourceId === null || (is_array($supplySourceId) && count($supplySourceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplySourceId when calling updateSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($supplySourceId !== null) {
            $resourcePath = str_replace(
                '{' . 'supplySourceId' . '}',
                ObjectSerializer::toPathValue($supplySourceId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($payload)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSupplySourceStatus
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\UpdateSupplySourceStatusRequest20200701 $payload payload (optional)
     *
     * @throws \Webcom\Amazon\Rest\SupplySourcesApi20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701
     */
    public function updateSupplySourceStatus($supplySourceId, $payload = null)
    {
        list($response) = $this->updateSupplySourceStatusWithHttpInfo($supplySourceId, $payload);
        return $response;
    }

    /**
     * Operation updateSupplySourceStatusWithHttpInfo
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\UpdateSupplySourceStatusRequest20200701 $payload (optional)
     *
     * @throws \Webcom\Amazon\Rest\SupplySourcesApi20200701\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701|\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSupplySourceStatusWithHttpInfo($supplySourceId, $payload = null)
    {
        $request = $this->updateSupplySourceStatusRequest($supplySourceId, $payload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 204:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSupplySourceStatusAsync
     *
     * 
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\UpdateSupplySourceStatusRequest20200701 $payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplySourceStatusAsync($supplySourceId, $payload = null)
    {
        return $this->updateSupplySourceStatusAsyncWithHttpInfo($supplySourceId, $payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSupplySourceStatusAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\UpdateSupplySourceStatusRequest20200701 $payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSupplySourceStatusAsyncWithHttpInfo($supplySourceId, $payload = null)
    {
        $returnType = '\Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\ErrorList20200701';
        $request = $this->updateSupplySourceStatusRequest($supplySourceId, $payload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSupplySourceStatus'
     *
     * @param  string $supplySourceId The unique identifier of a supply source. (required)
     * @param  \Webcom\Amazon\Rest\SupplySourcesApi20200701\Model\UpdateSupplySourceStatusRequest20200701 $payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSupplySourceStatusRequest($supplySourceId, $payload = null)
    {
        // verify the required parameter 'supplySourceId' is set
        if ($supplySourceId === null || (is_array($supplySourceId) && count($supplySourceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplySourceId when calling updateSupplySourceStatus'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($supplySourceId !== null) {
            $resourcePath = str_replace(
                '{' . 'supplySourceId' . '}',
                ObjectSerializer::toPathValue($supplySourceId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($payload)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
