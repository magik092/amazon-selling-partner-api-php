<?php
/**
 * FixedSlot
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\ServicesApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\ServicesApi\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * FixedSlot Class Doc Comment
 *
 * @category Class
 * @description In this slot format each slot only has the requested capacity types. This slot size is as specified by slot duration.
 * @package  Webcom\Amazon\Rest\ServicesApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class FixedSlot implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FixedSlot';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'startDateTime' => '\DateTime',
        'scheduledCapacity' => 'int',
        'availableCapacity' => 'int',
        'encumberedCapacity' => 'int',
        'reservedCapacity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'startDateTime' => 'date-time',
        'scheduledCapacity' => 'int32',
        'availableCapacity' => 'int32',
        'encumberedCapacity' => 'int32',
        'reservedCapacity' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'startDateTime' => 'startDateTime',
        'scheduledCapacity' => 'scheduledCapacity',
        'availableCapacity' => 'availableCapacity',
        'encumberedCapacity' => 'encumberedCapacity',
        'reservedCapacity' => 'reservedCapacity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'startDateTime' => 'setStartDateTime',
        'scheduledCapacity' => 'setScheduledCapacity',
        'availableCapacity' => 'setAvailableCapacity',
        'encumberedCapacity' => 'setEncumberedCapacity',
        'reservedCapacity' => 'setReservedCapacity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'startDateTime' => 'getStartDateTime',
        'scheduledCapacity' => 'getScheduledCapacity',
        'availableCapacity' => 'getAvailableCapacity',
        'encumberedCapacity' => 'getEncumberedCapacity',
        'reservedCapacity' => 'getReservedCapacity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['startDateTime'] = $data['startDateTime'] ?? null;
        $this->container['scheduledCapacity'] = $data['scheduledCapacity'] ?? null;
        $this->container['availableCapacity'] = $data['availableCapacity'] ?? null;
        $this->container['encumberedCapacity'] = $data['encumberedCapacity'] ?? null;
        $this->container['reservedCapacity'] = $data['reservedCapacity'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets startDateTime
     *
     * @return \DateTime|null
     */
    public function getStartDateTime()
    {
        return $this->container['startDateTime'];
    }

    /**
     * Sets startDateTime
     *
     * @param \DateTime|null $startDateTime Start date time of slot in ISO 8601 format with precision of seconds.
     *
     * @return self
     */
    public function setStartDateTime($startDateTime)
    {
        $this->container['startDateTime'] = $startDateTime;

        return $this;
    }

    /**
     * Gets scheduledCapacity
     *
     * @return int|null
     */
    public function getScheduledCapacity()
    {
        return $this->container['scheduledCapacity'];
    }

    /**
     * Sets scheduledCapacity
     *
     * @param int|null $scheduledCapacity Scheduled capacity corresponding to the slot. This capacity represents the originally allocated capacity as per resource schedule.
     *
     * @return self
     */
    public function setScheduledCapacity($scheduledCapacity)
    {
        $this->container['scheduledCapacity'] = $scheduledCapacity;

        return $this;
    }

    /**
     * Gets availableCapacity
     *
     * @return int|null
     */
    public function getAvailableCapacity()
    {
        return $this->container['availableCapacity'];
    }

    /**
     * Sets availableCapacity
     *
     * @param int|null $availableCapacity Available capacity corresponding to the slot. This capacity represents the capacity available for allocation to reservations.
     *
     * @return self
     */
    public function setAvailableCapacity($availableCapacity)
    {
        $this->container['availableCapacity'] = $availableCapacity;

        return $this;
    }

    /**
     * Gets encumberedCapacity
     *
     * @return int|null
     */
    public function getEncumberedCapacity()
    {
        return $this->container['encumberedCapacity'];
    }

    /**
     * Sets encumberedCapacity
     *
     * @param int|null $encumberedCapacity Encumbered capacity corresponding to the slot. This capacity represents the capacity allocated for Amazon Jobs/Appointments/Orders.
     *
     * @return self
     */
    public function setEncumberedCapacity($encumberedCapacity)
    {
        $this->container['encumberedCapacity'] = $encumberedCapacity;

        return $this;
    }

    /**
     * Gets reservedCapacity
     *
     * @return int|null
     */
    public function getReservedCapacity()
    {
        return $this->container['reservedCapacity'];
    }

    /**
     * Sets reservedCapacity
     *
     * @param int|null $reservedCapacity Reserved capacity corresponding to the slot. This capacity represents the capacity made unavailable due to events like Breaks/Leaves/Lunch.
     *
     * @return self
     */
    public function setReservedCapacity($reservedCapacity)
    {
        $this->container['reservedCapacity'] = $reservedCapacity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


