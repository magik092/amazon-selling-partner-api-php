<?php
/**
 * CatalogApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\CatalogItemsApiV20201201
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, see the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2020-12-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2020-12-01
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\CatalogItemsApiV20201201\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Webcom\Amazon\Rest\CatalogItemsApiV20201201\ApiException;
use Webcom\Amazon\Rest\Configuration;
use Webcom\Amazon\Rest\HeaderSelector;
use Webcom\Amazon\Rest\ObjectSerializer;

/**
 * CatalogApi Class Doc Comment
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\CatalogItemsApiV20201201
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CatalogApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCatalogItem
     *
     * @param  string $asin The Amazon Standard Identification Number (ASIN) of the item. (required)
     * @param  string[] $marketplaceIds A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces. (required)
     * @param  string[] $includedData A comma-delimited list of data sets to include in the response. Default: summaries. (optional)
     * @param  string $locale Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)
     *
     * @throws \Webcom\Amazon\Rest\CatalogItemsApiV20201201\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\Item|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList
     */
    public function getCatalogItem($asin, $marketplaceIds, $includedData = null, $locale = null)
    {
        list($response) = $this->getCatalogItemWithHttpInfo($asin, $marketplaceIds, $includedData, $locale);
        return $response;
    }

    /**
     * Operation getCatalogItemWithHttpInfo
     *
     * @param  string $asin The Amazon Standard Identification Number (ASIN) of the item. (required)
     * @param  string[] $marketplaceIds A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces. (required)
     * @param  string[] $includedData A comma-delimited list of data sets to include in the response. Default: summaries. (optional)
     * @param  string $locale Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)
     *
     * @throws \Webcom\Amazon\Rest\CatalogItemsApiV20201201\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\Item|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCatalogItemWithHttpInfo($asin, $marketplaceIds, $includedData = null, $locale = null)
    {
        $request = $this->getCatalogItemRequest($asin, $marketplaceIds, $includedData, $locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\Item' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\Item', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\Item';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\Item',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCatalogItemAsync
     *
     * 
     *
     * @param  string $asin The Amazon Standard Identification Number (ASIN) of the item. (required)
     * @param  string[] $marketplaceIds A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces. (required)
     * @param  string[] $includedData A comma-delimited list of data sets to include in the response. Default: summaries. (optional)
     * @param  string $locale Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCatalogItemAsync($asin, $marketplaceIds, $includedData = null, $locale = null)
    {
        return $this->getCatalogItemAsyncWithHttpInfo($asin, $marketplaceIds, $includedData, $locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCatalogItemAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $asin The Amazon Standard Identification Number (ASIN) of the item. (required)
     * @param  string[] $marketplaceIds A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces. (required)
     * @param  string[] $includedData A comma-delimited list of data sets to include in the response. Default: summaries. (optional)
     * @param  string $locale Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCatalogItemAsyncWithHttpInfo($asin, $marketplaceIds, $includedData = null, $locale = null)
    {
        $returnType = '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\Item';
        $request = $this->getCatalogItemRequest($asin, $marketplaceIds, $includedData, $locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCatalogItem'
     *
     * @param  string $asin The Amazon Standard Identification Number (ASIN) of the item. (required)
     * @param  string[] $marketplaceIds A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces. (required)
     * @param  string[] $includedData A comma-delimited list of data sets to include in the response. Default: summaries. (optional)
     * @param  string $locale Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCatalogItemRequest($asin, $marketplaceIds, $includedData = null, $locale = null)
    {
        // verify the required parameter 'asin' is set
        if ($asin === null || (is_array($asin) && count($asin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asin when calling getCatalogItem'
            );
        }
        // verify the required parameter 'marketplaceIds' is set
        if ($marketplaceIds === null || (is_array($marketplaceIds) && count($marketplaceIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceIds when calling getCatalogItem'
            );
        }

        $resourcePath = '/catalog/2020-12-01/items/{asin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($marketplaceIds)) {
            $marketplaceIds = ObjectSerializer::serializeCollection($marketplaceIds, 'form', true);
        }
        if ($marketplaceIds !== null) {
            $queryParams['marketplaceIds'] = $marketplaceIds;
        }
        // query params
        if (is_array($includedData)) {
            $includedData = ObjectSerializer::serializeCollection($includedData, 'form', true);
        }
        if ($includedData !== null) {
            $queryParams['includedData'] = $includedData;
        }
        // query params
        if (is_array($locale)) {
            $locale = ObjectSerializer::serializeCollection($locale, '', true);
        }
        if ($locale !== null) {
            $queryParams['locale'] = $locale;
        }


        // path params
        if ($asin !== null) {
            $resourcePath = str_replace(
                '{' . 'asin' . '}',
                ObjectSerializer::toPathValue($asin),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchCatalogItems
     *
     * @param  string[] $keywords A comma-delimited list of words or item identifiers to search the Amazon catalog for. (required)
     * @param  string[] $marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request. (required)
     * @param  string[] $includedData A comma-delimited list of data sets to include in the response. Default: summaries. (optional)
     * @param  string[] $brandNames A comma-delimited list of brand names to limit the search to. (optional)
     * @param  string[] $classificationIds A comma-delimited list of classification identifiers to limit the search to. (optional)
     * @param  int $pageSize Number of results to be returned per page. (optional, default to 10)
     * @param  string $pageToken A token to fetch a certain page when there are multiple pages worth of results. (optional)
     * @param  string $keywordsLocale The language the keywords are provided in. Defaults to the primary locale of the marketplace. (optional)
     * @param  string $locale Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)
     *
     * @throws \Webcom\Amazon\Rest\CatalogItemsApiV20201201\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ItemSearchResults|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList
     */
    public function searchCatalogItems($keywords, $marketplaceIds, $includedData = null, $brandNames = null, $classificationIds = null, $pageSize = 10, $pageToken = null, $keywordsLocale = null, $locale = null)
    {
        list($response) = $this->searchCatalogItemsWithHttpInfo($keywords, $marketplaceIds, $includedData, $brandNames, $classificationIds, $pageSize, $pageToken, $keywordsLocale, $locale);
        return $response;
    }

    /**
     * Operation searchCatalogItemsWithHttpInfo
     *
     * @param  string[] $keywords A comma-delimited list of words or item identifiers to search the Amazon catalog for. (required)
     * @param  string[] $marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request. (required)
     * @param  string[] $includedData A comma-delimited list of data sets to include in the response. Default: summaries. (optional)
     * @param  string[] $brandNames A comma-delimited list of brand names to limit the search to. (optional)
     * @param  string[] $classificationIds A comma-delimited list of classification identifiers to limit the search to. (optional)
     * @param  int $pageSize Number of results to be returned per page. (optional, default to 10)
     * @param  string $pageToken A token to fetch a certain page when there are multiple pages worth of results. (optional)
     * @param  string $keywordsLocale The language the keywords are provided in. Defaults to the primary locale of the marketplace. (optional)
     * @param  string $locale Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)
     *
     * @throws \Webcom\Amazon\Rest\CatalogItemsApiV20201201\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ItemSearchResults|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList|\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchCatalogItemsWithHttpInfo($keywords, $marketplaceIds, $includedData = null, $brandNames = null, $classificationIds = null, $pageSize = 10, $pageToken = null, $keywordsLocale = null, $locale = null)
    {
        $request = $this->searchCatalogItemsRequest($keywords, $marketplaceIds, $includedData, $brandNames, $classificationIds, $pageSize, $pageToken, $keywordsLocale, $locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ItemSearchResults' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ItemSearchResults', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ItemSearchResults';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ItemSearchResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchCatalogItemsAsync
     *
     * 
     *
     * @param  string[] $keywords A comma-delimited list of words or item identifiers to search the Amazon catalog for. (required)
     * @param  string[] $marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request. (required)
     * @param  string[] $includedData A comma-delimited list of data sets to include in the response. Default: summaries. (optional)
     * @param  string[] $brandNames A comma-delimited list of brand names to limit the search to. (optional)
     * @param  string[] $classificationIds A comma-delimited list of classification identifiers to limit the search to. (optional)
     * @param  int $pageSize Number of results to be returned per page. (optional, default to 10)
     * @param  string $pageToken A token to fetch a certain page when there are multiple pages worth of results. (optional)
     * @param  string $keywordsLocale The language the keywords are provided in. Defaults to the primary locale of the marketplace. (optional)
     * @param  string $locale Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCatalogItemsAsync($keywords, $marketplaceIds, $includedData = null, $brandNames = null, $classificationIds = null, $pageSize = 10, $pageToken = null, $keywordsLocale = null, $locale = null)
    {
        return $this->searchCatalogItemsAsyncWithHttpInfo($keywords, $marketplaceIds, $includedData, $brandNames, $classificationIds, $pageSize, $pageToken, $keywordsLocale, $locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchCatalogItemsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string[] $keywords A comma-delimited list of words or item identifiers to search the Amazon catalog for. (required)
     * @param  string[] $marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request. (required)
     * @param  string[] $includedData A comma-delimited list of data sets to include in the response. Default: summaries. (optional)
     * @param  string[] $brandNames A comma-delimited list of brand names to limit the search to. (optional)
     * @param  string[] $classificationIds A comma-delimited list of classification identifiers to limit the search to. (optional)
     * @param  int $pageSize Number of results to be returned per page. (optional, default to 10)
     * @param  string $pageToken A token to fetch a certain page when there are multiple pages worth of results. (optional)
     * @param  string $keywordsLocale The language the keywords are provided in. Defaults to the primary locale of the marketplace. (optional)
     * @param  string $locale Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCatalogItemsAsyncWithHttpInfo($keywords, $marketplaceIds, $includedData = null, $brandNames = null, $classificationIds = null, $pageSize = 10, $pageToken = null, $keywordsLocale = null, $locale = null)
    {
        $returnType = '\Webcom\Amazon\Rest\CatalogItemsApiV20201201\Model\ItemSearchResults';
        $request = $this->searchCatalogItemsRequest($keywords, $marketplaceIds, $includedData, $brandNames, $classificationIds, $pageSize, $pageToken, $keywordsLocale, $locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchCatalogItems'
     *
     * @param  string[] $keywords A comma-delimited list of words or item identifiers to search the Amazon catalog for. (required)
     * @param  string[] $marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request. (required)
     * @param  string[] $includedData A comma-delimited list of data sets to include in the response. Default: summaries. (optional)
     * @param  string[] $brandNames A comma-delimited list of brand names to limit the search to. (optional)
     * @param  string[] $classificationIds A comma-delimited list of classification identifiers to limit the search to. (optional)
     * @param  int $pageSize Number of results to be returned per page. (optional, default to 10)
     * @param  string $pageToken A token to fetch a certain page when there are multiple pages worth of results. (optional)
     * @param  string $keywordsLocale The language the keywords are provided in. Defaults to the primary locale of the marketplace. (optional)
     * @param  string $locale Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchCatalogItemsRequest($keywords, $marketplaceIds, $includedData = null, $brandNames = null, $classificationIds = null, $pageSize = 10, $pageToken = null, $keywordsLocale = null, $locale = null)
    {
        // verify the required parameter 'keywords' is set
        if ($keywords === null || (is_array($keywords) && count($keywords) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $keywords when calling searchCatalogItems'
            );
        }
        // verify the required parameter 'marketplaceIds' is set
        if ($marketplaceIds === null || (is_array($marketplaceIds) && count($marketplaceIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceIds when calling searchCatalogItems'
            );
        }
        if (count($marketplaceIds) > 1) {
            throw new \InvalidArgumentException('invalid value for "$marketplaceIds" when calling CatalogApi.searchCatalogItems, number of items must be less than or equal to 1.');
        }

        if ($pageSize !== null && $pageSize > 20) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling CatalogApi.searchCatalogItems, must be smaller than or equal to 20.');
        }


        $resourcePath = '/catalog/2020-12-01/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($keywords)) {
            $keywords = ObjectSerializer::serializeCollection($keywords, 'form', true);
        }
        if ($keywords !== null) {
            $queryParams['keywords'] = $keywords;
        }
        // query params
        if (is_array($marketplaceIds)) {
            $marketplaceIds = ObjectSerializer::serializeCollection($marketplaceIds, 'form', true);
        }
        if ($marketplaceIds !== null) {
            $queryParams['marketplaceIds'] = $marketplaceIds;
        }
        // query params
        if (is_array($includedData)) {
            $includedData = ObjectSerializer::serializeCollection($includedData, 'form', true);
        }
        if ($includedData !== null) {
            $queryParams['includedData'] = $includedData;
        }
        // query params
        if (is_array($brandNames)) {
            $brandNames = ObjectSerializer::serializeCollection($brandNames, 'form', true);
        }
        if ($brandNames !== null) {
            $queryParams['brandNames'] = $brandNames;
        }
        // query params
        if (is_array($classificationIds)) {
            $classificationIds = ObjectSerializer::serializeCollection($classificationIds, 'form', true);
        }
        if ($classificationIds !== null) {
            $queryParams['classificationIds'] = $classificationIds;
        }
        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($pageToken)) {
            $pageToken = ObjectSerializer::serializeCollection($pageToken, '', true);
        }
        if ($pageToken !== null) {
            $queryParams['pageToken'] = $pageToken;
        }
        // query params
        if (is_array($keywordsLocale)) {
            $keywordsLocale = ObjectSerializer::serializeCollection($keywordsLocale, '', true);
        }
        if ($keywordsLocale !== null) {
            $queryParams['keywordsLocale'] = $keywordsLocale;
        }
        // query params
        if (is_array($locale)) {
            $locale = ObjectSerializer::serializeCollection($locale, '', true);
        }
        if ($locale !== null) {
            $queryParams['locale'] = $locale;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
