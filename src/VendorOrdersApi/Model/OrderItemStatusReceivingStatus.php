<?php
/**
 * OrderItemStatusReceivingStatus
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\VendorOrdersApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\VendorOrdersApi\Model;

use Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * OrderItemStatusReceivingStatus Class Doc Comment
 *
 * @category Class
 * @description Item receive status at the buyer&#39;s warehouse.
 * @package  Webcom\Amazon\Rest\VendorOrdersApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OrderItemStatusReceivingStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'OrderItemStatus_receivingStatus';
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'receiveStatus'    => 'string',
        'receivedQuantity' => '\Webcom\Amazon\Rest\VendorOrdersApi\Model\ItemQuantity',
        'lastReceiveDate'  => '\DateTime'
    ];
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'receiveStatus'    => null,
        'receivedQuantity' => null,
        'lastReceiveDate'  => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'receiveStatus'    => 'receiveStatus',
        'receivedQuantity' => 'receivedQuantity',
        'lastReceiveDate'  => 'lastReceiveDate'
    ];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'receiveStatus'    => 'setReceiveStatus',
        'receivedQuantity' => 'setReceivedQuantity',
        'lastReceiveDate'  => 'setLastReceiveDate'
    ];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'receiveStatus'    => 'getReceiveStatus',
        'receivedQuantity' => 'getReceivedQuantity',
        'lastReceiveDate'  => 'getLastReceiveDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RECEIVE_STATUS_NOT_RECEIVED = 'NOT_RECEIVED';
    const RECEIVE_STATUS_PARTIALLY_RECEIVED = 'PARTIALLY_RECEIVED';
    const RECEIVE_STATUS_RECEIVED = 'RECEIVED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReceiveStatusAllowableValues()
    {
        return [
            self::RECEIVE_STATUS_NOT_RECEIVED,
            self::RECEIVE_STATUS_PARTIALLY_RECEIVED,
            self::RECEIVE_STATUS_RECEIVED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['receiveStatus'] = $data['receiveStatus'] ?? null;
        $this->container['receivedQuantity'] = $data['receivedQuantity'] ?? null;
        $this->container['lastReceiveDate'] = $data['lastReceiveDate'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReceiveStatusAllowableValues();
        if (!is_null($this->container['receiveStatus']) && !in_array($this->container['receiveStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'receiveStatus', must be one of '%s'",
                $this->container['receiveStatus'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets receiveStatus
     *
     * @return string|null
     */
    public function getReceiveStatus()
    {
        return $this->container['receiveStatus'];
    }

    /**
     * Sets receiveStatus
     *
     * @param string|null $receiveStatus Receive status of the line item.
     *
     * @return self
     */
    public function setReceiveStatus($receiveStatus)
    {
        $allowedValues = $this->getReceiveStatusAllowableValues();
        if (!is_null($receiveStatus) && !in_array($receiveStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'receiveStatus', must be one of '%s'",
                    $receiveStatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['receiveStatus'] = $receiveStatus;

        return $this;
    }

    /**
     * Gets receivedQuantity
     *
     * @return \Webcom\Amazon\Rest\VendorOrdersApi\Model\ItemQuantity|null
     */
    public function getReceivedQuantity()
    {
        return $this->container['receivedQuantity'];
    }

    /**
     * Sets receivedQuantity
     *
     * @param \Webcom\Amazon\Rest\VendorOrdersApi\Model\ItemQuantity|null $receivedQuantity receivedQuantity
     *
     * @return self
     */
    public function setReceivedQuantity($receivedQuantity)
    {
        $this->container['receivedQuantity'] = $receivedQuantity;

        return $this;
    }

    /**
     * Gets lastReceiveDate
     *
     * @return \DateTime|null
     */
    public function getLastReceiveDate()
    {
        return $this->container['lastReceiveDate'];
    }

    /**
     * Sets lastReceiveDate
     *
     * @param \DateTime|null $lastReceiveDate The date when the most recent item was received at the buyer's warehouse. Must be in ISO-8601 date/time format.
     *
     * @return self
     */
    public function setLastReceiveDate($lastReceiveDate)
    {
        $this->container['lastReceiveDate'] = $lastReceiveDate;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


