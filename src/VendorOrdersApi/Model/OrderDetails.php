<?php
/**
 * OrderDetails
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\VendorOrdersApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\VendorOrdersApi\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * OrderDetails Class Doc Comment
 *
 * @category Class
 * @description Details of an order.
 * @package  Webcom\Amazon\Rest\VendorOrdersApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class OrderDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'purchaseOrderDate' => '\DateTime',
        'purchaseOrderChangedDate' => '\DateTime',
        'purchaseOrderStateChangedDate' => '\DateTime',
        'purchaseOrderType' => 'string',
        'importDetails' => '\Webcom\Amazon\Rest\VendorOrdersApi\Model\ImportDetails',
        'dealCode' => 'string',
        'paymentMethod' => 'string',
        'buyingParty' => '\Webcom\Amazon\Rest\VendorOrdersApi\Model\PartyIdentification',
        'sellingParty' => '\Webcom\Amazon\Rest\VendorOrdersApi\Model\PartyIdentification',
        'shipToParty' => '\Webcom\Amazon\Rest\VendorOrdersApi\Model\PartyIdentification',
        'billToParty' => '\Webcom\Amazon\Rest\VendorOrdersApi\Model\PartyIdentification',
        'shipWindow' => 'string',
        'deliveryWindow' => 'string',
        'items' => '\Webcom\Amazon\Rest\VendorOrdersApi\Model\OrderItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'purchaseOrderDate' => 'date-time',
        'purchaseOrderChangedDate' => 'date-time',
        'purchaseOrderStateChangedDate' => 'date-time',
        'purchaseOrderType' => null,
        'importDetails' => null,
        'dealCode' => null,
        'paymentMethod' => null,
        'buyingParty' => null,
        'sellingParty' => null,
        'shipToParty' => null,
        'billToParty' => null,
        'shipWindow' => null,
        'deliveryWindow' => null,
        'items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchaseOrderDate' => 'purchaseOrderDate',
        'purchaseOrderChangedDate' => 'purchaseOrderChangedDate',
        'purchaseOrderStateChangedDate' => 'purchaseOrderStateChangedDate',
        'purchaseOrderType' => 'purchaseOrderType',
        'importDetails' => 'importDetails',
        'dealCode' => 'dealCode',
        'paymentMethod' => 'paymentMethod',
        'buyingParty' => 'buyingParty',
        'sellingParty' => 'sellingParty',
        'shipToParty' => 'shipToParty',
        'billToParty' => 'billToParty',
        'shipWindow' => 'shipWindow',
        'deliveryWindow' => 'deliveryWindow',
        'items' => 'items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchaseOrderDate' => 'setPurchaseOrderDate',
        'purchaseOrderChangedDate' => 'setPurchaseOrderChangedDate',
        'purchaseOrderStateChangedDate' => 'setPurchaseOrderStateChangedDate',
        'purchaseOrderType' => 'setPurchaseOrderType',
        'importDetails' => 'setImportDetails',
        'dealCode' => 'setDealCode',
        'paymentMethod' => 'setPaymentMethod',
        'buyingParty' => 'setBuyingParty',
        'sellingParty' => 'setSellingParty',
        'shipToParty' => 'setShipToParty',
        'billToParty' => 'setBillToParty',
        'shipWindow' => 'setShipWindow',
        'deliveryWindow' => 'setDeliveryWindow',
        'items' => 'setItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchaseOrderDate' => 'getPurchaseOrderDate',
        'purchaseOrderChangedDate' => 'getPurchaseOrderChangedDate',
        'purchaseOrderStateChangedDate' => 'getPurchaseOrderStateChangedDate',
        'purchaseOrderType' => 'getPurchaseOrderType',
        'importDetails' => 'getImportDetails',
        'dealCode' => 'getDealCode',
        'paymentMethod' => 'getPaymentMethod',
        'buyingParty' => 'getBuyingParty',
        'sellingParty' => 'getSellingParty',
        'shipToParty' => 'getShipToParty',
        'billToParty' => 'getBillToParty',
        'shipWindow' => 'getShipWindow',
        'deliveryWindow' => 'getDeliveryWindow',
        'items' => 'getItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PURCHASE_ORDER_TYPE_REGULAR_ORDER = 'RegularOrder';
    const PURCHASE_ORDER_TYPE_CONSIGNED_ORDER = 'ConsignedOrder';
    const PURCHASE_ORDER_TYPE_NEW_PRODUCT_INTRODUCTION = 'NewProductIntroduction';
    const PURCHASE_ORDER_TYPE_RUSH_ORDER = 'RushOrder';
    const PAYMENT_METHOD_INVOICE = 'Invoice';
    const PAYMENT_METHOD_CONSIGNMENT = 'Consignment';
    const PAYMENT_METHOD_CREDIT_CARD = 'CreditCard';
    const PAYMENT_METHOD_PREPAID = 'Prepaid';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPurchaseOrderTypeAllowableValues()
    {
        return [
            self::PURCHASE_ORDER_TYPE_REGULAR_ORDER,
            self::PURCHASE_ORDER_TYPE_CONSIGNED_ORDER,
            self::PURCHASE_ORDER_TYPE_NEW_PRODUCT_INTRODUCTION,
            self::PURCHASE_ORDER_TYPE_RUSH_ORDER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_INVOICE,
            self::PAYMENT_METHOD_CONSIGNMENT,
            self::PAYMENT_METHOD_CREDIT_CARD,
            self::PAYMENT_METHOD_PREPAID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['purchaseOrderDate'] = $data['purchaseOrderDate'] ?? null;
        $this->container['purchaseOrderChangedDate'] = $data['purchaseOrderChangedDate'] ?? null;
        $this->container['purchaseOrderStateChangedDate'] = $data['purchaseOrderStateChangedDate'] ?? null;
        $this->container['purchaseOrderType'] = $data['purchaseOrderType'] ?? null;
        $this->container['importDetails'] = $data['importDetails'] ?? null;
        $this->container['dealCode'] = $data['dealCode'] ?? null;
        $this->container['paymentMethod'] = $data['paymentMethod'] ?? null;
        $this->container['buyingParty'] = $data['buyingParty'] ?? null;
        $this->container['sellingParty'] = $data['sellingParty'] ?? null;
        $this->container['shipToParty'] = $data['shipToParty'] ?? null;
        $this->container['billToParty'] = $data['billToParty'] ?? null;
        $this->container['shipWindow'] = $data['shipWindow'] ?? null;
        $this->container['deliveryWindow'] = $data['deliveryWindow'] ?? null;
        $this->container['items'] = $data['items'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['purchaseOrderDate'] === null) {
            $invalidProperties[] = "'purchaseOrderDate' can't be null";
        }
        if ($this->container['purchaseOrderStateChangedDate'] === null) {
            $invalidProperties[] = "'purchaseOrderStateChangedDate' can't be null";
        }
        $allowedValues = $this->getPurchaseOrderTypeAllowableValues();
        if (!is_null($this->container['purchaseOrderType']) && !in_array($this->container['purchaseOrderType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'purchaseOrderType', must be one of '%s'",
                $this->container['purchaseOrderType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['paymentMethod']) && !in_array($this->container['paymentMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'paymentMethod', must be one of '%s'",
                $this->container['paymentMethod'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchaseOrderDate
     *
     * @return \DateTime
     */
    public function getPurchaseOrderDate()
    {
        return $this->container['purchaseOrderDate'];
    }

    /**
     * Sets purchaseOrderDate
     *
     * @param \DateTime $purchaseOrderDate The date the purchase order was placed. Must be in ISO-8601 date/time format.
     *
     * @return self
     */
    public function setPurchaseOrderDate($purchaseOrderDate)
    {
        $this->container['purchaseOrderDate'] = $purchaseOrderDate;

        return $this;
    }

    /**
     * Gets purchaseOrderChangedDate
     *
     * @return \DateTime|null
     */
    public function getPurchaseOrderChangedDate()
    {
        return $this->container['purchaseOrderChangedDate'];
    }

    /**
     * Sets purchaseOrderChangedDate
     *
     * @param \DateTime|null $purchaseOrderChangedDate The date when purchase order was last changed by Amazon after the order was placed. This date will be greater than 'purchaseOrderDate'. This means the PO data was changed on that date and vendors are required to fulfill the  updated PO. The PO changes can be related to Item Quantity, Ship to Location, Ship Window etc. This field will not be present in orders that have not changed after creation. Must be in ISO-8601 date/time format.
     *
     * @return self
     */
    public function setPurchaseOrderChangedDate($purchaseOrderChangedDate)
    {
        $this->container['purchaseOrderChangedDate'] = $purchaseOrderChangedDate;

        return $this;
    }

    /**
     * Gets purchaseOrderStateChangedDate
     *
     * @return \DateTime
     */
    public function getPurchaseOrderStateChangedDate()
    {
        return $this->container['purchaseOrderStateChangedDate'];
    }

    /**
     * Sets purchaseOrderStateChangedDate
     *
     * @param \DateTime $purchaseOrderStateChangedDate The date when current purchase order state was changed. Current purchase order state is available in the field 'purchaseOrderState'. Must be in ISO-8601 date/time format.
     *
     * @return self
     */
    public function setPurchaseOrderStateChangedDate($purchaseOrderStateChangedDate)
    {
        $this->container['purchaseOrderStateChangedDate'] = $purchaseOrderStateChangedDate;

        return $this;
    }

    /**
     * Gets purchaseOrderType
     *
     * @return string|null
     */
    public function getPurchaseOrderType()
    {
        return $this->container['purchaseOrderType'];
    }

    /**
     * Sets purchaseOrderType
     *
     * @param string|null $purchaseOrderType Type of purchase order.
     *
     * @return self
     */
    public function setPurchaseOrderType($purchaseOrderType)
    {
        $allowedValues = $this->getPurchaseOrderTypeAllowableValues();
        if (!is_null($purchaseOrderType) && !in_array($purchaseOrderType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'purchaseOrderType', must be one of '%s'",
                    $purchaseOrderType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['purchaseOrderType'] = $purchaseOrderType;

        return $this;
    }

    /**
     * Gets importDetails
     *
     * @return \Webcom\Amazon\Rest\VendorOrdersApi\Model\ImportDetails|null
     */
    public function getImportDetails()
    {
        return $this->container['importDetails'];
    }

    /**
     * Sets importDetails
     *
     * @param \Webcom\Amazon\Rest\VendorOrdersApi\Model\ImportDetails|null $importDetails importDetails
     *
     * @return self
     */
    public function setImportDetails($importDetails)
    {
        $this->container['importDetails'] = $importDetails;

        return $this;
    }

    /**
     * Gets dealCode
     *
     * @return string|null
     */
    public function getDealCode()
    {
        return $this->container['dealCode'];
    }

    /**
     * Sets dealCode
     *
     * @param string|null $dealCode If requested by the recipient, this field will contain a promotional/deal number. The discount code line is optional. It is used to obtain a price discount on items on the order.
     *
     * @return self
     */
    public function setDealCode($dealCode)
    {
        $this->container['dealCode'] = $dealCode;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param string|null $paymentMethod Payment method used.
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod)
    {
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($paymentMethod) && !in_array($paymentMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'paymentMethod', must be one of '%s'",
                    $paymentMethod,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets buyingParty
     *
     * @return \Webcom\Amazon\Rest\VendorOrdersApi\Model\PartyIdentification|null
     */
    public function getBuyingParty()
    {
        return $this->container['buyingParty'];
    }

    /**
     * Sets buyingParty
     *
     * @param \Webcom\Amazon\Rest\VendorOrdersApi\Model\PartyIdentification|null $buyingParty buyingParty
     *
     * @return self
     */
    public function setBuyingParty($buyingParty)
    {
        $this->container['buyingParty'] = $buyingParty;

        return $this;
    }

    /**
     * Gets sellingParty
     *
     * @return \Webcom\Amazon\Rest\VendorOrdersApi\Model\PartyIdentification|null
     */
    public function getSellingParty()
    {
        return $this->container['sellingParty'];
    }

    /**
     * Sets sellingParty
     *
     * @param \Webcom\Amazon\Rest\VendorOrdersApi\Model\PartyIdentification|null $sellingParty sellingParty
     *
     * @return self
     */
    public function setSellingParty($sellingParty)
    {
        $this->container['sellingParty'] = $sellingParty;

        return $this;
    }

    /**
     * Gets shipToParty
     *
     * @return \Webcom\Amazon\Rest\VendorOrdersApi\Model\PartyIdentification|null
     */
    public function getShipToParty()
    {
        return $this->container['shipToParty'];
    }

    /**
     * Sets shipToParty
     *
     * @param \Webcom\Amazon\Rest\VendorOrdersApi\Model\PartyIdentification|null $shipToParty shipToParty
     *
     * @return self
     */
    public function setShipToParty($shipToParty)
    {
        $this->container['shipToParty'] = $shipToParty;

        return $this;
    }

    /**
     * Gets billToParty
     *
     * @return \Webcom\Amazon\Rest\VendorOrdersApi\Model\PartyIdentification|null
     */
    public function getBillToParty()
    {
        return $this->container['billToParty'];
    }

    /**
     * Sets billToParty
     *
     * @param \Webcom\Amazon\Rest\VendorOrdersApi\Model\PartyIdentification|null $billToParty billToParty
     *
     * @return self
     */
    public function setBillToParty($billToParty)
    {
        $this->container['billToParty'] = $billToParty;

        return $this;
    }

    /**
     * Gets shipWindow
     *
     * @return string|null
     */
    public function getShipWindow()
    {
        return $this->container['shipWindow'];
    }

    /**
     * Sets shipWindow
     *
     * @param string|null $shipWindow Defines a date time interval according to ISO8601. Interval is separated by double hyphen (--).
     *
     * @return self
     */
    public function setShipWindow($shipWindow)
    {
        $this->container['shipWindow'] = $shipWindow;

        return $this;
    }

    /**
     * Gets deliveryWindow
     *
     * @return string|null
     */
    public function getDeliveryWindow()
    {
        return $this->container['deliveryWindow'];
    }

    /**
     * Sets deliveryWindow
     *
     * @param string|null $deliveryWindow Defines a date time interval according to ISO8601. Interval is separated by double hyphen (--).
     *
     * @return self
     */
    public function setDeliveryWindow($deliveryWindow)
    {
        $this->container['deliveryWindow'] = $deliveryWindow;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Webcom\Amazon\Rest\VendorOrdersApi\Model\OrderItem[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Webcom\Amazon\Rest\VendorOrdersApi\Model\OrderItem[] $items A list of items in this purchase order.
     *
     * @return self
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


