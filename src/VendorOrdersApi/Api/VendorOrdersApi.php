<?php
/**
 * VendorOrdersApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\VendorOrdersApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\VendorOrdersApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Webcom\Amazon\Rest\VendorOrdersApi\ApiException;
use Webcom\Amazon\Rest\Configuration;
use Webcom\Amazon\Rest\HeaderSelector;
use Webcom\Amazon\Rest\ObjectSerializer;

/**
 * VendorOrdersApi Class Doc Comment
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\VendorOrdersApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VendorOrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getPurchaseOrder
     *
     * @param  string $purchaseOrderNumber The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code. (required)
     *
     * @throws \Webcom\Amazon\Rest\VendorOrdersApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse
     */
    public function getPurchaseOrder($purchaseOrderNumber)
    {
        list($response) = $this->getPurchaseOrderWithHttpInfo($purchaseOrderNumber);
        return $response;
    }

    /**
     * Operation getPurchaseOrderWithHttpInfo
     *
     * @param  string $purchaseOrderNumber The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code. (required)
     *
     * @throws \Webcom\Amazon\Rest\VendorOrdersApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPurchaseOrderWithHttpInfo($purchaseOrderNumber)
    {
        $request = $this->getPurchaseOrderRequest($purchaseOrderNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPurchaseOrderAsync
     *
     *
     *
     * @param  string $purchaseOrderNumber The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPurchaseOrderAsync($purchaseOrderNumber)
    {
        return $this->getPurchaseOrderAsyncWithHttpInfo($purchaseOrderNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPurchaseOrderAsyncWithHttpInfo
     *
     *
     *
     * @param  string $purchaseOrderNumber The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPurchaseOrderAsyncWithHttpInfo($purchaseOrderNumber)
    {
        $returnType = '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrderResponse';
        $request = $this->getPurchaseOrderRequest($purchaseOrderNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPurchaseOrder'
     *
     * @param  string $purchaseOrderNumber The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPurchaseOrderRequest($purchaseOrderNumber)
    {
        // verify the required parameter 'purchaseOrderNumber' is set
        if ($purchaseOrderNumber === null || (is_array($purchaseOrderNumber) && count($purchaseOrderNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderNumber when calling getPurchaseOrder'
            );
        }

        $resourcePath = '/vendor/orders/v1/purchaseOrders/{purchaseOrderNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($purchaseOrderNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderNumber' . '}',
                ObjectSerializer::toPathValue($purchaseOrderNumber),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPurchaseOrders
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  \DateTime $createdAfter Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  \DateTime $createdBefore Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  string $sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param  string $nextToken Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)
     * @param  bool $includeDetails When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true. (optional)
     * @param  \DateTime $changedAfter Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  \DateTime $changedBefore Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  string $poItemState Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero. (optional)
     * @param  bool $isPOChanged When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false. (optional)
     * @param  string $purchaseOrderState Filters purchase orders based on the purchase order state. (optional)
     * @param  string $orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned. (optional)
     *
     * @throws \Webcom\Amazon\Rest\VendorOrdersApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse
     */
    public function getPurchaseOrders($limit = null, $createdAfter = null, $createdBefore = null, $sortOrder = null, $nextToken = null, $includeDetails = null, $changedAfter = null, $changedBefore = null, $poItemState = null, $isPOChanged = null, $purchaseOrderState = null, $orderingVendorCode = null)
    {
        list($response) = $this->getPurchaseOrdersWithHttpInfo($limit, $createdAfter, $createdBefore, $sortOrder, $nextToken, $includeDetails, $changedAfter, $changedBefore, $poItemState, $isPOChanged, $purchaseOrderState, $orderingVendorCode);
        return $response;
    }

    /**
     * Operation getPurchaseOrdersWithHttpInfo
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  \DateTime $createdAfter Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  \DateTime $createdBefore Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  string $sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param  string $nextToken Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)
     * @param  bool $includeDetails When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true. (optional)
     * @param  \DateTime $changedAfter Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  \DateTime $changedBefore Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  string $poItemState Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero. (optional)
     * @param  bool $isPOChanged When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false. (optional)
     * @param  string $purchaseOrderState Filters purchase orders based on the purchase order state. (optional)
     * @param  string $orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned. (optional)
     *
     * @throws \Webcom\Amazon\Rest\VendorOrdersApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPurchaseOrdersWithHttpInfo($limit = null, $createdAfter = null, $createdBefore = null, $sortOrder = null, $nextToken = null, $includeDetails = null, $changedAfter = null, $changedBefore = null, $poItemState = null, $isPOChanged = null, $purchaseOrderState = null, $orderingVendorCode = null)
    {
        $request = $this->getPurchaseOrdersRequest($limit, $createdAfter, $createdBefore, $sortOrder, $nextToken, $includeDetails, $changedAfter, $changedBefore, $poItemState, $isPOChanged, $purchaseOrderState, $orderingVendorCode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPurchaseOrdersAsync
     *
     *
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  \DateTime $createdAfter Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  \DateTime $createdBefore Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  string $sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param  string $nextToken Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)
     * @param  bool $includeDetails When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true. (optional)
     * @param  \DateTime $changedAfter Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  \DateTime $changedBefore Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  string $poItemState Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero. (optional)
     * @param  bool $isPOChanged When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false. (optional)
     * @param  string $purchaseOrderState Filters purchase orders based on the purchase order state. (optional)
     * @param  string $orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPurchaseOrdersAsync($limit = null, $createdAfter = null, $createdBefore = null, $sortOrder = null, $nextToken = null, $includeDetails = null, $changedAfter = null, $changedBefore = null, $poItemState = null, $isPOChanged = null, $purchaseOrderState = null, $orderingVendorCode = null)
    {
        return $this->getPurchaseOrdersAsyncWithHttpInfo($limit, $createdAfter, $createdBefore, $sortOrder, $nextToken, $includeDetails, $changedAfter, $changedBefore, $poItemState, $isPOChanged, $purchaseOrderState, $orderingVendorCode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPurchaseOrdersAsyncWithHttpInfo
     *
     *
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  \DateTime $createdAfter Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  \DateTime $createdBefore Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  string $sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param  string $nextToken Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)
     * @param  bool $includeDetails When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true. (optional)
     * @param  \DateTime $changedAfter Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  \DateTime $changedBefore Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  string $poItemState Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero. (optional)
     * @param  bool $isPOChanged When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false. (optional)
     * @param  string $purchaseOrderState Filters purchase orders based on the purchase order state. (optional)
     * @param  string $orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPurchaseOrdersAsyncWithHttpInfo($limit = null, $createdAfter = null, $createdBefore = null, $sortOrder = null, $nextToken = null, $includeDetails = null, $changedAfter = null, $changedBefore = null, $poItemState = null, $isPOChanged = null, $purchaseOrderState = null, $orderingVendorCode = null)
    {
        $returnType = '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersResponse';
        $request = $this->getPurchaseOrdersRequest($limit, $createdAfter, $createdBefore, $sortOrder, $nextToken, $includeDetails, $changedAfter, $changedBefore, $poItemState, $isPOChanged, $purchaseOrderState, $orderingVendorCode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPurchaseOrders'
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  \DateTime $createdAfter Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  \DateTime $createdBefore Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  string $sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param  string $nextToken Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)
     * @param  bool $includeDetails When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true. (optional)
     * @param  \DateTime $changedAfter Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  \DateTime $changedBefore Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param  string $poItemState Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero. (optional)
     * @param  bool $isPOChanged When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false. (optional)
     * @param  string $purchaseOrderState Filters purchase orders based on the purchase order state. (optional)
     * @param  string $orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPurchaseOrdersRequest($limit = null, $createdAfter = null, $createdBefore = null, $sortOrder = null, $nextToken = null, $includeDetails = null, $changedAfter = null, $changedBefore = null, $poItemState = null, $isPOChanged = null, $purchaseOrderState = null, $orderingVendorCode = null)
    {
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VendorOrdersApi.getPurchaseOrders, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VendorOrdersApi.getPurchaseOrders, must be bigger than or equal to 1.');
        }


        $resourcePath = '/vendor/orders/v1/purchaseOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($createdAfter)) {
            $createdAfter = ObjectSerializer::serializeCollection($createdAfter, '', true);
        }
        if ($createdAfter !== null) {
            $queryParams['createdAfter'] = $createdAfter;
        }
        // query params
        if (is_array($createdBefore)) {
            $createdBefore = ObjectSerializer::serializeCollection($createdBefore, '', true);
        }
        if ($createdBefore !== null) {
            $queryParams['createdBefore'] = $createdBefore;
        }
        // query params
        if (is_array($sortOrder)) {
            $sortOrder = ObjectSerializer::serializeCollection($sortOrder, '', true);
        }
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = $sortOrder;
        }
        // query params
        if (is_array($nextToken)) {
            $nextToken = ObjectSerializer::serializeCollection($nextToken, '', true);
        }
        if ($nextToken !== null) {
            $queryParams['nextToken'] = $nextToken;
        }
        // query params
        if (is_array($includeDetails)) {
            $includeDetails = ObjectSerializer::serializeCollection($includeDetails, '', true);
        }
        if ($includeDetails !== null) {
            $queryParams['includeDetails'] = $includeDetails;
        }
        // query params
        if (is_array($changedAfter)) {
            $changedAfter = ObjectSerializer::serializeCollection($changedAfter, '', true);
        }
        if ($changedAfter !== null) {
            $queryParams['changedAfter'] = $changedAfter;
        }
        // query params
        if (is_array($changedBefore)) {
            $changedBefore = ObjectSerializer::serializeCollection($changedBefore, '', true);
        }
        if ($changedBefore !== null) {
            $queryParams['changedBefore'] = $changedBefore;
        }
        // query params
        if (is_array($poItemState)) {
            $poItemState = ObjectSerializer::serializeCollection($poItemState, '', true);
        }
        if ($poItemState !== null) {
            $queryParams['poItemState'] = $poItemState;
        }
        // query params
        if (is_array($isPOChanged)) {
            $isPOChanged = ObjectSerializer::serializeCollection($isPOChanged, '', true);
        }
        if ($isPOChanged !== null) {
            $queryParams['isPOChanged'] = $isPOChanged;
        }
        // query params
        if (is_array($purchaseOrderState)) {
            $purchaseOrderState = ObjectSerializer::serializeCollection($purchaseOrderState, '', true);
        }
        if ($purchaseOrderState !== null) {
            $queryParams['purchaseOrderState'] = $purchaseOrderState;
        }
        // query params
        if (is_array($orderingVendorCode)) {
            $orderingVendorCode = ObjectSerializer::serializeCollection($orderingVendorCode, '', true);
        }
        if ($orderingVendorCode !== null) {
            $queryParams['orderingVendorCode'] = $orderingVendorCode;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'payload']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'payload'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPurchaseOrdersStatus
     *
     * @param int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param string $sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param string $nextToken Used for pagination when there are more purchase orders than the specified result size limit. (optional)
     * @param \DateTime $createdAfter Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $createdBefore Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $updatedAfter Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $updatedBefore Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param string $purchaseOrderNumber Provides purchase order status for the specified purchase order number. (optional)
     * @param string $purchaseOrderStatus Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses. (optional)
     * @param string $itemConfirmationStatus Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included. (optional)
     * @param string $itemReceiveStatus Filters purchase orders based on the purchase order&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included. (optional)
     * @param string $orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned. (optional)
     * @param string $shipToPartyId Filters purchase orders for a specific buyer&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#39;shipToParty.partyId&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer&#39;s warehouses used for vendor group purchase orders. (optional)
     *
     * @return \Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse
     * @throws \Webcom\Amazon\Rest\VendorOrdersApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getPurchaseOrdersStatus(
        $limit = null,
        $sortOrder = null,
        $nextToken = null,
        $createdAfter = null,
        $createdBefore = null,
        $updatedAfter = null,
        $updatedBefore = null,
        $purchaseOrderNumber = null,
        $purchaseOrderStatus = null,
        $itemConfirmationStatus = null,
        $itemReceiveStatus = null,
        $orderingVendorCode = null,
        $shipToPartyId = null
    ) {
        list($response) = $this->getPurchaseOrdersStatusWithHttpInfo(
            $limit,
            $sortOrder,
            $nextToken,
            $createdAfter,
            $createdBefore,
            $updatedAfter,
            $updatedBefore,
            $purchaseOrderNumber,
            $purchaseOrderStatus,
            $itemConfirmationStatus,
            $itemReceiveStatus,
            $orderingVendorCode,
            $shipToPartyId
        );
        return $response;
    }

    /**
     * Operation getPurchaseOrdersStatusWithHttpInfo
     *
     * @param int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param string $sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param string $nextToken Used for pagination when there are more purchase orders than the specified result size limit. (optional)
     * @param \DateTime $createdAfter Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $createdBefore Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $updatedAfter Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $updatedBefore Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param string $purchaseOrderNumber Provides purchase order status for the specified purchase order number. (optional)
     * @param string $purchaseOrderStatus Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses. (optional)
     * @param string $itemConfirmationStatus Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included. (optional)
     * @param string $itemReceiveStatus Filters purchase orders based on the purchase order&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included. (optional)
     * @param string $orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned. (optional)
     * @param string $shipToPartyId Filters purchase orders for a specific buyer&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#39;shipToParty.partyId&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer&#39;s warehouses used for vendor group purchase orders. (optional)
     *
     * @throws \Webcom\Amazon\Rest\VendorOrdersApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPurchaseOrdersStatusWithHttpInfo(
        $limit = null,
        $sortOrder = null,
        $nextToken = null,
        $createdAfter = null,
        $createdBefore = null,
        $updatedAfter = null,
        $updatedBefore = null,
        $purchaseOrderNumber = null,
        $purchaseOrderStatus = null,
        $itemConfirmationStatus = null,
        $itemReceiveStatus = null,
        $orderingVendorCode = null,
        $shipToPartyId = null
    ) {
        $request = $this->getPurchaseOrdersStatusRequest(
            $limit,
            $sortOrder,
            $nextToken,
            $createdAfter,
            $createdBefore,
            $updatedAfter,
            $updatedBefore,
            $purchaseOrderNumber,
            $purchaseOrderStatus,
            $itemConfirmationStatus,
            $itemReceiveStatus,
            $orderingVendorCode,
            $shipToPartyId
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPurchaseOrdersStatusAsync
     *
     *
     *
     * @param int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param string $sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param string $nextToken Used for pagination when there are more purchase orders than the specified result size limit. (optional)
     * @param \DateTime $createdAfter Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $createdBefore Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $updatedAfter Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $updatedBefore Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param string $purchaseOrderNumber Provides purchase order status for the specified purchase order number. (optional)
     * @param string $purchaseOrderStatus Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses. (optional)
     * @param string $itemConfirmationStatus Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included. (optional)
     * @param string $itemReceiveStatus Filters purchase orders based on the purchase order&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included. (optional)
     * @param string $orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned. (optional)
     * @param string $shipToPartyId Filters purchase orders for a specific buyer&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#39;shipToParty.partyId&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer&#39;s warehouses used for vendor group purchase orders. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPurchaseOrdersStatusAsync(
        $limit = null,
        $sortOrder = null,
        $nextToken = null,
        $createdAfter = null,
        $createdBefore = null,
        $updatedAfter = null,
        $updatedBefore = null,
        $purchaseOrderNumber = null,
        $purchaseOrderStatus = null,
        $itemConfirmationStatus = null,
        $itemReceiveStatus = null,
        $orderingVendorCode = null,
        $shipToPartyId = null
    ) {
        return $this->getPurchaseOrdersStatusAsyncWithHttpInfo(
            $limit,
            $sortOrder,
            $nextToken,
            $createdAfter,
            $createdBefore,
            $updatedAfter,
            $updatedBefore,
            $purchaseOrderNumber,
            $purchaseOrderStatus,
            $itemConfirmationStatus,
            $itemReceiveStatus,
            $orderingVendorCode,
            $shipToPartyId
        )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPurchaseOrdersStatusAsyncWithHttpInfo
     *
     *
     *
     * @param int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param string $sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param string $nextToken Used for pagination when there are more purchase orders than the specified result size limit. (optional)
     * @param \DateTime $createdAfter Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $createdBefore Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $updatedAfter Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $updatedBefore Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param string $purchaseOrderNumber Provides purchase order status for the specified purchase order number. (optional)
     * @param string $purchaseOrderStatus Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses. (optional)
     * @param string $itemConfirmationStatus Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included. (optional)
     * @param string $itemReceiveStatus Filters purchase orders based on the purchase order&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included. (optional)
     * @param string $orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned. (optional)
     * @param string $shipToPartyId Filters purchase orders for a specific buyer&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#39;shipToParty.partyId&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer&#39;s warehouses used for vendor group purchase orders. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPurchaseOrdersStatusAsyncWithHttpInfo(
        $limit = null,
        $sortOrder = null,
        $nextToken = null,
        $createdAfter = null,
        $createdBefore = null,
        $updatedAfter = null,
        $updatedBefore = null,
        $purchaseOrderNumber = null,
        $purchaseOrderStatus = null,
        $itemConfirmationStatus = null,
        $itemReceiveStatus = null,
        $orderingVendorCode = null,
        $shipToPartyId = null
    ) {
        $returnType = '\Webcom\Amazon\Rest\VendorOrdersApi\Model\GetPurchaseOrdersStatusResponse';
        $request = $this->getPurchaseOrdersStatusRequest(
            $limit,
            $sortOrder,
            $nextToken,
            $createdAfter,
            $createdBefore,
            $updatedAfter,
            $updatedBefore,
            $purchaseOrderNumber,
            $purchaseOrderStatus,
            $itemConfirmationStatus,
            $itemReceiveStatus,
            $orderingVendorCode,
            $shipToPartyId
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPurchaseOrdersStatus'
     *
     * @param int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param string $sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param string $nextToken Used for pagination when there are more purchase orders than the specified result size limit. (optional)
     * @param \DateTime $createdAfter Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $createdBefore Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $updatedAfter Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param \DateTime $updatedBefore Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param string $purchaseOrderNumber Provides purchase order status for the specified purchase order number. (optional)
     * @param string $purchaseOrderStatus Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses. (optional)
     * @param string $itemConfirmationStatus Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included. (optional)
     * @param string $itemReceiveStatus Filters purchase orders based on the purchase order&#39;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included. (optional)
     * @param string $orderingVendorCode Filters purchase orders based on the specified ordering vendor code. This value should be same as &#39;sellingParty.partyId&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned. (optional)
     * @param string $shipToPartyId Filters purchase orders for a specific buyer&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#39;shipToParty.partyId&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer&#39;s warehouses used for vendor group purchase orders. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPurchaseOrdersStatusRequest(
        $limit = null,
        $sortOrder = null,
        $nextToken = null,
        $createdAfter = null,
        $createdBefore = null,
        $updatedAfter = null,
        $updatedBefore = null,
        $purchaseOrderNumber = null,
        $purchaseOrderStatus = null,
        $itemConfirmationStatus = null,
        $itemReceiveStatus = null,
        $orderingVendorCode = null,
        $shipToPartyId = null
    ) {
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VendorOrdersApi.getPurchaseOrdersStatus, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VendorOrdersApi.getPurchaseOrdersStatus, must be bigger than or equal to 1.');
        }

        $resourcePath = '/vendor/orders/v1/purchaseOrdersStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($sortOrder)) {
            $sortOrder = ObjectSerializer::serializeCollection($sortOrder, '', true);
        }
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = $sortOrder;
        }
        // query params
        if (is_array($nextToken)) {
            $nextToken = ObjectSerializer::serializeCollection($nextToken, '', true);
        }
        if ($nextToken !== null) {
            $queryParams['nextToken'] = $nextToken;
        }
        // query params
        if (is_array($createdAfter)) {
            $createdAfter = ObjectSerializer::serializeCollection($createdAfter, '', true);
        }
        if ($createdAfter !== null) {
            $queryParams['createdAfter'] = $createdAfter;
        }
        // query params
        if (is_array($createdBefore)) {
            $createdBefore = ObjectSerializer::serializeCollection($createdBefore, '', true);
        }
        if ($createdBefore !== null) {
            $queryParams['createdBefore'] = $createdBefore;
        }
        // query params
        if (is_array($updatedAfter)) {
            $updatedAfter = ObjectSerializer::serializeCollection($updatedAfter, '', true);
        }
        if ($updatedAfter !== null) {
            $queryParams['updatedAfter'] = $updatedAfter;
        }
        // query params
        if (is_array($updatedBefore)) {
            $updatedBefore = ObjectSerializer::serializeCollection($updatedBefore, '', true);
        }
        if ($updatedBefore !== null) {
            $queryParams['updatedBefore'] = $updatedBefore;
        }
        // query params
        if (is_array($purchaseOrderNumber)) {
            $purchaseOrderNumber = ObjectSerializer::serializeCollection($purchaseOrderNumber, '', true);
        }
        if ($purchaseOrderNumber !== null) {
            $queryParams['purchaseOrderNumber'] = $purchaseOrderNumber;
        }
        // query params
        if (is_array($purchaseOrderStatus)) {
            $purchaseOrderStatus = ObjectSerializer::serializeCollection($purchaseOrderStatus, '', true);
        }
        if ($purchaseOrderStatus !== null) {
            $queryParams['purchaseOrderStatus'] = $purchaseOrderStatus;
        }
        // query params
        if (is_array($itemConfirmationStatus)) {
            $itemConfirmationStatus = ObjectSerializer::serializeCollection($itemConfirmationStatus, '', true);
        }
        if ($itemConfirmationStatus !== null) {
            $queryParams['itemConfirmationStatus'] = $itemConfirmationStatus;
        }
        // query params
        if (is_array($itemReceiveStatus)) {
            $itemReceiveStatus = ObjectSerializer::serializeCollection($itemReceiveStatus, '', true);
        }
        if ($itemReceiveStatus !== null) {
            $queryParams['itemReceiveStatus'] = $itemReceiveStatus;
        }
        // query params
        if (is_array($orderingVendorCode)) {
            $orderingVendorCode = ObjectSerializer::serializeCollection($orderingVendorCode, '', true);
        }
        if ($orderingVendorCode !== null) {
            $queryParams['orderingVendorCode'] = $orderingVendorCode;
        }
        // query params
        if (is_array($shipToPartyId)) {
            $shipToPartyId = ObjectSerializer::serializeCollection($shipToPartyId, '', true);
        }
        if ($shipToPartyId !== null) {
            $queryParams['shipToPartyId'] = $shipToPartyId;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitAcknowledgement
     *
     * @param  \Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementRequest $body body (required)
     *
     * @throws \Webcom\Amazon\Rest\VendorOrdersApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse
     */
    public function submitAcknowledgement($body)
    {
        list($response) = $this->submitAcknowledgementWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation submitAcknowledgementWithHttpInfo
     *
     * @param  \Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementRequest $body (required)
     *
     * @throws \Webcom\Amazon\Rest\VendorOrdersApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse|\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitAcknowledgementWithHttpInfo($body)
    {
        $request = $this->submitAcknowledgementRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation submitAcknowledgementAsync
     *
     *
     *
     * @param  \Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitAcknowledgementAsync($body)
    {
        return $this->submitAcknowledgementAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitAcknowledgementAsyncWithHttpInfo
     *
     *
     *
     * @param  \Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitAcknowledgementAsyncWithHttpInfo($body)
    {
        $returnType = '\Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementResponse';
        $request = $this->submitAcknowledgementRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitAcknowledgement'
     *
     * @param  \Webcom\Amazon\Rest\VendorOrdersApi\Model\SubmitAcknowledgementRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function submitAcknowledgementRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling submitAcknowledgement'
            );
        }

        $resourcePath = '/vendor/orders/v1/acknowledgements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
