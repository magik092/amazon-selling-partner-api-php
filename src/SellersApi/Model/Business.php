<?php
/**
 * Business
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\SellersApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Sellers
 *
 * The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\SellersApi\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * Business Class Doc Comment
 *
 * @category Class
 * @description Information about the seller&#39;s business. Certain fields may be omitted depending on the seller&#39;s &#x60;businessType&#x60;.
 * @package  Webcom\Amazon\Rest\SellersApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Business implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Business';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'registeredBusinessAddress' => '\Webcom\Amazon\Rest\SellersApi\Model\Address',
        'companyRegistrationNumber' => 'string',
        'companyTaxIdentificationNumber' => 'string',
        'nonLatinName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'registeredBusinessAddress' => null,
        'companyRegistrationNumber' => null,
        'companyTaxIdentificationNumber' => null,
        'nonLatinName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'registeredBusinessAddress' => 'registeredBusinessAddress',
        'companyRegistrationNumber' => 'companyRegistrationNumber',
        'companyTaxIdentificationNumber' => 'companyTaxIdentificationNumber',
        'nonLatinName' => 'nonLatinName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'registeredBusinessAddress' => 'setRegisteredBusinessAddress',
        'companyRegistrationNumber' => 'setCompanyRegistrationNumber',
        'companyTaxIdentificationNumber' => 'setCompanyTaxIdentificationNumber',
        'nonLatinName' => 'setNonLatinName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'registeredBusinessAddress' => 'getRegisteredBusinessAddress',
        'companyRegistrationNumber' => 'getCompanyRegistrationNumber',
        'companyTaxIdentificationNumber' => 'getCompanyTaxIdentificationNumber',
        'nonLatinName' => 'getNonLatinName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['registeredBusinessAddress'] = $data['registeredBusinessAddress'] ?? null;
        $this->container['companyRegistrationNumber'] = $data['companyRegistrationNumber'] ?? null;
        $this->container['companyTaxIdentificationNumber'] = $data['companyTaxIdentificationNumber'] ?? null;
        $this->container['nonLatinName'] = $data['nonLatinName'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['registeredBusinessAddress'] === null) {
            $invalidProperties[] = "'registeredBusinessAddress' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The registered business name.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets registeredBusinessAddress
     *
     * @return \Webcom\Amazon\Rest\SellersApi\Model\Address
     */
    public function getRegisteredBusinessAddress()
    {
        return $this->container['registeredBusinessAddress'];
    }

    /**
     * Sets registeredBusinessAddress
     *
     * @param \Webcom\Amazon\Rest\SellersApi\Model\Address $registeredBusinessAddress registeredBusinessAddress
     *
     * @return self
     */
    public function setRegisteredBusinessAddress($registeredBusinessAddress)
    {
        $this->container['registeredBusinessAddress'] = $registeredBusinessAddress;

        return $this;
    }

    /**
     * Gets companyRegistrationNumber
     *
     * @return string|null
     */
    public function getCompanyRegistrationNumber()
    {
        return $this->container['companyRegistrationNumber'];
    }

    /**
     * Sets companyRegistrationNumber
     *
     * @param string|null $companyRegistrationNumber The seller's company registration number, if applicable. This field will be absent for individual sellers and sole proprietorships.
     *
     * @return self
     */
    public function setCompanyRegistrationNumber($companyRegistrationNumber)
    {
        $this->container['companyRegistrationNumber'] = $companyRegistrationNumber;

        return $this;
    }

    /**
     * Gets companyTaxIdentificationNumber
     *
     * @return string|null
     */
    public function getCompanyTaxIdentificationNumber()
    {
        return $this->container['companyTaxIdentificationNumber'];
    }

    /**
     * Sets companyTaxIdentificationNumber
     *
     * @param string|null $companyTaxIdentificationNumber The seller's company tax identification number, if applicable. This field will be present for certain business types only, such as sole proprietorships.
     *
     * @return self
     */
    public function setCompanyTaxIdentificationNumber($companyTaxIdentificationNumber)
    {
        $this->container['companyTaxIdentificationNumber'] = $companyTaxIdentificationNumber;

        return $this;
    }

    /**
     * Gets nonLatinName
     *
     * @return string|null
     */
    public function getNonLatinName()
    {
        return $this->container['nonLatinName'];
    }

    /**
     * Sets nonLatinName
     *
     * @param string|null $nonLatinName The non-Latin script version of the registered business name, if applicable.
     *
     * @return self
     */
    public function setNonLatinName($nonLatinName)
    {
        $this->container['nonLatinName'] = $nonLatinName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


