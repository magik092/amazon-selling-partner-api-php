<?php
/**
 * DangerousGoodsDetailsV0
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\MerchantFulfillmentApiV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\MerchantFulfillmentApiV0\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * DangerousGoodsDetailsV0 Class Doc Comment
 *
 * @category Class
 * @description Details related to any dangerous goods/items that are being shipped.
 * @package  Webcom\Amazon\Rest\MerchantFulfillmentApiV0
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DangerousGoodsDetailsV0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DangerousGoodsDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unitedNationsRegulatoryId' => 'string',
        'transportationRegulatoryClass' => 'string',
        'packingGroup' => 'string',
        'packingInstruction' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'unitedNationsRegulatoryId' => null,
        'transportationRegulatoryClass' => null,
        'packingGroup' => null,
        'packingInstruction' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unitedNationsRegulatoryId' => 'UnitedNationsRegulatoryId',
        'transportationRegulatoryClass' => 'TransportationRegulatoryClass',
        'packingGroup' => 'PackingGroup',
        'packingInstruction' => 'PackingInstruction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unitedNationsRegulatoryId' => 'setUnitedNationsRegulatoryId',
        'transportationRegulatoryClass' => 'setTransportationRegulatoryClass',
        'packingGroup' => 'setPackingGroup',
        'packingInstruction' => 'setPackingInstruction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unitedNationsRegulatoryId' => 'getUnitedNationsRegulatoryId',
        'transportationRegulatoryClass' => 'getTransportationRegulatoryClass',
        'packingGroup' => 'getPackingGroup',
        'packingInstruction' => 'getPackingInstruction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PACKING_GROUP_I = 'I';
    const PACKING_GROUP_II = 'II';
    const PACKING_GROUP_III = 'III';
    const PACKING_INSTRUCTION_PI965_SECTION_IA = 'PI965_SECTION_IA';
    const PACKING_INSTRUCTION_PI965_SECTION_IB = 'PI965_SECTION_IB';
    const PACKING_INSTRUCTION_PI965_SECTION_II = 'PI965_SECTION_II';
    const PACKING_INSTRUCTION_PI966_SECTION_I = 'PI966_SECTION_I';
    const PACKING_INSTRUCTION_PI966_SECTION_II = 'PI966_SECTION_II';
    const PACKING_INSTRUCTION_PI967_SECTION_I = 'PI967_SECTION_I';
    const PACKING_INSTRUCTION_PI967_SECTION_II = 'PI967_SECTION_II';
    const PACKING_INSTRUCTION_PI968_SECTION_IA = 'PI968_SECTION_IA';
    const PACKING_INSTRUCTION_PI968_SECTION_IB = 'PI968_SECTION_IB';
    const PACKING_INSTRUCTION_PI969_SECTION_I = 'PI969_SECTION_I';
    const PACKING_INSTRUCTION_PI969_SECTION_II = 'PI969_SECTION_II';
    const PACKING_INSTRUCTION_PI970_SECTION_I = 'PI970_SECTION_I';
    const PACKING_INSTRUCTION_PI970_SECTION_II = 'PI970_SECTION_II';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackingGroupAllowableValues()
    {
        return [
            self::PACKING_GROUP_I,
            self::PACKING_GROUP_II,
            self::PACKING_GROUP_III,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackingInstructionAllowableValues()
    {
        return [
            self::PACKING_INSTRUCTION_PI965_SECTION_IA,
            self::PACKING_INSTRUCTION_PI965_SECTION_IB,
            self::PACKING_INSTRUCTION_PI965_SECTION_II,
            self::PACKING_INSTRUCTION_PI966_SECTION_I,
            self::PACKING_INSTRUCTION_PI966_SECTION_II,
            self::PACKING_INSTRUCTION_PI967_SECTION_I,
            self::PACKING_INSTRUCTION_PI967_SECTION_II,
            self::PACKING_INSTRUCTION_PI968_SECTION_IA,
            self::PACKING_INSTRUCTION_PI968_SECTION_IB,
            self::PACKING_INSTRUCTION_PI969_SECTION_I,
            self::PACKING_INSTRUCTION_PI969_SECTION_II,
            self::PACKING_INSTRUCTION_PI970_SECTION_I,
            self::PACKING_INSTRUCTION_PI970_SECTION_II,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unitedNationsRegulatoryId'] = $data['unitedNationsRegulatoryId'] ?? null;
        $this->container['transportationRegulatoryClass'] = $data['transportationRegulatoryClass'] ?? null;
        $this->container['packingGroup'] = $data['packingGroup'] ?? null;
        $this->container['packingInstruction'] = $data['packingInstruction'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['unitedNationsRegulatoryId']) && !preg_match("/^(UN|ID|NA)[0-9]{4}$/", $this->container['unitedNationsRegulatoryId'])) {
            $invalidProperties[] = "invalid value for 'unitedNationsRegulatoryId', must be conform to the pattern /^(UN|ID|NA)[0-9]{4}$/.";
        }

        if (!is_null($this->container['transportationRegulatoryClass']) && !preg_match("/^[1-9](\\.[1-9])?$/", $this->container['transportationRegulatoryClass'])) {
            $invalidProperties[] = "invalid value for 'transportationRegulatoryClass', must be conform to the pattern /^[1-9](\\.[1-9])?$/.";
        }

        $allowedValues = $this->getPackingGroupAllowableValues();
        if (!is_null($this->container['packingGroup']) && !in_array($this->container['packingGroup'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'packingGroup', must be one of '%s'",
                $this->container['packingGroup'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPackingInstructionAllowableValues();
        if (!is_null($this->container['packingInstruction']) && !in_array($this->container['packingInstruction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'packingInstruction', must be one of '%s'",
                $this->container['packingInstruction'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unitedNationsRegulatoryId
     *
     * @return string|null
     */
    public function getUnitedNationsRegulatoryId()
    {
        return $this->container['unitedNationsRegulatoryId'];
    }

    /**
     * Sets unitedNationsRegulatoryId
     *
     * @param string|null $unitedNationsRegulatoryId The specific UNID of the item being shipped.
     *
     * @return self
     */
    public function setUnitedNationsRegulatoryId($unitedNationsRegulatoryId)
    {

        if (!is_null($unitedNationsRegulatoryId) && (!preg_match("/^(UN|ID|NA)[0-9]{4}$/", $unitedNationsRegulatoryId))) {
            throw new \InvalidArgumentException("invalid value for $unitedNationsRegulatoryId when calling DangerousGoodsDetailsV0., must conform to the pattern /^(UN|ID|NA)[0-9]{4}$/.");
        }

        $this->container['unitedNationsRegulatoryId'] = $unitedNationsRegulatoryId;

        return $this;
    }

    /**
     * Gets transportationRegulatoryClass
     *
     * @return string|null
     */
    public function getTransportationRegulatoryClass()
    {
        return $this->container['transportationRegulatoryClass'];
    }

    /**
     * Sets transportationRegulatoryClass
     *
     * @param string|null $transportationRegulatoryClass The specific regulatory class  of the item being shipped.
     *
     * @return self
     */
    public function setTransportationRegulatoryClass($transportationRegulatoryClass)
    {

        if (!is_null($transportationRegulatoryClass) && (!preg_match("/^[1-9](\\.[1-9])?$/", $transportationRegulatoryClass))) {
            throw new \InvalidArgumentException("invalid value for $transportationRegulatoryClass when calling DangerousGoodsDetailsV0., must conform to the pattern /^[1-9](\\.[1-9])?$/.");
        }

        $this->container['transportationRegulatoryClass'] = $transportationRegulatoryClass;

        return $this;
    }

    /**
     * Gets packingGroup
     *
     * @return string|null
     */
    public function getPackingGroup()
    {
        return $this->container['packingGroup'];
    }

    /**
     * Sets packingGroup
     *
     * @param string|null $packingGroup The specific packaging group of the item being shipped.
     *
     * @return self
     */
    public function setPackingGroup($packingGroup)
    {
        $allowedValues = $this->getPackingGroupAllowableValues();
        if (!is_null($packingGroup) && !in_array($packingGroup, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'packingGroup', must be one of '%s'",
                    $packingGroup,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['packingGroup'] = $packingGroup;

        return $this;
    }

    /**
     * Gets packingInstruction
     *
     * @return string|null
     */
    public function getPackingInstruction()
    {
        return $this->container['packingInstruction'];
    }

    /**
     * Sets packingInstruction
     *
     * @param string|null $packingInstruction The specific packing instruction of the item being shipped.
     *
     * @return self
     */
    public function setPackingInstruction($packingInstruction)
    {
        $allowedValues = $this->getPackingInstructionAllowableValues();
        if (!is_null($packingInstruction) && !in_array($packingInstruction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'packingInstruction', must be one of '%s'",
                    $packingInstruction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['packingInstruction'] = $packingInstruction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


