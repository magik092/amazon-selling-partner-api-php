<?php
/**
 * FbaInboundApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\FulfillmentInboundApi20240320
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException;
use Webcom\Amazon\Rest\Configuration;
use Webcom\Amazon\Rest\HeaderSelector;
use Webcom\Amazon\Rest\ObjectSerializer;

/**
 * FbaInboundApi Class Doc Comment
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\FulfillmentInboundApi20240320
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FbaInboundApi
{
    /**
     * @var ClientInterface
     */
    protected $client;
    /**
     * @var Configuration
     */
    protected $config;
    /**
     * @var HeaderSelector
     */
    protected $headerSelector;
    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelInboundPlan
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelInboundPlanResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function cancelInboundPlan($inboundPlanId)
    {
        [$response] = $this->cancelInboundPlanWithHttpInfo($inboundPlanId);
        return $response;
    }

    /**
     * Operation cancelInboundPlanWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelInboundPlanResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function cancelInboundPlanWithHttpInfo($inboundPlanId)
    {
        $request = $this->cancelInboundPlanRequest($inboundPlanId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelInboundPlanResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelInboundPlanResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelInboundPlanResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelInboundPlanResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelInboundPlanAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function cancelInboundPlanAsync($inboundPlanId)
    {
        return $this->cancelInboundPlanAsyncWithHttpInfo($inboundPlanId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelInboundPlanAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function cancelInboundPlanAsyncWithHttpInfo($inboundPlanId)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelInboundPlanResponse20240320';
        $request = $this->cancelInboundPlanRequest($inboundPlanId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelInboundPlan'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function cancelInboundPlanRequest($inboundPlanId)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling cancelInboundPlan'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.cancelInboundPlan, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.cancelInboundPlan, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException("invalid value for \"inboundPlanId\" when calling FbaInboundApi.cancelInboundPlan, must conform to the pattern /^[a-zA-Z0-9-]*$/.");
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/cancellation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelSelfShipAppointment
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelSelfShipAppointmentRequest20240320 $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelSelfShipAppointmentResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function cancelSelfShipAppointment($inboundPlanId, $shipmentId, $body)
    {
        [$response] = $this->cancelSelfShipAppointmentWithHttpInfo($inboundPlanId, $shipmentId, $body);
        return $response;
    }

    /**
     * Operation cancelSelfShipAppointmentWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelSelfShipAppointmentRequest20240320 $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelSelfShipAppointmentResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function cancelSelfShipAppointmentWithHttpInfo($inboundPlanId, $shipmentId, $body)
    {
        $request = $this->cancelSelfShipAppointmentRequest($inboundPlanId, $shipmentId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelSelfShipAppointmentResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelSelfShipAppointmentResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelSelfShipAppointmentResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelSelfShipAppointmentResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelSelfShipAppointmentAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelSelfShipAppointmentRequest20240320 $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function cancelSelfShipAppointmentAsync($inboundPlanId, $shipmentId, $body)
    {
        return $this->cancelSelfShipAppointmentAsyncWithHttpInfo($inboundPlanId, $shipmentId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelSelfShipAppointmentAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelSelfShipAppointmentRequest20240320 $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function cancelSelfShipAppointmentAsyncWithHttpInfo($inboundPlanId, $shipmentId, $body)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelSelfShipAppointmentResponse20240320';
        $request = $this->cancelSelfShipAppointmentRequest($inboundPlanId, $shipmentId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelSelfShipAppointment'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CancelSelfShipAppointmentRequest20240320 $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function cancelSelfShipAppointmentRequest($inboundPlanId, $shipmentId, $body)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling cancelSelfShipAppointment'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.cancelSelfShipAppointment, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.cancelSelfShipAppointment, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.cancelSelfShipAppointment, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling cancelSelfShipAppointment'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.cancelSelfShipAppointment, must be smaller than or equal to 38.');
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.cancelSelfShipAppointment, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.cancelSelfShipAppointment, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling cancelSelfShipAppointment'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentCancellation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmDeliveryWindowOptions
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to confirm the delivery window option for. (required)
     * @param string $deliveryWindowOptionId The id of the delivery window option to be confirmed. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmDeliveryWindowOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function confirmDeliveryWindowOptions($inboundPlanId, $shipmentId, $deliveryWindowOptionId)
    {
        [$response] = $this->confirmDeliveryWindowOptionsWithHttpInfo($inboundPlanId, $shipmentId, $deliveryWindowOptionId);
        return $response;
    }

    /**
     * Operation confirmDeliveryWindowOptionsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to confirm the delivery window option for. (required)
     * @param string $deliveryWindowOptionId The id of the delivery window option to be confirmed. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmDeliveryWindowOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function confirmDeliveryWindowOptionsWithHttpInfo($inboundPlanId, $shipmentId, $deliveryWindowOptionId)
    {
        $request = $this->confirmDeliveryWindowOptionsRequest($inboundPlanId, $shipmentId, $deliveryWindowOptionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmDeliveryWindowOptionsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmDeliveryWindowOptionsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmDeliveryWindowOptionsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmDeliveryWindowOptionsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confirmDeliveryWindowOptionsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to confirm the delivery window option for. (required)
     * @param string $deliveryWindowOptionId The id of the delivery window option to be confirmed. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function confirmDeliveryWindowOptionsAsync($inboundPlanId, $shipmentId, $deliveryWindowOptionId)
    {
        return $this->confirmDeliveryWindowOptionsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $deliveryWindowOptionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmDeliveryWindowOptionsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to confirm the delivery window option for. (required)
     * @param string $deliveryWindowOptionId The id of the delivery window option to be confirmed. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function confirmDeliveryWindowOptionsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $deliveryWindowOptionId)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmDeliveryWindowOptionsResponse20240320';
        $request = $this->confirmDeliveryWindowOptionsRequest($inboundPlanId, $shipmentId, $deliveryWindowOptionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmDeliveryWindowOptions'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to confirm the delivery window option for. (required)
     * @param string $deliveryWindowOptionId The id of the delivery window option to be confirmed. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function confirmDeliveryWindowOptionsRequest($inboundPlanId, $shipmentId, $deliveryWindowOptionId)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling confirmDeliveryWindowOptions'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.confirmDeliveryWindowOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.confirmDeliveryWindowOptions, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.confirmDeliveryWindowOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling confirmDeliveryWindowOptions'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.confirmDeliveryWindowOptions, must be smaller than or equal to 38.');
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.confirmDeliveryWindowOptions, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.confirmDeliveryWindowOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'deliveryWindowOptionId' is set
        if ($deliveryWindowOptionId === null || (is_array($deliveryWindowOptionId) && count($deliveryWindowOptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deliveryWindowOptionId when calling confirmDeliveryWindowOptions'
            );
        }
        if (strlen($deliveryWindowOptionId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$deliveryWindowOptionId" when calling FbaInboundApi.confirmDeliveryWindowOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($deliveryWindowOptionId) < 36) {
            throw new \InvalidArgumentException(
                'invalid length for "$deliveryWindowOptionId" when calling FbaInboundApi.confirmDeliveryWindowOptions, must be bigger than or equal to 36.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $deliveryWindowOptionId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"deliveryWindowOptionId\" when calling FbaInboundApi.confirmDeliveryWindowOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }
        // path params
        if ($deliveryWindowOptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryWindowOptionId' . '}',
                ObjectSerializer::toPathValue($deliveryWindowOptionId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmPackingOption
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingOptionId Identifier of a packing option. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmPackingOptionResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function confirmPackingOption($inboundPlanId, $packingOptionId)
    {
        [$response] = $this->confirmPackingOptionWithHttpInfo($inboundPlanId, $packingOptionId);
        return $response;
    }

    /**
     * Operation confirmPackingOptionWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingOptionId Identifier of a packing option. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmPackingOptionResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function confirmPackingOptionWithHttpInfo($inboundPlanId, $packingOptionId)
    {
        $request = $this->confirmPackingOptionRequest($inboundPlanId, $packingOptionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmPackingOptionResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmPackingOptionResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmPackingOptionResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmPackingOptionResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confirmPackingOptionAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingOptionId Identifier of a packing option. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function confirmPackingOptionAsync($inboundPlanId, $packingOptionId)
    {
        return $this->confirmPackingOptionAsyncWithHttpInfo($inboundPlanId, $packingOptionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmPackingOptionAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingOptionId Identifier of a packing option. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function confirmPackingOptionAsyncWithHttpInfo($inboundPlanId, $packingOptionId)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmPackingOptionResponse20240320';
        $request = $this->confirmPackingOptionRequest($inboundPlanId, $packingOptionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmPackingOption'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingOptionId Identifier of a packing option. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function confirmPackingOptionRequest($inboundPlanId, $packingOptionId)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling confirmPackingOption'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.confirmPackingOption, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.confirmPackingOption, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.confirmPackingOption, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'packingOptionId' is set
        if ($packingOptionId === null || (is_array($packingOptionId) && count($packingOptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packingOptionId when calling confirmPackingOption'
            );
        }
        if (strlen($packingOptionId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$packingOptionId" when calling FbaInboundApi.confirmPackingOption, must be smaller than or equal to 38.');
        }
        if (strlen($packingOptionId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$packingOptionId" when calling FbaInboundApi.confirmPackingOption, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $packingOptionId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"packingOptionId\" when calling FbaInboundApi.confirmPackingOption, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($packingOptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'packingOptionId' . '}',
                ObjectSerializer::toPathValue($packingOptionId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmPlacementOption
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $placementOptionId The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmPlacementOptionResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function confirmPlacementOption($inboundPlanId, $placementOptionId)
    {
        [$response] = $this->confirmPlacementOptionWithHttpInfo($inboundPlanId, $placementOptionId);
        return $response;
    }

    /**
     * Operation confirmPlacementOptionWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $placementOptionId The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmPlacementOptionResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function confirmPlacementOptionWithHttpInfo($inboundPlanId, $placementOptionId)
    {
        $request = $this->confirmPlacementOptionRequest($inboundPlanId, $placementOptionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmPlacementOptionResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmPlacementOptionResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmPlacementOptionResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmPlacementOptionResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confirmPlacementOptionAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $placementOptionId The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function confirmPlacementOptionAsync($inboundPlanId, $placementOptionId)
    {
        return $this->confirmPlacementOptionAsyncWithHttpInfo($inboundPlanId, $placementOptionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmPlacementOptionAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $placementOptionId The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function confirmPlacementOptionAsyncWithHttpInfo($inboundPlanId, $placementOptionId)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmPlacementOptionResponse20240320';
        $request = $this->confirmPlacementOptionRequest($inboundPlanId, $placementOptionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmPlacementOption'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $placementOptionId The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function confirmPlacementOptionRequest($inboundPlanId, $placementOptionId)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling confirmPlacementOption'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.confirmPlacementOption, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.confirmPlacementOption, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.confirmPlacementOption, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'placementOptionId' is set
        if ($placementOptionId === null || (is_array($placementOptionId) && count($placementOptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $placementOptionId when calling confirmPlacementOption'
            );
        }
        if (strlen($placementOptionId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$placementOptionId" when calling FbaInboundApi.confirmPlacementOption, must be smaller than or equal to 38.');
        }
        if (strlen($placementOptionId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$placementOptionId" when calling FbaInboundApi.confirmPlacementOption, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $placementOptionId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"placementOptionId\" when calling FbaInboundApi.confirmPlacementOption, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($placementOptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'placementOptionId' . '}',
                ObjectSerializer::toPathValue($placementOptionId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmShipmentContentUpdatePreview
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $contentUpdatePreviewId Identifier of a content update preview. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmShipmentContentUpdatePreviewResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function confirmShipmentContentUpdatePreview($inboundPlanId, $shipmentId, $contentUpdatePreviewId)
    {
        [$response] = $this->confirmShipmentContentUpdatePreviewWithHttpInfo($inboundPlanId, $shipmentId, $contentUpdatePreviewId);
        return $response;
    }

    /**
     * Operation confirmShipmentContentUpdatePreviewWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $contentUpdatePreviewId Identifier of a content update preview. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmShipmentContentUpdatePreviewResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function confirmShipmentContentUpdatePreviewWithHttpInfo($inboundPlanId, $shipmentId, $contentUpdatePreviewId)
    {
        $request = $this->confirmShipmentContentUpdatePreviewRequest($inboundPlanId, $shipmentId, $contentUpdatePreviewId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmShipmentContentUpdatePreviewResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmShipmentContentUpdatePreviewResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmShipmentContentUpdatePreviewResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmShipmentContentUpdatePreviewResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confirmShipmentContentUpdatePreviewAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $contentUpdatePreviewId Identifier of a content update preview. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function confirmShipmentContentUpdatePreviewAsync($inboundPlanId, $shipmentId, $contentUpdatePreviewId)
    {
        return $this->confirmShipmentContentUpdatePreviewAsyncWithHttpInfo($inboundPlanId, $shipmentId, $contentUpdatePreviewId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmShipmentContentUpdatePreviewAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $contentUpdatePreviewId Identifier of a content update preview. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function confirmShipmentContentUpdatePreviewAsyncWithHttpInfo($inboundPlanId, $shipmentId, $contentUpdatePreviewId)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmShipmentContentUpdatePreviewResponse20240320';
        $request = $this->confirmShipmentContentUpdatePreviewRequest($inboundPlanId, $shipmentId, $contentUpdatePreviewId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmShipmentContentUpdatePreview'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $contentUpdatePreviewId Identifier of a content update preview. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function confirmShipmentContentUpdatePreviewRequest($inboundPlanId, $shipmentId, $contentUpdatePreviewId)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling confirmShipmentContentUpdatePreview'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling confirmShipmentContentUpdatePreview'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$shipmentId" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$shipmentId" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'contentUpdatePreviewId' is set
        if ($contentUpdatePreviewId === null || (is_array($contentUpdatePreviewId) && count($contentUpdatePreviewId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentUpdatePreviewId when calling confirmShipmentContentUpdatePreview'
            );
        }
        if (strlen($contentUpdatePreviewId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$contentUpdatePreviewId" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must be smaller than or equal to 38.'
            );
        }
        if (strlen($contentUpdatePreviewId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$contentUpdatePreviewId" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $contentUpdatePreviewId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"contentUpdatePreviewId\" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }
        // path params
        if ($contentUpdatePreviewId !== null) {
            $resourcePath = str_replace(
                '{' . 'contentUpdatePreviewId' . '}',
                ObjectSerializer::toPathValue($contentUpdatePreviewId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmTransportationOptions
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmTransportationOptionsRequest20240320 $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmTransportationOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function confirmTransportationOptions($inboundPlanId, $body)
    {
        [$response] = $this->confirmTransportationOptionsWithHttpInfo($inboundPlanId, $body);
        return $response;
    }

    /**
     * Operation confirmTransportationOptionsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmTransportationOptionsRequest20240320 $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmTransportationOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function confirmTransportationOptionsWithHttpInfo($inboundPlanId, $body)
    {
        $request = $this->confirmTransportationOptionsRequest($inboundPlanId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmTransportationOptionsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmTransportationOptionsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmTransportationOptionsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmTransportationOptionsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confirmTransportationOptionsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmTransportationOptionsRequest20240320 $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function confirmTransportationOptionsAsync($inboundPlanId, $body)
    {
        return $this->confirmTransportationOptionsAsyncWithHttpInfo($inboundPlanId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmTransportationOptionsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmTransportationOptionsRequest20240320 $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function confirmTransportationOptionsAsyncWithHttpInfo($inboundPlanId, $body)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmTransportationOptionsResponse20240320';
        $request = $this->confirmTransportationOptionsRequest($inboundPlanId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmTransportationOptions'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ConfirmTransportationOptionsRequest20240320 $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function confirmTransportationOptionsRequest($inboundPlanId, $body)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling confirmTransportationOptions'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.confirmTransportationOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.confirmTransportationOptions, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.confirmTransportationOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling confirmTransportationOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createInboundPlan
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateInboundPlanRequest20240320 $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateInboundPlanResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     */
    public function createInboundPlan($body)
    {
        [$response] = $this->createInboundPlanWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createInboundPlanWithHttpInfo
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateInboundPlanRequest20240320 $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateInboundPlanResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInboundPlanWithHttpInfo($body)
    {
        $request = $this->createInboundPlanRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateInboundPlanResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateInboundPlanResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateInboundPlanResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateInboundPlanResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInboundPlanAsync
     *
     *
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateInboundPlanRequest20240320 $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInboundPlanAsync($body)
    {
        return $this->createInboundPlanAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInboundPlanAsyncWithHttpInfo
     *
     *
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateInboundPlanRequest20240320 $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInboundPlanAsyncWithHttpInfo($body)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateInboundPlanResponse20240320';
        $request = $this->createInboundPlanRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInboundPlan'
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateInboundPlanRequest20240320 $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createInboundPlanRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createInboundPlan'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMarketplaceItemLabels
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateMarketplaceItemLabelsRequest20240320 $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateMarketplaceItemLabelsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     */
    public function createMarketplaceItemLabels($body)
    {
        [$response] = $this->createMarketplaceItemLabelsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createMarketplaceItemLabelsWithHttpInfo
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateMarketplaceItemLabelsRequest20240320 $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateMarketplaceItemLabelsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMarketplaceItemLabelsWithHttpInfo($body)
    {
        $request = $this->createMarketplaceItemLabelsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateMarketplaceItemLabelsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateMarketplaceItemLabelsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateMarketplaceItemLabelsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateMarketplaceItemLabelsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMarketplaceItemLabelsAsync
     *
     *
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateMarketplaceItemLabelsRequest20240320 $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMarketplaceItemLabelsAsync($body)
    {
        return $this->createMarketplaceItemLabelsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMarketplaceItemLabelsAsyncWithHttpInfo
     *
     *
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateMarketplaceItemLabelsRequest20240320 $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMarketplaceItemLabelsAsyncWithHttpInfo($body)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateMarketplaceItemLabelsResponse20240320';
        $request = $this->createMarketplaceItemLabelsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMarketplaceItemLabels'
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\CreateMarketplaceItemLabelsRequest20240320 $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createMarketplaceItemLabelsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createMarketplaceItemLabels'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/items/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateDeliveryWindowOptions
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to generate delivery window options for. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateDeliveryWindowOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function generateDeliveryWindowOptions($inboundPlanId, $shipmentId)
    {
        [$response] = $this->generateDeliveryWindowOptionsWithHttpInfo($inboundPlanId, $shipmentId);
        return $response;
    }

    /**
     * Operation generateDeliveryWindowOptionsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to generate delivery window options for. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateDeliveryWindowOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function generateDeliveryWindowOptionsWithHttpInfo($inboundPlanId, $shipmentId)
    {
        $request = $this->generateDeliveryWindowOptionsRequest($inboundPlanId, $shipmentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateDeliveryWindowOptionsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateDeliveryWindowOptionsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateDeliveryWindowOptionsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateDeliveryWindowOptionsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateDeliveryWindowOptionsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to generate delivery window options for. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function generateDeliveryWindowOptionsAsync($inboundPlanId, $shipmentId)
    {
        return $this->generateDeliveryWindowOptionsAsyncWithHttpInfo($inboundPlanId, $shipmentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateDeliveryWindowOptionsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to generate delivery window options for. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function generateDeliveryWindowOptionsAsyncWithHttpInfo($inboundPlanId, $shipmentId)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateDeliveryWindowOptionsResponse20240320';
        $request = $this->generateDeliveryWindowOptionsRequest($inboundPlanId, $shipmentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateDeliveryWindowOptions'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to generate delivery window options for. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function generateDeliveryWindowOptionsRequest($inboundPlanId, $shipmentId)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling generateDeliveryWindowOptions'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.generateDeliveryWindowOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.generateDeliveryWindowOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.generateDeliveryWindowOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling generateDeliveryWindowOptions'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.generateDeliveryWindowOptions, must be smaller than or equal to 38.');
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.generateDeliveryWindowOptions, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.generateDeliveryWindowOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generatePackingOptions
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePackingOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function generatePackingOptions($inboundPlanId)
    {
        [$response] = $this->generatePackingOptionsWithHttpInfo($inboundPlanId);
        return $response;
    }

    /**
     * Operation generatePackingOptionsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePackingOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function generatePackingOptionsWithHttpInfo($inboundPlanId)
    {
        $request = $this->generatePackingOptionsRequest($inboundPlanId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePackingOptionsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePackingOptionsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePackingOptionsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePackingOptionsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generatePackingOptionsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function generatePackingOptionsAsync($inboundPlanId)
    {
        return $this->generatePackingOptionsAsyncWithHttpInfo($inboundPlanId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generatePackingOptionsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function generatePackingOptionsAsyncWithHttpInfo($inboundPlanId)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePackingOptionsResponse20240320';
        $request = $this->generatePackingOptionsRequest($inboundPlanId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generatePackingOptions'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function generatePackingOptionsRequest($inboundPlanId)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling generatePackingOptions'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.generatePackingOptions, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.generatePackingOptions, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.generatePackingOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generatePlacementOptions
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePlacementOptionsRequest20240320 $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePlacementOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function generatePlacementOptions($inboundPlanId, $body)
    {
        [$response] = $this->generatePlacementOptionsWithHttpInfo($inboundPlanId, $body);
        return $response;
    }

    /**
     * Operation generatePlacementOptionsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePlacementOptionsRequest20240320 $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePlacementOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function generatePlacementOptionsWithHttpInfo($inboundPlanId, $body)
    {
        $request = $this->generatePlacementOptionsRequest($inboundPlanId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePlacementOptionsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePlacementOptionsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePlacementOptionsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePlacementOptionsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generatePlacementOptionsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePlacementOptionsRequest20240320 $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function generatePlacementOptionsAsync($inboundPlanId, $body)
    {
        return $this->generatePlacementOptionsAsyncWithHttpInfo($inboundPlanId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generatePlacementOptionsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePlacementOptionsRequest20240320 $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function generatePlacementOptionsAsyncWithHttpInfo($inboundPlanId, $body)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePlacementOptionsResponse20240320';
        $request = $this->generatePlacementOptionsRequest($inboundPlanId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generatePlacementOptions'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GeneratePlacementOptionsRequest20240320 $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function generatePlacementOptionsRequest($inboundPlanId, $body)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling generatePlacementOptions'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.generatePlacementOptions, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.generatePlacementOptions, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.generatePlacementOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling generatePlacementOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateSelfShipAppointmentSlots
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateSelfShipAppointmentSlotsRequest20240320 $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateSelfShipAppointmentSlotsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function generateSelfShipAppointmentSlots($inboundPlanId, $shipmentId, $body)
    {
        [$response] = $this->generateSelfShipAppointmentSlotsWithHttpInfo($inboundPlanId, $shipmentId, $body);
        return $response;
    }

    /**
     * Operation generateSelfShipAppointmentSlotsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateSelfShipAppointmentSlotsRequest20240320 $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateSelfShipAppointmentSlotsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function generateSelfShipAppointmentSlotsWithHttpInfo($inboundPlanId, $shipmentId, $body)
    {
        $request = $this->generateSelfShipAppointmentSlotsRequest($inboundPlanId, $shipmentId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 201:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateSelfShipAppointmentSlotsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateSelfShipAppointmentSlotsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateSelfShipAppointmentSlotsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateSelfShipAppointmentSlotsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateSelfShipAppointmentSlotsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateSelfShipAppointmentSlotsRequest20240320 $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function generateSelfShipAppointmentSlotsAsync($inboundPlanId, $shipmentId, $body)
    {
        return $this->generateSelfShipAppointmentSlotsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateSelfShipAppointmentSlotsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateSelfShipAppointmentSlotsRequest20240320 $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function generateSelfShipAppointmentSlotsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $body)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateSelfShipAppointmentSlotsResponse20240320';
        $request = $this->generateSelfShipAppointmentSlotsRequest($inboundPlanId, $shipmentId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateSelfShipAppointmentSlots'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateSelfShipAppointmentSlotsRequest20240320 $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function generateSelfShipAppointmentSlotsRequest($inboundPlanId, $shipmentId, $body)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling generateSelfShipAppointmentSlots'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.generateSelfShipAppointmentSlots, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.generateSelfShipAppointmentSlots, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.generateSelfShipAppointmentSlots, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling generateSelfShipAppointmentSlots'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$shipmentId" when calling FbaInboundApi.generateSelfShipAppointmentSlots, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$shipmentId" when calling FbaInboundApi.generateSelfShipAppointmentSlots, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.generateSelfShipAppointmentSlots, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling generateSelfShipAppointmentSlots'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateShipmentContentUpdatePreviews
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateShipmentContentUpdatePreviewsRequest20240320 $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateShipmentContentUpdatePreviewsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function generateShipmentContentUpdatePreviews($inboundPlanId, $shipmentId, $body)
    {
        [$response] = $this->generateShipmentContentUpdatePreviewsWithHttpInfo($inboundPlanId, $shipmentId, $body);
        return $response;
    }

    /**
     * Operation generateShipmentContentUpdatePreviewsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateShipmentContentUpdatePreviewsRequest20240320 $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateShipmentContentUpdatePreviewsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function generateShipmentContentUpdatePreviewsWithHttpInfo($inboundPlanId, $shipmentId, $body)
    {
        $request = $this->generateShipmentContentUpdatePreviewsRequest($inboundPlanId, $shipmentId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateShipmentContentUpdatePreviewsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateShipmentContentUpdatePreviewsResponse20240320',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateShipmentContentUpdatePreviewsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateShipmentContentUpdatePreviewsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateShipmentContentUpdatePreviewsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateShipmentContentUpdatePreviewsRequest20240320 $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function generateShipmentContentUpdatePreviewsAsync($inboundPlanId, $shipmentId, $body)
    {
        return $this->generateShipmentContentUpdatePreviewsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateShipmentContentUpdatePreviewsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateShipmentContentUpdatePreviewsRequest20240320 $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function generateShipmentContentUpdatePreviewsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $body)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateShipmentContentUpdatePreviewsResponse20240320';
        $request = $this->generateShipmentContentUpdatePreviewsRequest($inboundPlanId, $shipmentId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateShipmentContentUpdatePreviews'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateShipmentContentUpdatePreviewsRequest20240320 $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function generateShipmentContentUpdatePreviewsRequest($inboundPlanId, $shipmentId, $body)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling generateShipmentContentUpdatePreviews'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.generateShipmentContentUpdatePreviews, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.generateShipmentContentUpdatePreviews, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.generateShipmentContentUpdatePreviews, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling generateShipmentContentUpdatePreviews'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$shipmentId" when calling FbaInboundApi.generateShipmentContentUpdatePreviews, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$shipmentId" when calling FbaInboundApi.generateShipmentContentUpdatePreviews, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.generateShipmentContentUpdatePreviews, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling generateShipmentContentUpdatePreviews'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateTransportationOptions
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateTransportationOptionsRequest20240320 $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateTransportationOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function generateTransportationOptions($inboundPlanId, $body)
    {
        [$response] = $this->generateTransportationOptionsWithHttpInfo($inboundPlanId, $body);
        return $response;
    }

    /**
     * Operation generateTransportationOptionsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateTransportationOptionsRequest20240320 $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateTransportationOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function generateTransportationOptionsWithHttpInfo($inboundPlanId, $body)
    {
        $request = $this->generateTransportationOptionsRequest($inboundPlanId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateTransportationOptionsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateTransportationOptionsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateTransportationOptionsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateTransportationOptionsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateTransportationOptionsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateTransportationOptionsRequest20240320 $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function generateTransportationOptionsAsync($inboundPlanId, $body)
    {
        return $this->generateTransportationOptionsAsyncWithHttpInfo($inboundPlanId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateTransportationOptionsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateTransportationOptionsRequest20240320 $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function generateTransportationOptionsAsyncWithHttpInfo($inboundPlanId, $body)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateTransportationOptionsResponse20240320';
        $request = $this->generateTransportationOptionsRequest($inboundPlanId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateTransportationOptions'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GenerateTransportationOptionsRequest20240320 $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function generateTransportationOptionsRequest($inboundPlanId, $body)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling generateTransportationOptions'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.generateTransportationOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.generateTransportationOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.generateTransportationOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling generateTransportationOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeliveryChallanDocument
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GetDeliveryChallanDocumentResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function getDeliveryChallanDocument($inboundPlanId, $shipmentId)
    {
        [$response] = $this->getDeliveryChallanDocumentWithHttpInfo($inboundPlanId, $shipmentId);
        return $response;
    }

    /**
     * Operation getDeliveryChallanDocumentWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GetDeliveryChallanDocumentResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function getDeliveryChallanDocumentWithHttpInfo($inboundPlanId, $shipmentId)
    {
        $request = $this->getDeliveryChallanDocumentRequest($inboundPlanId, $shipmentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GetDeliveryChallanDocumentResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GetDeliveryChallanDocumentResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GetDeliveryChallanDocumentResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GetDeliveryChallanDocumentResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeliveryChallanDocumentAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getDeliveryChallanDocumentAsync($inboundPlanId, $shipmentId)
    {
        return $this->getDeliveryChallanDocumentAsyncWithHttpInfo($inboundPlanId, $shipmentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeliveryChallanDocumentAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getDeliveryChallanDocumentAsyncWithHttpInfo($inboundPlanId, $shipmentId)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GetDeliveryChallanDocumentResponse20240320';
        $request = $this->getDeliveryChallanDocumentRequest($inboundPlanId, $shipmentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeliveryChallanDocument'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function getDeliveryChallanDocumentRequest($inboundPlanId, $shipmentId)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling getDeliveryChallanDocument'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.getDeliveryChallanDocument, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.getDeliveryChallanDocument, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.getDeliveryChallanDocument, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling getDeliveryChallanDocument'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.getDeliveryChallanDocument, must be smaller than or equal to 38.');
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.getDeliveryChallanDocument, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.getDeliveryChallanDocument, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryChallanDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInboundOperationStatus
     *
     * @param string $operationId Identifier of an asynchronous operation. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\InboundOperationStatus20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function getInboundOperationStatus($operationId)
    {
        [$response] = $this->getInboundOperationStatusWithHttpInfo($operationId);
        return $response;
    }

    /**
     * Operation getInboundOperationStatusWithHttpInfo
     *
     * @param string $operationId Identifier of an asynchronous operation. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\InboundOperationStatus20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function getInboundOperationStatusWithHttpInfo($operationId)
    {
        $request = $this->getInboundOperationStatusRequest($operationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\InboundOperationStatus20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\InboundOperationStatus20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\InboundOperationStatus20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\InboundOperationStatus20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInboundOperationStatusAsync
     *
     *
     *
     * @param string $operationId Identifier of an asynchronous operation. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getInboundOperationStatusAsync($operationId)
    {
        return $this->getInboundOperationStatusAsyncWithHttpInfo($operationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInboundOperationStatusAsyncWithHttpInfo
     *
     *
     *
     * @param string $operationId Identifier of an asynchronous operation. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getInboundOperationStatusAsyncWithHttpInfo($operationId)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\InboundOperationStatus20240320';
        $request = $this->getInboundOperationStatusRequest($operationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInboundOperationStatus'
     *
     * @param string $operationId Identifier of an asynchronous operation. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function getInboundOperationStatusRequest($operationId)
    {
        // verify the required parameter 'operationId' is set
        if ($operationId === null || (is_array($operationId) && count($operationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operationId when calling getInboundOperationStatus'
            );
        }
        if (strlen($operationId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$operationId" when calling FbaInboundApi.getInboundOperationStatus, must be smaller than or equal to 38.');
        }
        if (strlen($operationId) < 36) {
            throw new \InvalidArgumentException('invalid length for "$operationId" when calling FbaInboundApi.getInboundOperationStatus, must be bigger than or equal to 36.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $operationId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"operationId\" when calling FbaInboundApi.getInboundOperationStatus, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/operations/{operationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($operationId !== null) {
            $resourcePath = str_replace(
                '{' . 'operationId' . '}',
                ObjectSerializer::toPathValue($operationId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInboundPlan
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\InboundPlan20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function getInboundPlan($inboundPlanId)
    {
        [$response] = $this->getInboundPlanWithHttpInfo($inboundPlanId);
        return $response;
    }

    /**
     * Operation getInboundPlanWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\InboundPlan20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function getInboundPlanWithHttpInfo($inboundPlanId)
    {
        $request = $this->getInboundPlanRequest($inboundPlanId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\InboundPlan20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\InboundPlan20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\InboundPlan20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\InboundPlan20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInboundPlanAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getInboundPlanAsync($inboundPlanId)
    {
        return $this->getInboundPlanAsyncWithHttpInfo($inboundPlanId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInboundPlanAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getInboundPlanAsyncWithHttpInfo($inboundPlanId)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\InboundPlan20240320';
        $request = $this->getInboundPlanRequest($inboundPlanId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInboundPlan'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function getInboundPlanRequest($inboundPlanId)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling getInboundPlan'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.getInboundPlan, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.getInboundPlan, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException("invalid value for \"inboundPlanId\" when calling FbaInboundApi.getInboundPlan, must conform to the pattern /^[a-zA-Z0-9-]*$/.");
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSelfShipAppointmentSlots
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GetSelfShipAppointmentSlotsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function getSelfShipAppointmentSlots($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        [$response] = $this->getSelfShipAppointmentSlotsWithHttpInfo($inboundPlanId, $shipmentId, $pageSize, $paginationToken);
        return $response;
    }

    /**
     * Operation getSelfShipAppointmentSlotsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GetSelfShipAppointmentSlotsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function getSelfShipAppointmentSlotsWithHttpInfo($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        $request = $this->getSelfShipAppointmentSlotsRequest($inboundPlanId, $shipmentId, $pageSize, $paginationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GetSelfShipAppointmentSlotsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GetSelfShipAppointmentSlotsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GetSelfShipAppointmentSlotsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GetSelfShipAppointmentSlotsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSelfShipAppointmentSlotsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getSelfShipAppointmentSlotsAsync($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        return $this->getSelfShipAppointmentSlotsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $pageSize, $paginationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSelfShipAppointmentSlotsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getSelfShipAppointmentSlotsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\GetSelfShipAppointmentSlotsResponse20240320';
        $request = $this->getSelfShipAppointmentSlotsRequest($inboundPlanId, $shipmentId, $pageSize, $paginationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSelfShipAppointmentSlots'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function getSelfShipAppointmentSlotsRequest($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling getSelfShipAppointmentSlots'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.getSelfShipAppointmentSlots, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling getSelfShipAppointmentSlots'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be smaller than or equal to 38.');
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.getSelfShipAppointmentSlots, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($pageSize !== null && $pageSize > 100) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be smaller than or equal to 100.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException(
                'invalid length for "$paginationToken" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be smaller than or equal to 1024.'
            );
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be bigger than or equal to 0.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShipment
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\Shipment20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function getShipment($inboundPlanId, $shipmentId)
    {
        [$response] = $this->getShipmentWithHttpInfo($inboundPlanId, $shipmentId);
        return $response;
    }

    /**
     * Operation getShipmentWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\Shipment20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function getShipmentWithHttpInfo($inboundPlanId, $shipmentId)
    {
        $request = $this->getShipmentRequest($inboundPlanId, $shipmentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\Shipment20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\Shipment20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\Shipment20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\Shipment20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShipmentAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getShipmentAsync($inboundPlanId, $shipmentId)
    {
        return $this->getShipmentAsyncWithHttpInfo($inboundPlanId, $shipmentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getShipmentAsyncWithHttpInfo($inboundPlanId, $shipmentId)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\Shipment20240320';
        $request = $this->getShipmentRequest($inboundPlanId, $shipmentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipment'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function getShipmentRequest($inboundPlanId, $shipmentId)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling getShipment'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.getShipment, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.getShipment, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException("invalid value for \"inboundPlanId\" when calling FbaInboundApi.getShipment, must conform to the pattern /^[a-zA-Z0-9-]*$/.");
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling getShipment'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.getShipment, must be smaller than or equal to 38.');
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.getShipment, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException("invalid value for \"shipmentId\" when calling FbaInboundApi.getShipment, must conform to the pattern /^[a-zA-Z0-9-]*$/.");
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShipmentContentUpdatePreview
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $contentUpdatePreviewId Identifier of a content update preview. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ContentUpdatePreview20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function getShipmentContentUpdatePreview($inboundPlanId, $shipmentId, $contentUpdatePreviewId)
    {
        [$response] = $this->getShipmentContentUpdatePreviewWithHttpInfo($inboundPlanId, $shipmentId, $contentUpdatePreviewId);
        return $response;
    }

    /**
     * Operation getShipmentContentUpdatePreviewWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $contentUpdatePreviewId Identifier of a content update preview. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ContentUpdatePreview20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function getShipmentContentUpdatePreviewWithHttpInfo($inboundPlanId, $shipmentId, $contentUpdatePreviewId)
    {
        $request = $this->getShipmentContentUpdatePreviewRequest($inboundPlanId, $shipmentId, $contentUpdatePreviewId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ContentUpdatePreview20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ContentUpdatePreview20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ContentUpdatePreview20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ContentUpdatePreview20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShipmentContentUpdatePreviewAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $contentUpdatePreviewId Identifier of a content update preview. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getShipmentContentUpdatePreviewAsync($inboundPlanId, $shipmentId, $contentUpdatePreviewId)
    {
        return $this->getShipmentContentUpdatePreviewAsyncWithHttpInfo($inboundPlanId, $shipmentId, $contentUpdatePreviewId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentContentUpdatePreviewAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $contentUpdatePreviewId Identifier of a content update preview. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getShipmentContentUpdatePreviewAsyncWithHttpInfo($inboundPlanId, $shipmentId, $contentUpdatePreviewId)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ContentUpdatePreview20240320';
        $request = $this->getShipmentContentUpdatePreviewRequest($inboundPlanId, $shipmentId, $contentUpdatePreviewId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipmentContentUpdatePreview'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $contentUpdatePreviewId Identifier of a content update preview. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function getShipmentContentUpdatePreviewRequest($inboundPlanId, $shipmentId, $contentUpdatePreviewId)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling getShipmentContentUpdatePreview'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.getShipmentContentUpdatePreview, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.getShipmentContentUpdatePreview, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.getShipmentContentUpdatePreview, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling getShipmentContentUpdatePreview'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$shipmentId" when calling FbaInboundApi.getShipmentContentUpdatePreview, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.getShipmentContentUpdatePreview, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.getShipmentContentUpdatePreview, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'contentUpdatePreviewId' is set
        if ($contentUpdatePreviewId === null || (is_array($contentUpdatePreviewId) && count($contentUpdatePreviewId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contentUpdatePreviewId when calling getShipmentContentUpdatePreview'
            );
        }
        if (strlen($contentUpdatePreviewId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$contentUpdatePreviewId" when calling FbaInboundApi.getShipmentContentUpdatePreview, must be smaller than or equal to 38.'
            );
        }
        if (strlen($contentUpdatePreviewId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$contentUpdatePreviewId" when calling FbaInboundApi.getShipmentContentUpdatePreview, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $contentUpdatePreviewId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"contentUpdatePreviewId\" when calling FbaInboundApi.getShipmentContentUpdatePreview, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }
        // path params
        if ($contentUpdatePreviewId !== null) {
            $resourcePath = str_replace(
                '{' . 'contentUpdatePreviewId' . '}',
                ObjectSerializer::toPathValue($contentUpdatePreviewId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliveryWindowOptions
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to get delivery window options for. (required)
     * @param int $pageSize The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListDeliveryWindowOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listDeliveryWindowOptions($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        [$response] = $this->listDeliveryWindowOptionsWithHttpInfo($inboundPlanId, $shipmentId, $pageSize, $paginationToken);
        return $response;
    }

    /**
     * Operation listDeliveryWindowOptionsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to get delivery window options for. (required)
     * @param int $pageSize The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListDeliveryWindowOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listDeliveryWindowOptionsWithHttpInfo($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        $request = $this->listDeliveryWindowOptionsRequest($inboundPlanId, $shipmentId, $pageSize, $paginationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListDeliveryWindowOptionsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListDeliveryWindowOptionsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListDeliveryWindowOptionsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListDeliveryWindowOptionsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliveryWindowOptionsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to get delivery window options for. (required)
     * @param int $pageSize The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listDeliveryWindowOptionsAsync($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        return $this->listDeliveryWindowOptionsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $pageSize, $paginationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryWindowOptionsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to get delivery window options for. (required)
     * @param int $pageSize The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listDeliveryWindowOptionsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListDeliveryWindowOptionsResponse20240320';
        $request = $this->listDeliveryWindowOptionsRequest($inboundPlanId, $shipmentId, $pageSize, $paginationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliveryWindowOptions'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId The shipment to get delivery window options for. (required)
     * @param int $pageSize The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listDeliveryWindowOptionsRequest($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling listDeliveryWindowOptions'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listDeliveryWindowOptions, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listDeliveryWindowOptions, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.listDeliveryWindowOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling listDeliveryWindowOptions'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.listDeliveryWindowOptions, must be smaller than or equal to 38.');
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.listDeliveryWindowOptions, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.listDeliveryWindowOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($pageSize !== null && $pageSize > 100) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listDeliveryWindowOptions, must be smaller than or equal to 100.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listDeliveryWindowOptions, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException(
                'invalid length for "$paginationToken" when calling FbaInboundApi.listDeliveryWindowOptions, must be smaller than or equal to 1024.'
            );
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listDeliveryWindowOptions, must be bigger than or equal to 0.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInboundPlanBoxes
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanBoxesResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listInboundPlanBoxes($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        [$response] = $this->listInboundPlanBoxesWithHttpInfo($inboundPlanId, $pageSize, $paginationToken);
        return $response;
    }

    /**
     * Operation listInboundPlanBoxesWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanBoxesResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listInboundPlanBoxesWithHttpInfo($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        $request = $this->listInboundPlanBoxesRequest($inboundPlanId, $pageSize, $paginationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanBoxesResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanBoxesResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanBoxesResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanBoxesResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listInboundPlanBoxesAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listInboundPlanBoxesAsync($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        return $this->listInboundPlanBoxesAsyncWithHttpInfo($inboundPlanId, $pageSize, $paginationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInboundPlanBoxesAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listInboundPlanBoxesAsyncWithHttpInfo($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanBoxesResponse20240320';
        $request = $this->listInboundPlanBoxesRequest($inboundPlanId, $pageSize, $paginationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInboundPlanBoxes'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listInboundPlanBoxesRequest($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling listInboundPlanBoxes'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listInboundPlanBoxes, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listInboundPlanBoxes, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.listInboundPlanBoxes, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($pageSize !== null && $pageSize > 1000) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listInboundPlanBoxes, must be smaller than or equal to 1000.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listInboundPlanBoxes, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listInboundPlanBoxes, must be smaller than or equal to 1024.');
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listInboundPlanBoxes, must be bigger than or equal to 0.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInboundPlanItems
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanItemsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listInboundPlanItems($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        [$response] = $this->listInboundPlanItemsWithHttpInfo($inboundPlanId, $pageSize, $paginationToken);
        return $response;
    }

    /**
     * Operation listInboundPlanItemsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanItemsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listInboundPlanItemsWithHttpInfo($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        $request = $this->listInboundPlanItemsRequest($inboundPlanId, $pageSize, $paginationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanItemsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanItemsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanItemsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanItemsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listInboundPlanItemsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listInboundPlanItemsAsync($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        return $this->listInboundPlanItemsAsyncWithHttpInfo($inboundPlanId, $pageSize, $paginationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInboundPlanItemsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listInboundPlanItemsAsyncWithHttpInfo($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanItemsResponse20240320';
        $request = $this->listInboundPlanItemsRequest($inboundPlanId, $pageSize, $paginationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInboundPlanItems'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listInboundPlanItemsRequest($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling listInboundPlanItems'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listInboundPlanItems, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listInboundPlanItems, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.listInboundPlanItems, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($pageSize !== null && $pageSize > 1000) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listInboundPlanItems, must be smaller than or equal to 1000.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listInboundPlanItems, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listInboundPlanItems, must be smaller than or equal to 1024.');
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listInboundPlanItems, must be bigger than or equal to 0.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInboundPlanPallets
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanPalletsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listInboundPlanPallets($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        [$response] = $this->listInboundPlanPalletsWithHttpInfo($inboundPlanId, $pageSize, $paginationToken);
        return $response;
    }

    /**
     * Operation listInboundPlanPalletsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanPalletsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listInboundPlanPalletsWithHttpInfo($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        $request = $this->listInboundPlanPalletsRequest($inboundPlanId, $pageSize, $paginationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanPalletsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanPalletsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanPalletsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanPalletsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listInboundPlanPalletsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listInboundPlanPalletsAsync($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        return $this->listInboundPlanPalletsAsyncWithHttpInfo($inboundPlanId, $pageSize, $paginationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInboundPlanPalletsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listInboundPlanPalletsAsyncWithHttpInfo($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlanPalletsResponse20240320';
        $request = $this->listInboundPlanPalletsRequest($inboundPlanId, $pageSize, $paginationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInboundPlanPallets'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listInboundPlanPalletsRequest($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling listInboundPlanPallets'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listInboundPlanPallets, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listInboundPlanPallets, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.listInboundPlanPallets, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($pageSize !== null && $pageSize > 1000) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listInboundPlanPallets, must be smaller than or equal to 1000.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listInboundPlanPallets, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listInboundPlanPallets, must be smaller than or equal to 1024.');
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listInboundPlanPallets, must be bigger than or equal to 0.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInboundPlans
     *
     * @param int $pageSize The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $status The status of an inbound plan. (optional)
     * @param string $sortBy Sort by field. (optional)
     * @param string $sortOrder The sort order. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlansResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listInboundPlans($pageSize = 10, $paginationToken = null, $status = null, $sortBy = null, $sortOrder = null)
    {
        [$response] = $this->listInboundPlansWithHttpInfo($pageSize, $paginationToken, $status, $sortBy, $sortOrder);
        return $response;
    }

    /**
     * Operation listInboundPlansWithHttpInfo
     *
     * @param int $pageSize The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $status The status of an inbound plan. (optional)
     * @param string $sortBy Sort by field. (optional)
     * @param string $sortOrder The sort order. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlansResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listInboundPlansWithHttpInfo($pageSize = 10, $paginationToken = null, $status = null, $sortBy = null, $sortOrder = null)
    {
        $request = $this->listInboundPlansRequest($pageSize, $paginationToken, $status, $sortBy, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlansResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlansResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlansResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlansResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listInboundPlansAsync
     *
     *
     *
     * @param int $pageSize The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $status The status of an inbound plan. (optional)
     * @param string $sortBy Sort by field. (optional)
     * @param string $sortOrder The sort order. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listInboundPlansAsync($pageSize = 10, $paginationToken = null, $status = null, $sortBy = null, $sortOrder = null)
    {
        return $this->listInboundPlansAsyncWithHttpInfo($pageSize, $paginationToken, $status, $sortBy, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInboundPlansAsyncWithHttpInfo
     *
     *
     *
     * @param int $pageSize The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $status The status of an inbound plan. (optional)
     * @param string $sortBy Sort by field. (optional)
     * @param string $sortOrder The sort order. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listInboundPlansAsyncWithHttpInfo($pageSize = 10, $paginationToken = null, $status = null, $sortBy = null, $sortOrder = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListInboundPlansResponse20240320';
        $request = $this->listInboundPlansRequest($pageSize, $paginationToken, $status, $sortBy, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInboundPlans'
     *
     * @param int $pageSize The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $status The status of an inbound plan. (optional)
     * @param string $sortBy Sort by field. (optional)
     * @param string $sortOrder The sort order. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listInboundPlansRequest($pageSize = 10, $paginationToken = null, $status = null, $sortBy = null, $sortOrder = null)
    {
        if ($pageSize !== null && $pageSize > 30) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listInboundPlans, must be smaller than or equal to 30.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listInboundPlans, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listInboundPlans, must be smaller than or equal to 1024.');
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listInboundPlans, must be bigger than or equal to 0.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }
        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        if ($status !== null) {
            $queryParams['status'] = $status;
        }
        // query params
        if (is_array($sortBy)) {
            $sortBy = ObjectSerializer::serializeCollection($sortBy, '', true);
        }
        if ($sortBy !== null) {
            $queryParams['sortBy'] = $sortBy;
        }
        // query params
        if (is_array($sortOrder)) {
            $sortOrder = ObjectSerializer::serializeCollection($sortOrder, '', true);
        }
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = $sortOrder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listItemComplianceDetails
     *
     * @param string[] $mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     * @param string $marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListItemComplianceDetailsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listItemComplianceDetails($mskus, $marketplaceId)
    {
        [$response] = $this->listItemComplianceDetailsWithHttpInfo($mskus, $marketplaceId);
        return $response;
    }

    /**
     * Operation listItemComplianceDetailsWithHttpInfo
     *
     * @param string[] $mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     * @param string $marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListItemComplianceDetailsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listItemComplianceDetailsWithHttpInfo($mskus, $marketplaceId)
    {
        $request = $this->listItemComplianceDetailsRequest($mskus, $marketplaceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListItemComplianceDetailsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListItemComplianceDetailsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListItemComplianceDetailsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListItemComplianceDetailsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listItemComplianceDetailsAsync
     *
     *
     *
     * @param string[] $mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     * @param string $marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listItemComplianceDetailsAsync($mskus, $marketplaceId)
    {
        return $this->listItemComplianceDetailsAsyncWithHttpInfo($mskus, $marketplaceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listItemComplianceDetailsAsyncWithHttpInfo
     *
     *
     *
     * @param string[] $mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     * @param string $marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listItemComplianceDetailsAsyncWithHttpInfo($mskus, $marketplaceId)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListItemComplianceDetailsResponse20240320';
        $request = $this->listItemComplianceDetailsRequest($mskus, $marketplaceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listItemComplianceDetails'
     *
     * @param string[] $mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     * @param string $marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listItemComplianceDetailsRequest($mskus, $marketplaceId)
    {
        // verify the required parameter 'mskus' is set
        if ($mskus === null || (is_array($mskus) && count($mskus) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mskus when calling listItemComplianceDetails'
            );
        }
        if (count($mskus) > 100) {
            throw new \InvalidArgumentException(
                'invalid value for "$mskus" when calling FbaInboundApi.listItemComplianceDetails, number of items must be less than or equal to 100.'
            );
        }
        if (count($mskus) < 1) {
            throw new \InvalidArgumentException(
                'invalid value for "$mskus" when calling FbaInboundApi.listItemComplianceDetails, number of items must be greater than or equal to 1.'
            );
        }

        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling listItemComplianceDetails'
            );
        }
        if (strlen($marketplaceId) > 20) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling FbaInboundApi.listItemComplianceDetails, must be smaller than or equal to 20.');
        }
        if (strlen($marketplaceId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling FbaInboundApi.listItemComplianceDetails, must be bigger than or equal to 1.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/items/compliance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($mskus !== null) {
            if ('form' === 'form' && is_array($mskus)) {
                foreach ($mskus as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['mskus'] = $mskus;
            }
        }
        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPackingGroupBoxes
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingGroupId Identifier of a packing group. (required)
     * @param int $pageSize The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingGroupBoxesResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listPackingGroupBoxes($inboundPlanId, $packingGroupId, $pageSize = 10, $paginationToken = null)
    {
        [$response] = $this->listPackingGroupBoxesWithHttpInfo($inboundPlanId, $packingGroupId, $pageSize, $paginationToken);
        return $response;
    }

    /**
     * Operation listPackingGroupBoxesWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingGroupId Identifier of a packing group. (required)
     * @param int $pageSize The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingGroupBoxesResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listPackingGroupBoxesWithHttpInfo($inboundPlanId, $packingGroupId, $pageSize = 10, $paginationToken = null)
    {
        $request = $this->listPackingGroupBoxesRequest($inboundPlanId, $packingGroupId, $pageSize, $paginationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingGroupBoxesResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingGroupBoxesResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingGroupBoxesResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingGroupBoxesResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPackingGroupBoxesAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingGroupId Identifier of a packing group. (required)
     * @param int $pageSize The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listPackingGroupBoxesAsync($inboundPlanId, $packingGroupId, $pageSize = 10, $paginationToken = null)
    {
        return $this->listPackingGroupBoxesAsyncWithHttpInfo($inboundPlanId, $packingGroupId, $pageSize, $paginationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPackingGroupBoxesAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingGroupId Identifier of a packing group. (required)
     * @param int $pageSize The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listPackingGroupBoxesAsyncWithHttpInfo($inboundPlanId, $packingGroupId, $pageSize = 10, $paginationToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingGroupBoxesResponse20240320';
        $request = $this->listPackingGroupBoxesRequest($inboundPlanId, $packingGroupId, $pageSize, $paginationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPackingGroupBoxes'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingGroupId Identifier of a packing group. (required)
     * @param int $pageSize The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listPackingGroupBoxesRequest($inboundPlanId, $packingGroupId, $pageSize = 10, $paginationToken = null)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling listPackingGroupBoxes'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listPackingGroupBoxes, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listPackingGroupBoxes, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.listPackingGroupBoxes, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'packingGroupId' is set
        if ($packingGroupId === null || (is_array($packingGroupId) && count($packingGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packingGroupId when calling listPackingGroupBoxes'
            );
        }
        if (strlen($packingGroupId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$packingGroupId" when calling FbaInboundApi.listPackingGroupBoxes, must be smaller than or equal to 38.');
        }
        if (strlen($packingGroupId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$packingGroupId" when calling FbaInboundApi.listPackingGroupBoxes, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $packingGroupId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"packingGroupId\" when calling FbaInboundApi.listPackingGroupBoxes, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($pageSize !== null && $pageSize > 100) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listPackingGroupBoxes, must be smaller than or equal to 100.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listPackingGroupBoxes, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listPackingGroupBoxes, must be smaller than or equal to 1024.');
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listPackingGroupBoxes, must be bigger than or equal to 0.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($packingGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'packingGroupId' . '}',
                ObjectSerializer::toPathValue($packingGroupId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPackingGroupItems
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingGroupId Identifier of a packing group. (required)
     * @param int $pageSize The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingGroupItemsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listPackingGroupItems($inboundPlanId, $packingGroupId, $pageSize = 10, $paginationToken = null)
    {
        [$response] = $this->listPackingGroupItemsWithHttpInfo($inboundPlanId, $packingGroupId, $pageSize, $paginationToken);
        return $response;
    }

    /**
     * Operation listPackingGroupItemsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingGroupId Identifier of a packing group. (required)
     * @param int $pageSize The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingGroupItemsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listPackingGroupItemsWithHttpInfo($inboundPlanId, $packingGroupId, $pageSize = 10, $paginationToken = null)
    {
        $request = $this->listPackingGroupItemsRequest($inboundPlanId, $packingGroupId, $pageSize, $paginationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingGroupItemsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingGroupItemsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingGroupItemsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingGroupItemsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPackingGroupItemsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingGroupId Identifier of a packing group. (required)
     * @param int $pageSize The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listPackingGroupItemsAsync($inboundPlanId, $packingGroupId, $pageSize = 10, $paginationToken = null)
    {
        return $this->listPackingGroupItemsAsyncWithHttpInfo($inboundPlanId, $packingGroupId, $pageSize, $paginationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPackingGroupItemsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingGroupId Identifier of a packing group. (required)
     * @param int $pageSize The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listPackingGroupItemsAsyncWithHttpInfo($inboundPlanId, $packingGroupId, $pageSize = 10, $paginationToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingGroupItemsResponse20240320';
        $request = $this->listPackingGroupItemsRequest($inboundPlanId, $packingGroupId, $pageSize, $paginationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPackingGroupItems'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $packingGroupId Identifier of a packing group. (required)
     * @param int $pageSize The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listPackingGroupItemsRequest($inboundPlanId, $packingGroupId, $pageSize = 10, $paginationToken = null)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling listPackingGroupItems'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listPackingGroupItems, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listPackingGroupItems, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.listPackingGroupItems, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'packingGroupId' is set
        if ($packingGroupId === null || (is_array($packingGroupId) && count($packingGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packingGroupId when calling listPackingGroupItems'
            );
        }
        if (strlen($packingGroupId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$packingGroupId" when calling FbaInboundApi.listPackingGroupItems, must be smaller than or equal to 38.');
        }
        if (strlen($packingGroupId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$packingGroupId" when calling FbaInboundApi.listPackingGroupItems, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $packingGroupId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"packingGroupId\" when calling FbaInboundApi.listPackingGroupItems, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($pageSize !== null && $pageSize > 100) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listPackingGroupItems, must be smaller than or equal to 100.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listPackingGroupItems, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listPackingGroupItems, must be smaller than or equal to 1024.');
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listPackingGroupItems, must be bigger than or equal to 0.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($packingGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'packingGroupId' . '}',
                ObjectSerializer::toPathValue($packingGroupId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPackingOptions
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listPackingOptions($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        [$response] = $this->listPackingOptionsWithHttpInfo($inboundPlanId, $pageSize, $paginationToken);
        return $response;
    }

    /**
     * Operation listPackingOptionsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listPackingOptionsWithHttpInfo($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        $request = $this->listPackingOptionsRequest($inboundPlanId, $pageSize, $paginationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingOptionsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingOptionsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingOptionsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingOptionsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPackingOptionsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listPackingOptionsAsync($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        return $this->listPackingOptionsAsyncWithHttpInfo($inboundPlanId, $pageSize, $paginationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPackingOptionsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listPackingOptionsAsyncWithHttpInfo($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPackingOptionsResponse20240320';
        $request = $this->listPackingOptionsRequest($inboundPlanId, $pageSize, $paginationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPackingOptions'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listPackingOptionsRequest($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling listPackingOptions'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listPackingOptions, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listPackingOptions, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.listPackingOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($pageSize !== null && $pageSize > 20) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listPackingOptions, must be smaller than or equal to 20.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listPackingOptions, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listPackingOptions, must be smaller than or equal to 1024.');
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listPackingOptions, must be bigger than or equal to 0.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPlacementOptions
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPlacementOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listPlacementOptions($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        [$response] = $this->listPlacementOptionsWithHttpInfo($inboundPlanId, $pageSize, $paginationToken);
        return $response;
    }

    /**
     * Operation listPlacementOptionsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPlacementOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listPlacementOptionsWithHttpInfo($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        $request = $this->listPlacementOptionsRequest($inboundPlanId, $pageSize, $paginationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPlacementOptionsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPlacementOptionsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPlacementOptionsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPlacementOptionsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPlacementOptionsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listPlacementOptionsAsync($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        return $this->listPlacementOptionsAsyncWithHttpInfo($inboundPlanId, $pageSize, $paginationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPlacementOptionsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listPlacementOptionsAsyncWithHttpInfo($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPlacementOptionsResponse20240320';
        $request = $this->listPlacementOptionsRequest($inboundPlanId, $pageSize, $paginationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPlacementOptions'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listPlacementOptionsRequest($inboundPlanId, $pageSize = 10, $paginationToken = null)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling listPlacementOptions'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listPlacementOptions, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listPlacementOptions, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.listPlacementOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($pageSize !== null && $pageSize > 20) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listPlacementOptions, must be smaller than or equal to 20.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listPlacementOptions, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listPlacementOptions, must be smaller than or equal to 1024.');
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listPlacementOptions, must be bigger than or equal to 0.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPrepDetails
     *
     * @param string $marketplaceId The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param string[] $mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     *
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPrepDetailsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     */
    public function listPrepDetails($marketplaceId, $mskus)
    {
        [$response] = $this->listPrepDetailsWithHttpInfo($marketplaceId, $mskus);
        return $response;
    }

    /**
     * Operation listPrepDetailsWithHttpInfo
     *
     * @param string $marketplaceId The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param string[] $mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     *
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPrepDetailsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPrepDetailsWithHttpInfo($marketplaceId, $mskus)
    {
        $request = $this->listPrepDetailsRequest($marketplaceId, $mskus);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPrepDetailsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPrepDetailsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPrepDetailsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPrepDetailsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPrepDetailsAsync
     *
     *
     *
     * @param string $marketplaceId The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param string[] $mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPrepDetailsAsync($marketplaceId, $mskus)
    {
        return $this->listPrepDetailsAsyncWithHttpInfo($marketplaceId, $mskus)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPrepDetailsAsyncWithHttpInfo
     *
     *
     *
     * @param string $marketplaceId The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param string[] $mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPrepDetailsAsyncWithHttpInfo($marketplaceId, $mskus)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListPrepDetailsResponse20240320';
        $request = $this->listPrepDetailsRequest($marketplaceId, $mskus);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPrepDetails'
     *
     * @param string $marketplaceId The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param string[] $mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPrepDetailsRequest($marketplaceId, $mskus)
    {
        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling listPrepDetails'
            );
        }
        if (strlen($marketplaceId) > 20) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling FbaInboundApi.listPrepDetails, must be smaller than or equal to 20.');
        }
        if (strlen($marketplaceId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling FbaInboundApi.listPrepDetails, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'mskus' is set
        if ($mskus === null || (is_array($mskus) && count($mskus) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mskus when calling listPrepDetails'
            );
        }
        if (count($mskus) > 100) {
            throw new \InvalidArgumentException('invalid value for "$mskus" when calling FbaInboundApi.listPrepDetails, number of items must be less than or equal to 100.');
        }
        if (count($mskus) < 1) {
            throw new \InvalidArgumentException('invalid value for "$mskus" when calling FbaInboundApi.listPrepDetails, number of items must be greater than or equal to 1.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/items/prepDetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }
        // query params
        if ($mskus !== null) {
            if ('form' === 'form' && is_array($mskus)) {
                foreach ($mskus as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['mskus'] = $mskus;
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listShipmentBoxes
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentBoxesResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listShipmentBoxes($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        [$response] = $this->listShipmentBoxesWithHttpInfo($inboundPlanId, $shipmentId, $pageSize, $paginationToken);
        return $response;
    }

    /**
     * Operation listShipmentBoxesWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentBoxesResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listShipmentBoxesWithHttpInfo($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        $request = $this->listShipmentBoxesRequest($inboundPlanId, $shipmentId, $pageSize, $paginationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentBoxesResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentBoxesResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentBoxesResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentBoxesResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listShipmentBoxesAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listShipmentBoxesAsync($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        return $this->listShipmentBoxesAsyncWithHttpInfo($inboundPlanId, $shipmentId, $pageSize, $paginationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShipmentBoxesAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listShipmentBoxesAsyncWithHttpInfo($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentBoxesResponse20240320';
        $request = $this->listShipmentBoxesRequest($inboundPlanId, $shipmentId, $pageSize, $paginationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listShipmentBoxes'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listShipmentBoxesRequest($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling listShipmentBoxes'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listShipmentBoxes, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listShipmentBoxes, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException("invalid value for \"inboundPlanId\" when calling FbaInboundApi.listShipmentBoxes, must conform to the pattern /^[a-zA-Z0-9-]*$/.");
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling listShipmentBoxes'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.listShipmentBoxes, must be smaller than or equal to 38.');
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.listShipmentBoxes, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException("invalid value for \"shipmentId\" when calling FbaInboundApi.listShipmentBoxes, must conform to the pattern /^[a-zA-Z0-9-]*$/.");
        }

        if ($pageSize !== null && $pageSize > 1000) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listShipmentBoxes, must be smaller than or equal to 1000.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listShipmentBoxes, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listShipmentBoxes, must be smaller than or equal to 1024.');
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listShipmentBoxes, must be bigger than or equal to 0.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listShipmentContentUpdatePreviews
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of content update previews to return. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentContentUpdatePreviewsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listShipmentContentUpdatePreviews($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        [$response] = $this->listShipmentContentUpdatePreviewsWithHttpInfo($inboundPlanId, $shipmentId, $pageSize, $paginationToken);
        return $response;
    }

    /**
     * Operation listShipmentContentUpdatePreviewsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of content update previews to return. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentContentUpdatePreviewsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listShipmentContentUpdatePreviewsWithHttpInfo($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        $request = $this->listShipmentContentUpdatePreviewsRequest($inboundPlanId, $shipmentId, $pageSize, $paginationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentContentUpdatePreviewsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentContentUpdatePreviewsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentContentUpdatePreviewsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentContentUpdatePreviewsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listShipmentContentUpdatePreviewsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of content update previews to return. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listShipmentContentUpdatePreviewsAsync($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        return $this->listShipmentContentUpdatePreviewsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $pageSize, $paginationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShipmentContentUpdatePreviewsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of content update previews to return. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listShipmentContentUpdatePreviewsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentContentUpdatePreviewsResponse20240320';
        $request = $this->listShipmentContentUpdatePreviewsRequest($inboundPlanId, $shipmentId, $pageSize, $paginationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listShipmentContentUpdatePreviews'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of content update previews to return. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listShipmentContentUpdatePreviewsRequest($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling listShipmentContentUpdatePreviews'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling listShipmentContentUpdatePreviews'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$shipmentId" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$shipmentId" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($pageSize !== null && $pageSize > 20) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be smaller than or equal to 20.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException(
                'invalid length for "$paginationToken" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be smaller than or equal to 1024.'
            );
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException(
                'invalid length for "$paginationToken" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be bigger than or equal to 0.'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listShipmentItems
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentItemsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listShipmentItems($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        [$response] = $this->listShipmentItemsWithHttpInfo($inboundPlanId, $shipmentId, $pageSize, $paginationToken);
        return $response;
    }

    /**
     * Operation listShipmentItemsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentItemsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listShipmentItemsWithHttpInfo($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        $request = $this->listShipmentItemsRequest($inboundPlanId, $shipmentId, $pageSize, $paginationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentItemsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentItemsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentItemsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentItemsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listShipmentItemsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listShipmentItemsAsync($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        return $this->listShipmentItemsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $pageSize, $paginationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShipmentItemsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listShipmentItemsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentItemsResponse20240320';
        $request = $this->listShipmentItemsRequest($inboundPlanId, $shipmentId, $pageSize, $paginationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listShipmentItems'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listShipmentItemsRequest($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling listShipmentItems'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listShipmentItems, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listShipmentItems, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException("invalid value for \"inboundPlanId\" when calling FbaInboundApi.listShipmentItems, must conform to the pattern /^[a-zA-Z0-9-]*$/.");
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling listShipmentItems'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.listShipmentItems, must be smaller than or equal to 38.');
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.listShipmentItems, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException("invalid value for \"shipmentId\" when calling FbaInboundApi.listShipmentItems, must conform to the pattern /^[a-zA-Z0-9-]*$/.");
        }

        if ($pageSize !== null && $pageSize > 1000) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listShipmentItems, must be smaller than or equal to 1000.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listShipmentItems, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listShipmentItems, must be smaller than or equal to 1024.');
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listShipmentItems, must be bigger than or equal to 0.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listShipmentPallets
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentPalletsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listShipmentPallets($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        [$response] = $this->listShipmentPalletsWithHttpInfo($inboundPlanId, $shipmentId, $pageSize, $paginationToken);
        return $response;
    }

    /**
     * Operation listShipmentPalletsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentPalletsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listShipmentPalletsWithHttpInfo($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        $request = $this->listShipmentPalletsRequest($inboundPlanId, $shipmentId, $pageSize, $paginationToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentPalletsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentPalletsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentPalletsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentPalletsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listShipmentPalletsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listShipmentPalletsAsync($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        return $this->listShipmentPalletsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $pageSize, $paginationToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShipmentPalletsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listShipmentPalletsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListShipmentPalletsResponse20240320';
        $request = $this->listShipmentPalletsRequest($inboundPlanId, $shipmentId, $pageSize, $paginationToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listShipmentPallets'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $pageSize The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listShipmentPalletsRequest($inboundPlanId, $shipmentId, $pageSize = 10, $paginationToken = null)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling listShipmentPallets'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listShipmentPallets, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listShipmentPallets, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.listShipmentPallets, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling listShipmentPallets'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.listShipmentPallets, must be smaller than or equal to 38.');
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.listShipmentPallets, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException("invalid value for \"shipmentId\" when calling FbaInboundApi.listShipmentPallets, must conform to the pattern /^[a-zA-Z0-9-]*$/.");
        }

        if ($pageSize !== null && $pageSize > 1000) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listShipmentPallets, must be smaller than or equal to 1000.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listShipmentPallets, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listShipmentPallets, must be smaller than or equal to 1024.');
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listShipmentPallets, must be bigger than or equal to 0.');
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/pallets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTransportationOptions
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $placementOptionId The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param string $shipmentId The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListTransportationOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listTransportationOptions($inboundPlanId, $pageSize = 10, $paginationToken = null, $placementOptionId = null, $shipmentId = null)
    {
        [$response] = $this->listTransportationOptionsWithHttpInfo($inboundPlanId, $pageSize, $paginationToken, $placementOptionId, $shipmentId);
        return $response;
    }

    /**
     * Operation listTransportationOptionsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $placementOptionId The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param string $shipmentId The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListTransportationOptionsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function listTransportationOptionsWithHttpInfo($inboundPlanId, $pageSize = 10, $paginationToken = null, $placementOptionId = null, $shipmentId = null)
    {
        $request = $this->listTransportationOptionsRequest($inboundPlanId, $pageSize, $paginationToken, $placementOptionId, $shipmentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListTransportationOptionsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListTransportationOptionsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListTransportationOptionsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListTransportationOptionsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTransportationOptionsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $placementOptionId The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param string $shipmentId The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listTransportationOptionsAsync($inboundPlanId, $pageSize = 10, $paginationToken = null, $placementOptionId = null, $shipmentId = null)
    {
        return $this->listTransportationOptionsAsyncWithHttpInfo($inboundPlanId, $pageSize, $paginationToken, $placementOptionId, $shipmentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTransportationOptionsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $placementOptionId The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param string $shipmentId The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listTransportationOptionsAsyncWithHttpInfo($inboundPlanId, $pageSize = 10, $paginationToken = null, $placementOptionId = null, $shipmentId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ListTransportationOptionsResponse20240320';
        $request = $this->listTransportationOptionsRequest($inboundPlanId, $pageSize, $paginationToken, $placementOptionId, $shipmentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTransportationOptions'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param int $pageSize The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param string $paginationToken A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $placementOptionId The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param string $shipmentId The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listTransportationOptionsRequest($inboundPlanId, $pageSize = 10, $paginationToken = null, $placementOptionId = null, $shipmentId = null)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling listTransportationOptions'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listTransportationOptions, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.listTransportationOptions, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.listTransportationOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($pageSize !== null && $pageSize > 20) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listTransportationOptions, must be smaller than or equal to 20.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling FbaInboundApi.listTransportationOptions, must be bigger than or equal to 1.');
        }

        if ($paginationToken !== null && strlen($paginationToken) > 1024) {
            throw new \InvalidArgumentException(
                'invalid length for "$paginationToken" when calling FbaInboundApi.listTransportationOptions, must be smaller than or equal to 1024.'
            );
        }
        if ($paginationToken !== null && strlen($paginationToken) < 0) {
            throw new \InvalidArgumentException('invalid length for "$paginationToken" when calling FbaInboundApi.listTransportationOptions, must be bigger than or equal to 0.');
        }

        if ($placementOptionId !== null && strlen($placementOptionId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$placementOptionId" when calling FbaInboundApi.listTransportationOptions, must be smaller than or equal to 38.'
            );
        }
        if ($placementOptionId !== null && strlen($placementOptionId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$placementOptionId" when calling FbaInboundApi.listTransportationOptions, must be bigger than or equal to 38.'
            );
        }
        if ($placementOptionId !== null && !preg_match("/^[a-zA-Z0-9-]*$/", $placementOptionId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"placementOptionId\" when calling FbaInboundApi.listTransportationOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($shipmentId !== null && strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.listTransportationOptions, must be smaller than or equal to 38.');
        }
        if ($shipmentId !== null && strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.listTransportationOptions, must be bigger than or equal to 38.');
        }
        if ($shipmentId !== null && !preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.listTransportationOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($paginationToken)) {
            $paginationToken = ObjectSerializer::serializeCollection($paginationToken, '', true);
        }
        if ($paginationToken !== null) {
            $queryParams['paginationToken'] = $paginationToken;
        }
        // query params
        if (is_array($placementOptionId)) {
            $placementOptionId = ObjectSerializer::serializeCollection($placementOptionId, '', true);
        }
        if ($placementOptionId !== null) {
            $queryParams['placementOptionId'] = $placementOptionId;
        }
        // query params
        if (is_array($shipmentId)) {
            $shipmentId = ObjectSerializer::serializeCollection($shipmentId, '', true);
        }
        if ($shipmentId !== null) {
            $queryParams['shipmentId'] = $shipmentId;
        }

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleSelfShipAppointment
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $slotId An identifier to a self-ship appointment slot. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ScheduleSelfShipAppointmentRequest20240320 $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ScheduleSelfShipAppointmentResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function scheduleSelfShipAppointment($inboundPlanId, $shipmentId, $slotId, $body)
    {
        [$response] = $this->scheduleSelfShipAppointmentWithHttpInfo($inboundPlanId, $shipmentId, $slotId, $body);
        return $response;
    }

    /**
     * Operation scheduleSelfShipAppointmentWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $slotId An identifier to a self-ship appointment slot. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ScheduleSelfShipAppointmentRequest20240320 $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ScheduleSelfShipAppointmentResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function scheduleSelfShipAppointmentWithHttpInfo($inboundPlanId, $shipmentId, $slotId, $body)
    {
        $request = $this->scheduleSelfShipAppointmentRequest($inboundPlanId, $shipmentId, $slotId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ScheduleSelfShipAppointmentResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ScheduleSelfShipAppointmentResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ScheduleSelfShipAppointmentResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ScheduleSelfShipAppointmentResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleSelfShipAppointmentAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $slotId An identifier to a self-ship appointment slot. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ScheduleSelfShipAppointmentRequest20240320 $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function scheduleSelfShipAppointmentAsync($inboundPlanId, $shipmentId, $slotId, $body)
    {
        return $this->scheduleSelfShipAppointmentAsyncWithHttpInfo($inboundPlanId, $shipmentId, $slotId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleSelfShipAppointmentAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $slotId An identifier to a self-ship appointment slot. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ScheduleSelfShipAppointmentRequest20240320 $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function scheduleSelfShipAppointmentAsyncWithHttpInfo($inboundPlanId, $shipmentId, $slotId, $body)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ScheduleSelfShipAppointmentResponse20240320';
        $request = $this->scheduleSelfShipAppointmentRequest($inboundPlanId, $shipmentId, $slotId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleSelfShipAppointment'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $slotId An identifier to a self-ship appointment slot. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ScheduleSelfShipAppointmentRequest20240320 $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function scheduleSelfShipAppointmentRequest($inboundPlanId, $shipmentId, $slotId, $body)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling scheduleSelfShipAppointment'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.scheduleSelfShipAppointment, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.scheduleSelfShipAppointment, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.scheduleSelfShipAppointment, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling scheduleSelfShipAppointment'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.scheduleSelfShipAppointment, must be smaller than or equal to 38.');
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.scheduleSelfShipAppointment, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.scheduleSelfShipAppointment, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'slotId' is set
        if ($slotId === null || (is_array($slotId) && count($slotId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slotId when calling scheduleSelfShipAppointment'
            );
        }
        if (strlen($slotId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$slotId" when calling FbaInboundApi.scheduleSelfShipAppointment, must be smaller than or equal to 38.');
        }
        if (strlen($slotId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$slotId" when calling FbaInboundApi.scheduleSelfShipAppointment, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $slotId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"slotId\" when calling FbaInboundApi.scheduleSelfShipAppointment, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling scheduleSelfShipAppointment'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots/{slotId}/schedule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }
        // path params
        if ($slotId !== null) {
            $resourcePath = str_replace(
                '{' . 'slotId' . '}',
                ObjectSerializer::toPathValue($slotId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setPackingInformation
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPackingInformationRequest20240320 $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPackingInformationResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function setPackingInformation($inboundPlanId, $body)
    {
        [$response] = $this->setPackingInformationWithHttpInfo($inboundPlanId, $body);
        return $response;
    }

    /**
     * Operation setPackingInformationWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPackingInformationRequest20240320 $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPackingInformationResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function setPackingInformationWithHttpInfo($inboundPlanId, $body)
    {
        $request = $this->setPackingInformationRequest($inboundPlanId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPackingInformationResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPackingInformationResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPackingInformationResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPackingInformationResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setPackingInformationAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPackingInformationRequest20240320 $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function setPackingInformationAsync($inboundPlanId, $body)
    {
        return $this->setPackingInformationAsyncWithHttpInfo($inboundPlanId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setPackingInformationAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPackingInformationRequest20240320 $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function setPackingInformationAsyncWithHttpInfo($inboundPlanId, $body)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPackingInformationResponse20240320';
        $request = $this->setPackingInformationRequest($inboundPlanId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setPackingInformation'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPackingInformationRequest20240320 $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function setPackingInformationRequest($inboundPlanId, $body)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling setPackingInformation'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.setPackingInformation, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.setPackingInformation, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.setPackingInformation, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling setPackingInformation'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setPrepDetails
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPrepDetailsRequest20240320 $body The body of the request to &#x60;setPrepDetails&#x60;. (required)
     *
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPrepDetailsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     */
    public function setPrepDetails($body)
    {
        [$response] = $this->setPrepDetailsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation setPrepDetailsWithHttpInfo
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPrepDetailsRequest20240320 $body The body of the request to &#x60;setPrepDetails&#x60;. (required)
     *
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPrepDetailsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPrepDetailsWithHttpInfo($body)
    {
        $request = $this->setPrepDetailsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPrepDetailsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPrepDetailsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPrepDetailsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPrepDetailsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setPrepDetailsAsync
     *
     *
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPrepDetailsRequest20240320 $body The body of the request to &#x60;setPrepDetails&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPrepDetailsAsync($body)
    {
        return $this->setPrepDetailsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setPrepDetailsAsyncWithHttpInfo
     *
     *
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPrepDetailsRequest20240320 $body The body of the request to &#x60;setPrepDetails&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPrepDetailsAsyncWithHttpInfo($body)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPrepDetailsResponse20240320';
        $request = $this->setPrepDetailsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setPrepDetails'
     *
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\SetPrepDetailsRequest20240320 $body The body of the request to &#x60;setPrepDetails&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setPrepDetailsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling setPrepDetails'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/items/prepDetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInboundPlanName
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateInboundPlanNameRequest20240320 $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     *
     * @return void
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function updateInboundPlanName($inboundPlanId, $body)
    {
        $this->updateInboundPlanNameWithHttpInfo($inboundPlanId, $body);
    }

    /**
     * Operation updateInboundPlanNameWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateInboundPlanNameRequest20240320 $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function updateInboundPlanNameWithHttpInfo($inboundPlanId, $body)
    {
        $request = $this->updateInboundPlanNameRequest($inboundPlanId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateInboundPlanNameAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateInboundPlanNameRequest20240320 $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function updateInboundPlanNameAsync($inboundPlanId, $body)
    {
        return $this->updateInboundPlanNameAsyncWithHttpInfo($inboundPlanId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInboundPlanNameAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateInboundPlanNameRequest20240320 $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function updateInboundPlanNameAsyncWithHttpInfo($inboundPlanId, $body)
    {
        $returnType = '';
        $request = $this->updateInboundPlanNameRequest($inboundPlanId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInboundPlanName'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateInboundPlanNameRequest20240320 $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function updateInboundPlanNameRequest($inboundPlanId, $body)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling updateInboundPlanName'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.updateInboundPlanName, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.updateInboundPlanName, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.updateInboundPlanName, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateInboundPlanName'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateItemComplianceDetails
     *
     * @param string $marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateItemComplianceDetailsRequest20240320 $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     *
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateItemComplianceDetailsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     */
    public function updateItemComplianceDetails($marketplaceId, $body)
    {
        [$response] = $this->updateItemComplianceDetailsWithHttpInfo($marketplaceId, $body);
        return $response;
    }

    /**
     * Operation updateItemComplianceDetailsWithHttpInfo
     *
     * @param string $marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateItemComplianceDetailsRequest20240320 $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     *
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateItemComplianceDetailsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateItemComplianceDetailsWithHttpInfo($marketplaceId, $body)
    {
        $request = $this->updateItemComplianceDetailsRequest($marketplaceId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateItemComplianceDetailsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateItemComplianceDetailsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateItemComplianceDetailsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateItemComplianceDetailsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateItemComplianceDetailsAsync
     *
     *
     *
     * @param string $marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateItemComplianceDetailsRequest20240320 $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateItemComplianceDetailsAsync($marketplaceId, $body)
    {
        return $this->updateItemComplianceDetailsAsyncWithHttpInfo($marketplaceId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateItemComplianceDetailsAsyncWithHttpInfo
     *
     *
     *
     * @param string $marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateItemComplianceDetailsRequest20240320 $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateItemComplianceDetailsAsyncWithHttpInfo($marketplaceId, $body)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateItemComplianceDetailsResponse20240320';
        $request = $this->updateItemComplianceDetailsRequest($marketplaceId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateItemComplianceDetails'
     *
     * @param string $marketplaceId The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateItemComplianceDetailsRequest20240320 $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateItemComplianceDetailsRequest($marketplaceId, $body)
    {
        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling updateItemComplianceDetails'
            );
        }
        if (strlen($marketplaceId) > 20) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling FbaInboundApi.updateItemComplianceDetails, must be smaller than or equal to 20.');
        }
        if (strlen($marketplaceId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$marketplaceId" when calling FbaInboundApi.updateItemComplianceDetails, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateItemComplianceDetails'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/items/compliance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateShipmentName
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentNameRequest20240320 $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     *
     * @return void
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function updateShipmentName($inboundPlanId, $shipmentId, $body)
    {
        $this->updateShipmentNameWithHttpInfo($inboundPlanId, $shipmentId, $body);
    }

    /**
     * Operation updateShipmentNameWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentNameRequest20240320 $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function updateShipmentNameWithHttpInfo($inboundPlanId, $shipmentId, $body)
    {
        $request = $this->updateShipmentNameRequest($inboundPlanId, $shipmentId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateShipmentNameAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentNameRequest20240320 $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function updateShipmentNameAsync($inboundPlanId, $shipmentId, $body)
    {
        return $this->updateShipmentNameAsyncWithHttpInfo($inboundPlanId, $shipmentId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShipmentNameAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentNameRequest20240320 $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function updateShipmentNameAsyncWithHttpInfo($inboundPlanId, $shipmentId, $body)
    {
        $returnType = '';
        $request = $this->updateShipmentNameRequest($inboundPlanId, $shipmentId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateShipmentName'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentNameRequest20240320 $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function updateShipmentNameRequest($inboundPlanId, $shipmentId, $body)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling updateShipmentName'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.updateShipmentName, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.updateShipmentName, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.updateShipmentName, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling updateShipmentName'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.updateShipmentName, must be smaller than or equal to 38.');
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.updateShipmentName, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException("invalid value for \"shipmentId\" when calling FbaInboundApi.updateShipmentName, must conform to the pattern /^[a-zA-Z0-9-]*$/.");
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateShipmentName'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateShipmentSourceAddress
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentSourceAddressRequest20240320 $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentSourceAddressResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function updateShipmentSourceAddress($inboundPlanId, $shipmentId, $body)
    {
        [$response] = $this->updateShipmentSourceAddressWithHttpInfo($inboundPlanId, $shipmentId, $body);
        return $response;
    }

    /**
     * Operation updateShipmentSourceAddressWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentSourceAddressRequest20240320 $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentSourceAddressResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function updateShipmentSourceAddressWithHttpInfo($inboundPlanId, $shipmentId, $body)
    {
        $request = $this->updateShipmentSourceAddressRequest($inboundPlanId, $shipmentId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentSourceAddressResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentSourceAddressResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentSourceAddressResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentSourceAddressResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateShipmentSourceAddressAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentSourceAddressRequest20240320 $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function updateShipmentSourceAddressAsync($inboundPlanId, $shipmentId, $body)
    {
        return $this->updateShipmentSourceAddressAsyncWithHttpInfo($inboundPlanId, $shipmentId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShipmentSourceAddressAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentSourceAddressRequest20240320 $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function updateShipmentSourceAddressAsyncWithHttpInfo($inboundPlanId, $shipmentId, $body)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentSourceAddressResponse20240320';
        $request = $this->updateShipmentSourceAddressRequest($inboundPlanId, $shipmentId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateShipmentSourceAddress'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentSourceAddressRequest20240320 $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function updateShipmentSourceAddressRequest($inboundPlanId, $shipmentId, $body)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling updateShipmentSourceAddress'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.updateShipmentSourceAddress, must be smaller than or equal to 38.');
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$inboundPlanId" when calling FbaInboundApi.updateShipmentSourceAddress, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.updateShipmentSourceAddress, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling updateShipmentSourceAddress'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.updateShipmentSourceAddress, must be smaller than or equal to 38.');
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.updateShipmentSourceAddress, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.updateShipmentSourceAddress, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateShipmentSourceAddress'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateShipmentTrackingDetails
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentTrackingDetailsRequest20240320 $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     *
     * @return \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentTrackingDetailsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function updateShipmentTrackingDetails($inboundPlanId, $shipmentId, $body)
    {
        [$response] = $this->updateShipmentTrackingDetailsWithHttpInfo($inboundPlanId, $shipmentId, $body);
        return $response;
    }

    /**
     * Operation updateShipmentTrackingDetailsWithHttpInfo
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentTrackingDetailsRequest20240320 $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     *
     * @return array of \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentTrackingDetailsResponse20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320|\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\ApiException on non-2xx response
     */
    public function updateShipmentTrackingDetailsWithHttpInfo($inboundPlanId, $shipmentId, $body)
    {
        $request = $this->updateShipmentTrackingDetailsRequest($inboundPlanId, $shipmentId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 202:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentTrackingDetailsResponse20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentTrackingDetailsResponse20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentTrackingDetailsResponse20240320';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentTrackingDetailsResponse20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\ErrorList20240320',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateShipmentTrackingDetailsAsync
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentTrackingDetailsRequest20240320 $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function updateShipmentTrackingDetailsAsync($inboundPlanId, $shipmentId, $body)
    {
        return $this->updateShipmentTrackingDetailsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShipmentTrackingDetailsAsyncWithHttpInfo
     *
     *
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentTrackingDetailsRequest20240320 $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function updateShipmentTrackingDetailsAsyncWithHttpInfo($inboundPlanId, $shipmentId, $body)
    {
        $returnType = '\Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentTrackingDetailsResponse20240320';
        $request = $this->updateShipmentTrackingDetailsRequest($inboundPlanId, $shipmentId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateShipmentTrackingDetails'
     *
     * @param string $inboundPlanId Identifier of an inbound plan. (required)
     * @param string $shipmentId Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param \Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model\UpdateShipmentTrackingDetailsRequest20240320 $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function updateShipmentTrackingDetailsRequest($inboundPlanId, $shipmentId, $body)
    {
        // verify the required parameter 'inboundPlanId' is set
        if ($inboundPlanId === null || (is_array($inboundPlanId) && count($inboundPlanId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inboundPlanId when calling updateShipmentTrackingDetails'
            );
        }
        if (strlen($inboundPlanId) > 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.updateShipmentTrackingDetails, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inboundPlanId) < 38) {
            throw new \InvalidArgumentException(
                'invalid length for "$inboundPlanId" when calling FbaInboundApi.updateShipmentTrackingDetails, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inboundPlanId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"inboundPlanId\" when calling FbaInboundApi.updateShipmentTrackingDetails, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling updateShipmentTrackingDetails'
            );
        }
        if (strlen($shipmentId) > 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.updateShipmentTrackingDetails, must be smaller than or equal to 38.');
        }
        if (strlen($shipmentId) < 38) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling FbaInboundApi.updateShipmentTrackingDetails, must be bigger than or equal to 38.');
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipmentId)) {
            throw new \InvalidArgumentException(
                "invalid value for \"shipmentId\" when calling FbaInboundApi.updateShipmentTrackingDetails, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateShipmentTrackingDetails'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/trackingDetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($inboundPlanId !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inboundPlanId),
                $resourcePath
            );
        }
        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
