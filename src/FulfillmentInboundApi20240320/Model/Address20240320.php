<?php
/**
 * Address20240320
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\FulfillmentInboundApi20240320
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\FulfillmentInboundApi20240320\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * Address20240320 Class Doc Comment
 *
 * @category Class
 * @description Specific details to identify a place.
 * @package  Webcom\Amazon\Rest\FulfillmentInboundApi20240320
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Address20240320 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'Address';
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'addressLine1'        => 'string',
        'addressLine2'        => 'string',
        'city'                => 'string',
        'companyName'         => 'string',
        'countryCode'         => 'string',
        'email'               => 'string',
        'name'                => 'string',
        'phoneNumber'         => 'string',
        'postalCode'          => 'string',
        'stateOrProvinceCode' => 'string',
    ];
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'addressLine1'        => null,
        'addressLine2'        => null,
        'city'                => null,
        'companyName'         => null,
        'countryCode'         => null,
        'email'               => null,
        'name'                => null,
        'phoneNumber'         => null,
        'postalCode'          => null,
        'stateOrProvinceCode' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addressLine1'        => 'addressLine1',
        'addressLine2'        => 'addressLine2',
        'city'                => 'city',
        'companyName'         => 'companyName',
        'countryCode'         => 'countryCode',
        'email'               => 'email',
        'name'                => 'name',
        'phoneNumber'         => 'phoneNumber',
        'postalCode'          => 'postalCode',
        'stateOrProvinceCode' => 'stateOrProvinceCode',
    ];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addressLine1'        => 'setAddressLine1',
        'addressLine2'        => 'setAddressLine2',
        'city'                => 'setCity',
        'companyName'         => 'setCompanyName',
        'countryCode'         => 'setCountryCode',
        'email'               => 'setEmail',
        'name'                => 'setName',
        'phoneNumber'         => 'setPhoneNumber',
        'postalCode'          => 'setPostalCode',
        'stateOrProvinceCode' => 'setStateOrProvinceCode',
    ];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addressLine1'        => 'getAddressLine1',
        'addressLine2'        => 'getAddressLine2',
        'city'                => 'getCity',
        'companyName'         => 'getCompanyName',
        'countryCode'         => 'getCountryCode',
        'email'               => 'getEmail',
        'name'                => 'getName',
        'phoneNumber'         => 'getPhoneNumber',
        'postalCode'          => 'getPostalCode',
        'stateOrProvinceCode' => 'getStateOrProvinceCode',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['addressLine1'] = $data['addressLine1'] ?? null;
        $this->container['addressLine2'] = $data['addressLine2'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['companyName'] = $data['companyName'] ?? null;
        $this->container['countryCode'] = $data['countryCode'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['phoneNumber'] = $data['phoneNumber'] ?? null;
        $this->container['postalCode'] = $data['postalCode'] ?? null;
        $this->container['stateOrProvinceCode'] = $data['stateOrProvinceCode'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['addressLine1'] === null) {
            $invalidProperties[] = "'addressLine1' can't be null";
        }
        if ((mb_strlen($this->container['addressLine1']) > 180)) {
            $invalidProperties[] = "invalid value for 'addressLine1', the character length must be smaller than or equal to 180.";
        }

        if ((mb_strlen($this->container['addressLine1']) < 1)) {
            $invalidProperties[] = "invalid value for 'addressLine1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['addressLine2']) && (mb_strlen($this->container['addressLine2']) > 60)) {
            $invalidProperties[] = "invalid value for 'addressLine2', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['addressLine2']) && (mb_strlen($this->container['addressLine2']) < 1)) {
            $invalidProperties[] = "invalid value for 'addressLine2', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 30)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['city']) < 1)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['companyName']) && (mb_strlen($this->container['companyName']) > 50)) {
            $invalidProperties[] = "invalid value for 'companyName', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['companyName']) && (mb_strlen($this->container['companyName']) < 1)) {
            $invalidProperties[] = "invalid value for 'companyName', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['countryCode'] === null) {
            $invalidProperties[] = "'countryCode' can't be null";
        }
        if ((mb_strlen($this->container['countryCode']) > 2)) {
            $invalidProperties[] = "invalid value for 'countryCode', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['countryCode']) < 2)) {
            $invalidProperties[] = "invalid value for 'countryCode', the character length must be bigger than or equal to 2.";
        }

        if (!preg_match("/^[A-Z]{2}$/", $this->container['countryCode'])) {
            $invalidProperties[] = "invalid value for 'countryCode', must be conform to the pattern /^[A-Z]{2}$/.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 1024)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) < 1)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['phoneNumber']) && (mb_strlen($this->container['phoneNumber']) > 20)) {
            $invalidProperties[] = "invalid value for 'phoneNumber', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['phoneNumber']) && (mb_strlen($this->container['phoneNumber']) < 1)) {
            $invalidProperties[] = "invalid value for 'phoneNumber', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['postalCode'] === null) {
            $invalidProperties[] = "'postalCode' can't be null";
        }
        if ((mb_strlen($this->container['postalCode']) > 32)) {
            $invalidProperties[] = "invalid value for 'postalCode', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['postalCode']) < 1)) {
            $invalidProperties[] = "invalid value for 'postalCode', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['stateOrProvinceCode']) && (mb_strlen($this->container['stateOrProvinceCode']) > 64)) {
            $invalidProperties[] = "invalid value for 'stateOrProvinceCode', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['stateOrProvinceCode']) && (mb_strlen($this->container['stateOrProvinceCode']) < 1)) {
            $invalidProperties[] = "invalid value for 'stateOrProvinceCode', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets addressLine1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['addressLine1'];
    }

    /**
     * Sets addressLine1
     *
     * @param string $addressLine1 Street address information.
     *
     * @return self
     */
    public function setAddressLine1($addressLine1)
    {
        if ((mb_strlen($addressLine1) > 180)) {
            throw new \InvalidArgumentException('invalid length for $addressLine1 when calling Address20240320., must be smaller than or equal to 180.');
        }
        if ((mb_strlen($addressLine1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $addressLine1 when calling Address20240320., must be bigger than or equal to 1.');
        }

        $this->container['addressLine1'] = $addressLine1;

        return $this;
    }

    /**
     * Gets addressLine2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['addressLine2'];
    }

    /**
     * Sets addressLine2
     *
     * @param string|null $addressLine2 Additional street address information.
     *
     * @return self
     */
    public function setAddressLine2($addressLine2)
    {
        if (!is_null($addressLine2) && (mb_strlen($addressLine2) > 60)) {
            throw new \InvalidArgumentException('invalid length for $addressLine2 when calling Address20240320., must be smaller than or equal to 60.');
        }
        if (!is_null($addressLine2) && (mb_strlen($addressLine2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $addressLine2 when calling Address20240320., must be bigger than or equal to 1.');
        }

        $this->container['addressLine2'] = $addressLine2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city.
     *
     * @return self
     */
    public function setCity($city)
    {
        if ((mb_strlen($city) > 30)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Address20240320., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Address20240320., must be bigger than or equal to 1.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets companyName
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     *
     * @param string|null $companyName The name of the business.
     *
     * @return self
     */
    public function setCompanyName($companyName)
    {
        if (!is_null($companyName) && (mb_strlen($companyName) > 50)) {
            throw new \InvalidArgumentException('invalid length for $companyName when calling Address20240320., must be smaller than or equal to 50.');
        }
        if (!is_null($companyName) && (mb_strlen($companyName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $companyName when calling Address20240320., must be bigger than or equal to 1.');
        }

        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode The country code in two-character ISO 3166-1 alpha-2 format.
     *
     * @return self
     */
    public function setCountryCode($countryCode)
    {
        if ((mb_strlen($countryCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for $countryCode when calling Address20240320., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($countryCode) < 2)) {
            throw new \InvalidArgumentException('invalid length for $countryCode when calling Address20240320., must be bigger than or equal to 2.');
        }
        if ((!preg_match("/^[A-Z]{2}$/", $countryCode))) {
            throw new \InvalidArgumentException("invalid value for $countryCode when calling Address20240320., must conform to the pattern /^[A-Z]{2}$/.");
        }

        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Address20240320., must be smaller than or equal to 1024.');
        }
        if (!is_null($email) && (mb_strlen($email) < 1)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Address20240320., must be bigger than or equal to 1.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the individual who is the primary contact.
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Address20240320., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Address20240320., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phoneNumber
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phoneNumber'];
    }

    /**
     * Sets phoneNumber
     *
     * @param string|null $phoneNumber The phone number.
     *
     * @return self
     */
    public function setPhoneNumber($phoneNumber)
    {
        if (!is_null($phoneNumber) && (mb_strlen($phoneNumber) > 20)) {
            throw new \InvalidArgumentException('invalid length for $phoneNumber when calling Address20240320., must be smaller than or equal to 20.');
        }
        if (!is_null($phoneNumber) && (mb_strlen($phoneNumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for $phoneNumber when calling Address20240320., must be bigger than or equal to 1.');
        }

        $this->container['phoneNumber'] = $phoneNumber;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string $postalCode The postal code.
     *
     * @return self
     */
    public function setPostalCode($postalCode)
    {
        if ((mb_strlen($postalCode) > 32)) {
            throw new \InvalidArgumentException('invalid length for $postalCode when calling Address20240320., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($postalCode) < 1)) {
            throw new \InvalidArgumentException('invalid length for $postalCode when calling Address20240320., must be bigger than or equal to 1.');
        }

        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets stateOrProvinceCode
     *
     * @return string|null
     */
    public function getStateOrProvinceCode()
    {
        return $this->container['stateOrProvinceCode'];
    }

    /**
     * Sets stateOrProvinceCode
     *
     * @param string|null $stateOrProvinceCode The state or province code.
     *
     * @return self
     */
    public function setStateOrProvinceCode($stateOrProvinceCode)
    {
        if (!is_null($stateOrProvinceCode) && (mb_strlen($stateOrProvinceCode) > 64)) {
            throw new \InvalidArgumentException('invalid length for $stateOrProvinceCode when calling Address20240320., must be smaller than or equal to 64.');
        }
        if (!is_null($stateOrProvinceCode) && (mb_strlen($stateOrProvinceCode) < 1)) {
            throw new \InvalidArgumentException('invalid length for $stateOrProvinceCode when calling Address20240320., must be bigger than or equal to 1.');
        }

        $this->container['stateOrProvinceCode'] = $stateOrProvinceCode;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


