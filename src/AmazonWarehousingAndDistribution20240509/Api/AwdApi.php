<?php
/**
 * AwdApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Amazon Warehousing and Distribution
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\ApiException;
use Webcom\Amazon\Rest\Configuration;
use Webcom\Amazon\Rest\HeaderSelector;
use Webcom\Amazon\Rest\ObjectSerializer;

/**
 * AwdApi Class Doc Comment
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AwdApi
{
    /**
     * @var ClientInterface
     */
    protected $client;
    /**
     * @var Configuration
     */
    protected $config;
    /**
     * @var HeaderSelector
     */
    protected $headerSelector;
    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getInboundShipment
     *
     * @param string $shipmentId ID for the shipment. A shipment contains the cases being inbounded. (required)
     * @param string $skuQuantities If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)
     *
     * @return \Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\InboundShipment20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\ApiException on non-2xx response
     */
    public function getInboundShipment($shipmentId, $skuQuantities = null)
    {
        [$response] = $this->getInboundShipmentWithHttpInfo($shipmentId, $skuQuantities);
        return $response;
    }

    /**
     * Operation getInboundShipmentWithHttpInfo
     *
     * @param string $shipmentId ID for the shipment. A shipment contains the cases being inbounded. (required)
     * @param string $skuQuantities If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)
     *
     * @return array of \Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\InboundShipment20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\ApiException on non-2xx response
     */
    public function getInboundShipmentWithHttpInfo($shipmentId, $skuQuantities = null)
    {
        $request = $this->getInboundShipmentRequest($shipmentId, $skuQuantities);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\InboundShipment20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\InboundShipment20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\InboundShipment20240509';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\InboundShipment20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInboundShipmentAsync
     *
     *
     *
     * @param string $shipmentId ID for the shipment. A shipment contains the cases being inbounded. (required)
     * @param string $skuQuantities If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getInboundShipmentAsync($shipmentId, $skuQuantities = null)
    {
        return $this->getInboundShipmentAsyncWithHttpInfo($shipmentId, $skuQuantities)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInboundShipmentAsyncWithHttpInfo
     *
     *
     *
     * @param string $shipmentId ID for the shipment. A shipment contains the cases being inbounded. (required)
     * @param string $skuQuantities If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getInboundShipmentAsyncWithHttpInfo($shipmentId, $skuQuantities = null)
    {
        $returnType = '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\InboundShipment20240509';
        $request = $this->getInboundShipmentRequest($shipmentId, $skuQuantities);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInboundShipment'
     *
     * @param string $shipmentId ID for the shipment. A shipment contains the cases being inbounded. (required)
     * @param string $skuQuantities If equal to &#x60;SHOW&#x60;, the response includes the shipment SKU quantity details.  Defaults to &#x60;HIDE&#x60;, in which case the response does not contain SKU quantities (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function getInboundShipmentRequest($shipmentId, $skuQuantities = null)
    {
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling getInboundShipment'
            );
        }
        if (strlen($shipmentId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$shipmentId" when calling AwdApi.getInboundShipment, must be bigger than or equal to 1.');
        }

        $resourcePath = '/awd/2024-05-09/inboundShipments/{shipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($skuQuantities)) {
            $skuQuantities = ObjectSerializer::serializeCollection($skuQuantities, '', true);
        }
        if ($skuQuantities !== null) {
            $queryParams['skuQuantities'] = $skuQuantities;
        }

        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInboundShipments
     *
     * @param string $sortBy Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)
     * @param string $sortOrder Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)
     * @param string $shipmentStatus Filter by inbound shipment status. (optional)
     * @param \DateTime $updatedAfter List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param \DateTime $updatedBefore List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param int $maxResults Maximum number of results to return. (optional, default to 25)
     * @param string $nextToken Token to retrieve the next set of paginated results. (optional)
     *
     * @return \Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ShipmentListing20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509
     * @throws \Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function listInboundShipments(
        $sortBy = null,
        $sortOrder = null,
        $shipmentStatus = null,
        $updatedAfter = null,
        $updatedBefore = null,
        $maxResults = 25,
        $nextToken = null
    ) {
        [$response] = $this->listInboundShipmentsWithHttpInfo($sortBy, $sortOrder, $shipmentStatus, $updatedAfter, $updatedBefore, $maxResults, $nextToken);
        return $response;
    }

    /**
     * Operation listInboundShipmentsWithHttpInfo
     *
     * @param string $sortBy Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)
     * @param string $sortOrder Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)
     * @param string $shipmentStatus Filter by inbound shipment status. (optional)
     * @param \DateTime $updatedAfter List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param \DateTime $updatedBefore List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param int $maxResults Maximum number of results to return. (optional, default to 25)
     * @param string $nextToken Token to retrieve the next set of paginated results. (optional)
     *
     * @return array of \Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ShipmentListing20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509, HTTP status code, HTTP response headers (array of strings)
     * @throws \Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function listInboundShipmentsWithHttpInfo(
        $sortBy = null,
        $sortOrder = null,
        $shipmentStatus = null,
        $updatedAfter = null,
        $updatedBefore = null,
        $maxResults = 25,
        $nextToken = null
    ) {
        $request = $this->listInboundShipmentsRequest($sortBy, $sortOrder, $shipmentStatus, $updatedAfter, $updatedBefore, $maxResults, $nextToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ShipmentListing20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ShipmentListing20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ShipmentListing20240509';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ShipmentListing20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listInboundShipmentsAsync
     *
     *
     *
     * @param string $sortBy Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)
     * @param string $sortOrder Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)
     * @param string $shipmentStatus Filter by inbound shipment status. (optional)
     * @param \DateTime $updatedAfter List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param \DateTime $updatedBefore List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param int $maxResults Maximum number of results to return. (optional, default to 25)
     * @param string $nextToken Token to retrieve the next set of paginated results. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listInboundShipmentsAsync(
        $sortBy = null,
        $sortOrder = null,
        $shipmentStatus = null,
        $updatedAfter = null,
        $updatedBefore = null,
        $maxResults = 25,
        $nextToken = null
    ) {
        return $this->listInboundShipmentsAsyncWithHttpInfo($sortBy, $sortOrder, $shipmentStatus, $updatedAfter, $updatedBefore, $maxResults, $nextToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInboundShipmentsAsyncWithHttpInfo
     *
     *
     *
     * @param string $sortBy Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)
     * @param string $sortOrder Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)
     * @param string $shipmentStatus Filter by inbound shipment status. (optional)
     * @param \DateTime $updatedAfter List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param \DateTime $updatedBefore List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param int $maxResults Maximum number of results to return. (optional, default to 25)
     * @param string $nextToken Token to retrieve the next set of paginated results. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listInboundShipmentsAsyncWithHttpInfo(
        $sortBy = null,
        $sortOrder = null,
        $shipmentStatus = null,
        $updatedAfter = null,
        $updatedBefore = null,
        $maxResults = 25,
        $nextToken = null
    ) {
        $returnType = '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ShipmentListing20240509';
        $request = $this->listInboundShipmentsRequest($sortBy, $sortOrder, $shipmentStatus, $updatedAfter, $updatedBefore, $maxResults, $nextToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInboundShipments'
     *
     * @param string $sortBy Field to sort results by. By default, the response will be sorted by UPDATED_AT. (optional)
     * @param string $sortOrder Sort the response in ASCENDING or DESCENDING order. By default, the response will be sorted in DESCENDING order. (optional)
     * @param string $shipmentStatus Filter by inbound shipment status. (optional)
     * @param \DateTime $updatedAfter List the inbound shipments that were updated after a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param \DateTime $updatedBefore List the inbound shipments that were updated before a certain time (inclusive). The date must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param int $maxResults Maximum number of results to return. (optional, default to 25)
     * @param string $nextToken Token to retrieve the next set of paginated results. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listInboundShipmentsRequest(
        $sortBy = null,
        $sortOrder = null,
        $shipmentStatus = null,
        $updatedAfter = null,
        $updatedBefore = null,
        $maxResults = 25,
        $nextToken = null
    ) {
        if ($maxResults !== null && $maxResults > 200) {
            throw new \InvalidArgumentException('invalid value for "$maxResults" when calling AwdApi.listInboundShipments, must be smaller than or equal to 200.');
        }
        if ($maxResults !== null && $maxResults < 1) {
            throw new \InvalidArgumentException('invalid value for "$maxResults" when calling AwdApi.listInboundShipments, must be bigger than or equal to 1.');
        }

        $resourcePath = '/awd/2024-05-09/inboundShipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($sortBy)) {
            $sortBy = ObjectSerializer::serializeCollection($sortBy, '', true);
        }
        if ($sortBy !== null) {
            $queryParams['sortBy'] = $sortBy;
        }
        // query params
        if (is_array($sortOrder)) {
            $sortOrder = ObjectSerializer::serializeCollection($sortOrder, '', true);
        }
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = $sortOrder;
        }
        // query params
        if (is_array($shipmentStatus)) {
            $shipmentStatus = ObjectSerializer::serializeCollection($shipmentStatus, '', true);
        }
        if ($shipmentStatus !== null) {
            $queryParams['shipmentStatus'] = $shipmentStatus;
        }
        // query params
        if (is_array($updatedAfter)) {
            $updatedAfter = ObjectSerializer::serializeCollection($updatedAfter, '', true);
        }
        if ($updatedAfter !== null) {
            $queryParams['updatedAfter'] = $updatedAfter;
        }
        // query params
        if (is_array($updatedBefore)) {
            $updatedBefore = ObjectSerializer::serializeCollection($updatedBefore, '', true);
        }
        if ($updatedBefore !== null) {
            $queryParams['updatedBefore'] = $updatedBefore;
        }
        // query params
        if (is_array($maxResults)) {
            $maxResults = ObjectSerializer::serializeCollection($maxResults, '', true);
        }
        if ($maxResults !== null) {
            $queryParams['maxResults'] = $maxResults;
        }
        // query params
        if (is_array($nextToken)) {
            $nextToken = ObjectSerializer::serializeCollection($nextToken, '', true);
        }
        if ($nextToken !== null) {
            $queryParams['nextToken'] = $nextToken;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInventory
     *
     * @param string $sku Filter by seller or merchant SKU for the item. (optional)
     * @param string $sortOrder Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)
     * @param string $details Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)
     * @param string $nextToken Token to retrieve the next set of paginated results. (optional)
     * @param int $maxResults Maximum number of results to return. (optional, default to 25)
     *
     * @return \Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\InventoryListing20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\ApiException on non-2xx response
     */
    public function listInventory($sku = null, $sortOrder = null, $details = null, $nextToken = null, $maxResults = 25)
    {
        [$response] = $this->listInventoryWithHttpInfo($sku, $sortOrder, $details, $nextToken, $maxResults);
        return $response;
    }

    /**
     * Operation listInventoryWithHttpInfo
     *
     * @param string $sku Filter by seller or merchant SKU for the item. (optional)
     * @param string $sortOrder Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)
     * @param string $details Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)
     * @param string $nextToken Token to retrieve the next set of paginated results. (optional)
     * @param int $maxResults Maximum number of results to return. (optional, default to 25)
     *
     * @return array of \Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\InventoryListing20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509|\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\ApiException on non-2xx response
     */
    public function listInventoryWithHttpInfo($sku = null, $sortOrder = null, $details = null, $nextToken = null, $maxResults = 25)
    {
        $request = $this->listInventoryRequest($sku, $sortOrder, $details, $nextToken, $maxResults);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\InventoryListing20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\InventoryListing20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\InventoryListing20240509';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\InventoryListing20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\ErrorList20240509',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listInventoryAsync
     *
     *
     *
     * @param string $sku Filter by seller or merchant SKU for the item. (optional)
     * @param string $sortOrder Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)
     * @param string $details Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)
     * @param string $nextToken Token to retrieve the next set of paginated results. (optional)
     * @param int $maxResults Maximum number of results to return. (optional, default to 25)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listInventoryAsync($sku = null, $sortOrder = null, $details = null, $nextToken = null, $maxResults = 25)
    {
        return $this->listInventoryAsyncWithHttpInfo($sku, $sortOrder, $details, $nextToken, $maxResults)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInventoryAsyncWithHttpInfo
     *
     *
     *
     * @param string $sku Filter by seller or merchant SKU for the item. (optional)
     * @param string $sortOrder Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)
     * @param string $details Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)
     * @param string $nextToken Token to retrieve the next set of paginated results. (optional)
     * @param int $maxResults Maximum number of results to return. (optional, default to 25)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listInventoryAsyncWithHttpInfo($sku = null, $sortOrder = null, $details = null, $nextToken = null, $maxResults = 25)
    {
        $returnType = '\Webcom\Amazon\Rest\AmazonWarehousingAndDistribution20240509\Model\InventoryListing20240509';
        $request = $this->listInventoryRequest($sku, $sortOrder, $details, $nextToken, $maxResults);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInventory'
     *
     * @param string $sku Filter by seller or merchant SKU for the item. (optional)
     * @param string $sortOrder Sort the response in &#x60;ASCENDING&#x60; or &#x60;DESCENDING&#x60; order. (optional)
     * @param string $details Set to &#x60;SHOW&#x60; to return summaries with additional inventory details. Defaults to &#x60;HIDE,&#x60; which returns only inventory summary totals. (optional)
     * @param string $nextToken Token to retrieve the next set of paginated results. (optional)
     * @param int $maxResults Maximum number of results to return. (optional, default to 25)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listInventoryRequest($sku = null, $sortOrder = null, $details = null, $nextToken = null, $maxResults = 25)
    {
        if ($maxResults !== null && $maxResults > 200) {
            throw new \InvalidArgumentException('invalid value for "$maxResults" when calling AwdApi.listInventory, must be smaller than or equal to 200.');
        }
        if ($maxResults !== null && $maxResults < 1) {
            throw new \InvalidArgumentException('invalid value for "$maxResults" when calling AwdApi.listInventory, must be bigger than or equal to 1.');
        }

        $resourcePath = '/awd/2024-05-09/inventory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($sku)) {
            $sku = ObjectSerializer::serializeCollection($sku, '', true);
        }
        if ($sku !== null) {
            $queryParams['sku'] = $sku;
        }
        // query params
        if (is_array($sortOrder)) {
            $sortOrder = ObjectSerializer::serializeCollection($sortOrder, '', true);
        }
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = $sortOrder;
        }
        // query params
        if (is_array($details)) {
            $details = ObjectSerializer::serializeCollection($details, '', true);
        }
        if ($details !== null) {
            $queryParams['details'] = $details;
        }
        // query params
        if (is_array($nextToken)) {
            $nextToken = ObjectSerializer::serializeCollection($nextToken, '', true);
        }
        if ($nextToken !== null) {
            $queryParams['nextToken'] = $nextToken;
        }
        // query params
        if (is_array($maxResults)) {
            $maxResults = ObjectSerializer::serializeCollection($maxResults, '', true);
        }
        if ($maxResults !== null) {
            $queryParams['maxResults'] = $maxResults;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
