<?php
/**
 * RequestedDocumentSpecificationV2
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\ShippingApiV2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\ShippingApiV2\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * RequestedDocumentSpecificationV2 Class Doc Comment
 *
 * @category Class
 * @description The document specifications requested. For calls to the purchaseShipment operation, the shipment purchase fails if the specified document specifications are not among those returned in the response to the getRates operation.
 * @package  Webcom\Amazon\Rest\ShippingApiV2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RequestedDocumentSpecificationV2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RequestedDocumentSpecification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'format' => '\Webcom\Amazon\Rest\ShippingApiV2\Model\DocumentFormatV2',
        'size' => '\Webcom\Amazon\Rest\ShippingApiV2\Model\DocumentSizeV2',
        'dpi' => 'int',
        'pageLayout' => 'string',
        'needFileJoining' => 'bool',
        'requestedDocumentTypes' => '\Webcom\Amazon\Rest\ShippingApiV2\Model\DocumentTypeV2[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'format' => null,
        'size' => null,
        'dpi' => null,
        'pageLayout' => null,
        'needFileJoining' => null,
        'requestedDocumentTypes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'format' => 'format',
        'size' => 'size',
        'dpi' => 'dpi',
        'pageLayout' => 'pageLayout',
        'needFileJoining' => 'needFileJoining',
        'requestedDocumentTypes' => 'requestedDocumentTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'format' => 'setFormat',
        'size' => 'setSize',
        'dpi' => 'setDpi',
        'pageLayout' => 'setPageLayout',
        'needFileJoining' => 'setNeedFileJoining',
        'requestedDocumentTypes' => 'setRequestedDocumentTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'format' => 'getFormat',
        'size' => 'getSize',
        'dpi' => 'getDpi',
        'pageLayout' => 'getPageLayout',
        'needFileJoining' => 'getNeedFileJoining',
        'requestedDocumentTypes' => 'getRequestedDocumentTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['format'] = $data['format'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['dpi'] = $data['dpi'] ?? null;
        $this->container['pageLayout'] = $data['pageLayout'] ?? null;
        $this->container['needFileJoining'] = $data['needFileJoining'] ?? null;
        $this->container['requestedDocumentTypes'] = $data['requestedDocumentTypes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['format'] === null) {
            $invalidProperties[] = "'format' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['needFileJoining'] === null) {
            $invalidProperties[] = "'needFileJoining' can't be null";
        }
        if ($this->container['requestedDocumentTypes'] === null) {
            $invalidProperties[] = "'requestedDocumentTypes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets format
     *
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\DocumentFormatV2
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param \Webcom\Amazon\Rest\ShippingApiV2\Model\DocumentFormatV2 $format format
     *
     * @return self
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets size
     *
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\DocumentSizeV2
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param \Webcom\Amazon\Rest\ShippingApiV2\Model\DocumentSizeV2 $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets dpi
     *
     * @return int|null
     */
    public function getDpi()
    {
        return $this->container['dpi'];
    }

    /**
     * Sets dpi
     *
     * @param int|null $dpi The dots per inch (DPI) value used in printing. This value represents a measure of the resolution of the document.
     *
     * @return self
     */
    public function setDpi($dpi)
    {
        $this->container['dpi'] = $dpi;

        return $this;
    }

    /**
     * Gets pageLayout
     *
     * @return string|null
     */
    public function getPageLayout()
    {
        return $this->container['pageLayout'];
    }

    /**
     * Sets pageLayout
     *
     * @param string|null $pageLayout Indicates the position of the label on the paper. Should be the same value as returned in getRates response.
     *
     * @return self
     */
    public function setPageLayout($pageLayout)
    {
        $this->container['pageLayout'] = $pageLayout;

        return $this;
    }

    /**
     * Gets needFileJoining
     *
     * @return bool
     */
    public function getNeedFileJoining()
    {
        return $this->container['needFileJoining'];
    }

    /**
     * Sets needFileJoining
     *
     * @param bool $needFileJoining When true, files should be stitched together. Otherwise, files should be returned separately. Defaults to false.
     *
     * @return self
     */
    public function setNeedFileJoining($needFileJoining)
    {
        $this->container['needFileJoining'] = $needFileJoining;

        return $this;
    }

    /**
     * Gets requestedDocumentTypes
     *
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\DocumentTypeV2[]
     */
    public function getRequestedDocumentTypes()
    {
        return $this->container['requestedDocumentTypes'];
    }

    /**
     * Sets requestedDocumentTypes
     *
     * @param \Webcom\Amazon\Rest\ShippingApiV2\Model\DocumentTypeV2[] $requestedDocumentTypes A list of the document types requested.
     *
     * @return self
     */
    public function setRequestedDocumentTypes($requestedDocumentTypes)
    {
        $this->container['requestedDocumentTypes'] = $requestedDocumentTypes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


