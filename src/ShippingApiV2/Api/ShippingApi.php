<?php
/**
 * ShippingApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\ShippingApiV2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\ShippingApiV2\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Webcom\Amazon\Rest\ShippingApiV2\ApiException;
use Webcom\Amazon\Rest\Configuration;
use Webcom\Amazon\Rest\HeaderSelector;
use Webcom\Amazon\Rest\ObjectSerializer;

/**
 * ShippingApi Class Doc Comment
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\ShippingApiV2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShippingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelShipment
     *
     * @param  string $shipmentId The shipment identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\CancelShipmentResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function cancelShipment($shipmentId, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->cancelShipmentWithHttpInfo($shipmentId, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation cancelShipmentWithHttpInfo
     *
     * @param  string $shipmentId The shipment identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\CancelShipmentResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelShipmentWithHttpInfo($shipmentId, $xAmznShippingBusinessId = null)
    {
        $request = $this->cancelShipmentRequest($shipmentId, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\CancelShipmentResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\CancelShipmentResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\CancelShipmentResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\CancelShipmentResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelShipmentAsync
     *
     * 
     *
     * @param  string $shipmentId The shipment identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelShipmentAsync($shipmentId, $xAmznShippingBusinessId = null)
    {
        return $this->cancelShipmentAsyncWithHttpInfo($shipmentId, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelShipmentAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $shipmentId The shipment identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelShipmentAsyncWithHttpInfo($shipmentId, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\CancelShipmentResponseV2';
        $request = $this->cancelShipmentRequest($shipmentId, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelShipment'
     *
     * @param  string $shipmentId The shipment identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelShipmentRequest($shipmentId, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling cancelShipment'
            );
        }

        $resourcePath = '/shipping/v2/shipments/{shipmentId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }

        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directPurchaseShipment
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\DirectPurchaseRequestV2 $body body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $locale The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\DirectPurchaseResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function directPurchaseShipment($body, $xAmznIdempotencyKey = null, $locale = null, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->directPurchaseShipmentWithHttpInfo($body, $xAmznIdempotencyKey, $locale, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation directPurchaseShipmentWithHttpInfo
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\DirectPurchaseRequestV2 $body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $locale The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\DirectPurchaseResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function directPurchaseShipmentWithHttpInfo($body, $xAmznIdempotencyKey = null, $locale = null, $xAmznShippingBusinessId = null)
    {
        $request = $this->directPurchaseShipmentRequest($body, $xAmznIdempotencyKey, $locale, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\DirectPurchaseResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\DirectPurchaseResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\DirectPurchaseResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\DirectPurchaseResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directPurchaseShipmentAsync
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\DirectPurchaseRequestV2 $body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $locale The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directPurchaseShipmentAsync($body, $xAmznIdempotencyKey = null, $locale = null, $xAmznShippingBusinessId = null)
    {
        return $this->directPurchaseShipmentAsyncWithHttpInfo($body, $xAmznIdempotencyKey, $locale, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directPurchaseShipmentAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\DirectPurchaseRequestV2 $body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $locale The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directPurchaseShipmentAsyncWithHttpInfo($body, $xAmznIdempotencyKey = null, $locale = null, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\DirectPurchaseResponseV2';
        $request = $this->directPurchaseShipmentRequest($body, $xAmznIdempotencyKey, $locale, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directPurchaseShipment'
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\DirectPurchaseRequestV2 $body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $locale The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function directPurchaseShipmentRequest($body, $xAmznIdempotencyKey = null, $locale = null, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling directPurchaseShipment'
            );
        }

        $resourcePath = '/shipping/v2/shipments/directPurchase';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xAmznIdempotencyKey !== null) {
            $headerParams['x-amzn-IdempotencyKey'] = ObjectSerializer::toHeaderValue($xAmznIdempotencyKey);
        }
        // header params
        if ($locale !== null) {
            $headerParams['locale'] = ObjectSerializer::toHeaderValue($locale);
        }
        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateCollectionForm
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GenerateCollectionFormRequestV2 $body body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\GenerateCollectionFormResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function generateCollectionForm($body, $xAmznIdempotencyKey = null, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->generateCollectionFormWithHttpInfo($body, $xAmznIdempotencyKey, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation generateCollectionFormWithHttpInfo
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GenerateCollectionFormRequestV2 $body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\GenerateCollectionFormResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateCollectionFormWithHttpInfo($body, $xAmznIdempotencyKey = null, $xAmznShippingBusinessId = null)
    {
        $request = $this->generateCollectionFormRequest($body, $xAmznIdempotencyKey, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\GenerateCollectionFormResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\GenerateCollectionFormResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GenerateCollectionFormResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\GenerateCollectionFormResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateCollectionFormAsync
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GenerateCollectionFormRequestV2 $body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateCollectionFormAsync($body, $xAmznIdempotencyKey = null, $xAmznShippingBusinessId = null)
    {
        return $this->generateCollectionFormAsyncWithHttpInfo($body, $xAmznIdempotencyKey, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateCollectionFormAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GenerateCollectionFormRequestV2 $body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateCollectionFormAsyncWithHttpInfo($body, $xAmznIdempotencyKey = null, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GenerateCollectionFormResponseV2';
        $request = $this->generateCollectionFormRequest($body, $xAmznIdempotencyKey, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateCollectionForm'
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GenerateCollectionFormRequestV2 $body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateCollectionFormRequest($body, $xAmznIdempotencyKey = null, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling generateCollectionForm'
            );
        }

        $resourcePath = '/shipping/v2/collectionForms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xAmznIdempotencyKey !== null) {
            $headerParams['x-amzn-IdempotencyKey'] = ObjectSerializer::toHeaderValue($xAmznIdempotencyKey);
        }
        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccessPoints
     *
     * @param  string[] $accessPointTypes accessPointTypes (required)
     * @param  string $countryCode countryCode (required)
     * @param  string $postalCode postalCode (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\GetAccessPointsResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function getAccessPoints($accessPointTypes, $countryCode, $postalCode, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->getAccessPointsWithHttpInfo($accessPointTypes, $countryCode, $postalCode, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation getAccessPointsWithHttpInfo
     *
     * @param  string[] $accessPointTypes (required)
     * @param  string $countryCode (required)
     * @param  string $postalCode (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\GetAccessPointsResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccessPointsWithHttpInfo($accessPointTypes, $countryCode, $postalCode, $xAmznShippingBusinessId = null)
    {
        $request = $this->getAccessPointsRequest($accessPointTypes, $countryCode, $postalCode, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\GetAccessPointsResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetAccessPointsResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetAccessPointsResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetAccessPointsResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccessPointsAsync
     *
     * 
     *
     * @param  string[] $accessPointTypes (required)
     * @param  string $countryCode (required)
     * @param  string $postalCode (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessPointsAsync($accessPointTypes, $countryCode, $postalCode, $xAmznShippingBusinessId = null)
    {
        return $this->getAccessPointsAsyncWithHttpInfo($accessPointTypes, $countryCode, $postalCode, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccessPointsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string[] $accessPointTypes (required)
     * @param  string $countryCode (required)
     * @param  string $postalCode (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessPointsAsyncWithHttpInfo($accessPointTypes, $countryCode, $postalCode, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetAccessPointsResponseV2';
        $request = $this->getAccessPointsRequest($accessPointTypes, $countryCode, $postalCode, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccessPoints'
     *
     * @param  string[] $accessPointTypes (required)
     * @param  string $countryCode (required)
     * @param  string $postalCode (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccessPointsRequest($accessPointTypes, $countryCode, $postalCode, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'accessPointTypes' is set
        if ($accessPointTypes === null || (is_array($accessPointTypes) && count($accessPointTypes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accessPointTypes when calling getAccessPoints'
            );
        }
        // verify the required parameter 'countryCode' is set
        if ($countryCode === null || (is_array($countryCode) && count($countryCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $countryCode when calling getAccessPoints'
            );
        }
        // verify the required parameter 'postalCode' is set
        if ($postalCode === null || (is_array($postalCode) && count($postalCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postalCode when calling getAccessPoints'
            );
        }

        $resourcePath = '/shipping/v2/accessPoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($accessPointTypes)) {
            $accessPointTypes = ObjectSerializer::serializeCollection($accessPointTypes, 'form', true);
        }
        if ($accessPointTypes !== null) {
            $queryParams['accessPointTypes'] = $accessPointTypes;
        }
        // query params
        if (is_array($countryCode)) {
            $countryCode = ObjectSerializer::serializeCollection($countryCode, '', true);
        }
        if ($countryCode !== null) {
            $queryParams['countryCode'] = $countryCode;
        }
        // query params
        if (is_array($postalCode)) {
            $postalCode = ObjectSerializer::serializeCollection($postalCode, '', true);
        }
        if ($postalCode !== null) {
            $queryParams['postalCode'] = $postalCode;
        }

        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdditionalInputs
     *
     * @param  string $requestToken The request token returned in the response to the getRates operation. (required)
     * @param  string $rateId The rate identifier for the shipping offering (rate) returned in the response to the getRates operation. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\GetAdditionalInputsResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function getAdditionalInputs($requestToken, $rateId, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->getAdditionalInputsWithHttpInfo($requestToken, $rateId, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation getAdditionalInputsWithHttpInfo
     *
     * @param  string $requestToken The request token returned in the response to the getRates operation. (required)
     * @param  string $rateId The rate identifier for the shipping offering (rate) returned in the response to the getRates operation. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\GetAdditionalInputsResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdditionalInputsWithHttpInfo($requestToken, $rateId, $xAmznShippingBusinessId = null)
    {
        $request = $this->getAdditionalInputsRequest($requestToken, $rateId, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\GetAdditionalInputsResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetAdditionalInputsResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetAdditionalInputsResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetAdditionalInputsResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdditionalInputsAsync
     *
     * 
     *
     * @param  string $requestToken The request token returned in the response to the getRates operation. (required)
     * @param  string $rateId The rate identifier for the shipping offering (rate) returned in the response to the getRates operation. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdditionalInputsAsync($requestToken, $rateId, $xAmznShippingBusinessId = null)
    {
        return $this->getAdditionalInputsAsyncWithHttpInfo($requestToken, $rateId, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdditionalInputsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $requestToken The request token returned in the response to the getRates operation. (required)
     * @param  string $rateId The rate identifier for the shipping offering (rate) returned in the response to the getRates operation. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdditionalInputsAsyncWithHttpInfo($requestToken, $rateId, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetAdditionalInputsResponseV2';
        $request = $this->getAdditionalInputsRequest($requestToken, $rateId, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdditionalInputs'
     *
     * @param  string $requestToken The request token returned in the response to the getRates operation. (required)
     * @param  string $rateId The rate identifier for the shipping offering (rate) returned in the response to the getRates operation. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdditionalInputsRequest($requestToken, $rateId, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'requestToken' is set
        if ($requestToken === null || (is_array($requestToken) && count($requestToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requestToken when calling getAdditionalInputs'
            );
        }
        // verify the required parameter 'rateId' is set
        if ($rateId === null || (is_array($rateId) && count($rateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rateId when calling getAdditionalInputs'
            );
        }

        $resourcePath = '/shipping/v2/shipments/additionalInputs/schema';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($requestToken)) {
            $requestToken = ObjectSerializer::serializeCollection($requestToken, '', true);
        }
        if ($requestToken !== null) {
            $queryParams['requestToken'] = $requestToken;
        }
        // query params
        if (is_array($rateId)) {
            $rateId = ObjectSerializer::serializeCollection($rateId, '', true);
        }
        if ($rateId !== null) {
            $queryParams['rateId'] = $rateId;
        }

        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCarrierAccountFormInputs
     *
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountFormInputsResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function getCarrierAccountFormInputs($xAmznShippingBusinessId = null)
    {
        list($response) = $this->getCarrierAccountFormInputsWithHttpInfo($xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation getCarrierAccountFormInputsWithHttpInfo
     *
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountFormInputsResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarrierAccountFormInputsWithHttpInfo($xAmznShippingBusinessId = null)
    {
        $request = $this->getCarrierAccountFormInputsRequest($xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountFormInputsResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountFormInputsResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountFormInputsResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountFormInputsResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCarrierAccountFormInputsAsync
     *
     * 
     *
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierAccountFormInputsAsync($xAmznShippingBusinessId = null)
    {
        return $this->getCarrierAccountFormInputsAsyncWithHttpInfo($xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarrierAccountFormInputsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierAccountFormInputsAsyncWithHttpInfo($xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountFormInputsResponseV2';
        $request = $this->getCarrierAccountFormInputsRequest($xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarrierAccountFormInputs'
     *
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCarrierAccountFormInputsRequest($xAmznShippingBusinessId = null)
    {

        $resourcePath = '/shipping/v2/carrierAccountFormInputs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCarrierAccounts
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountsRequestV2 $body body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountsResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function getCarrierAccounts($body, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->getCarrierAccountsWithHttpInfo($body, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation getCarrierAccountsWithHttpInfo
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountsRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountsResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarrierAccountsWithHttpInfo($body, $xAmznShippingBusinessId = null)
    {
        $request = $this->getCarrierAccountsRequest($body, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountsResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountsResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountsResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountsResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCarrierAccountsAsync
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountsRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierAccountsAsync($body, $xAmznShippingBusinessId = null)
    {
        return $this->getCarrierAccountsAsyncWithHttpInfo($body, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarrierAccountsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountsRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierAccountsAsyncWithHttpInfo($body, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountsResponseV2';
        $request = $this->getCarrierAccountsRequest($body, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarrierAccounts'
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCarrierAccountsRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCarrierAccountsRequest($body, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getCarrierAccounts'
            );
        }

        $resourcePath = '/shipping/v2/carrierAccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCollectionForm
     *
     * @param  string $collectionFormId collection form Id to reprint a collection. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function getCollectionForm($collectionFormId, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->getCollectionFormWithHttpInfo($collectionFormId, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation getCollectionFormWithHttpInfo
     *
     * @param  string $collectionFormId collection form Id to reprint a collection. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionFormWithHttpInfo($collectionFormId, $xAmznShippingBusinessId = null)
    {
        $request = $this->getCollectionFormRequest($collectionFormId, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCollectionFormAsync
     *
     * 
     *
     * @param  string $collectionFormId collection form Id to reprint a collection. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionFormAsync($collectionFormId, $xAmznShippingBusinessId = null)
    {
        return $this->getCollectionFormAsyncWithHttpInfo($collectionFormId, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCollectionFormAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $collectionFormId collection form Id to reprint a collection. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionFormAsyncWithHttpInfo($collectionFormId, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormResponseV2';
        $request = $this->getCollectionFormRequest($collectionFormId, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCollectionForm'
     *
     * @param  string $collectionFormId collection form Id to reprint a collection. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionFormRequest($collectionFormId, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'collectionFormId' is set
        if ($collectionFormId === null || (is_array($collectionFormId) && count($collectionFormId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collectionFormId when calling getCollectionForm'
            );
        }

        $resourcePath = '/shipping/v2/collectionForms/{collectionFormId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }

        // path params
        if ($collectionFormId !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionFormId' . '}',
                ObjectSerializer::toPathValue($collectionFormId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCollectionFormHistory
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormHistoryRequestV2 $body body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormHistoryResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function getCollectionFormHistory($body, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->getCollectionFormHistoryWithHttpInfo($body, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation getCollectionFormHistoryWithHttpInfo
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormHistoryRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormHistoryResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionFormHistoryWithHttpInfo($body, $xAmznShippingBusinessId = null)
    {
        $request = $this->getCollectionFormHistoryRequest($body, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormHistoryResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormHistoryResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormHistoryResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormHistoryResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCollectionFormHistoryAsync
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormHistoryRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionFormHistoryAsync($body, $xAmznShippingBusinessId = null)
    {
        return $this->getCollectionFormHistoryAsyncWithHttpInfo($body, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCollectionFormHistoryAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormHistoryRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionFormHistoryAsyncWithHttpInfo($body, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormHistoryResponseV2';
        $request = $this->getCollectionFormHistoryRequest($body, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCollectionFormHistory'
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetCollectionFormHistoryRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionFormHistoryRequest($body, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getCollectionFormHistory'
            );
        }

        $resourcePath = '/shipping/v2/collectionForms/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRates
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetRatesRequestV2 $body body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\GetRatesResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function getRates($body, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->getRatesWithHttpInfo($body, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation getRatesWithHttpInfo
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetRatesRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\GetRatesResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRatesWithHttpInfo($body, $xAmznShippingBusinessId = null)
    {
        $request = $this->getRatesRequest($body, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\GetRatesResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetRatesResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetRatesResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetRatesResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRatesAsync
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetRatesRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRatesAsync($body, $xAmznShippingBusinessId = null)
    {
        return $this->getRatesAsyncWithHttpInfo($body, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRatesAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetRatesRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRatesAsyncWithHttpInfo($body, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetRatesResponseV2';
        $request = $this->getRatesRequest($body, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRates'
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetRatesRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRatesRequest($body, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getRates'
            );
        }

        $resourcePath = '/shipping/v2/shipments/rates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShipmentDocuments
     *
     * @param  string $shipmentId The shipment identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $packageClientReferenceId The package client reference identifier originally provided in the request body parameter for the getRates operation. (required)
     * @param  string $format The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)
     * @param  float $dpi The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\GetShipmentDocumentsResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function getShipmentDocuments($shipmentId, $packageClientReferenceId, $format = null, $dpi = null, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->getShipmentDocumentsWithHttpInfo($shipmentId, $packageClientReferenceId, $format, $dpi, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation getShipmentDocumentsWithHttpInfo
     *
     * @param  string $shipmentId The shipment identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $packageClientReferenceId The package client reference identifier originally provided in the request body parameter for the getRates operation. (required)
     * @param  string $format The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)
     * @param  float $dpi The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\GetShipmentDocumentsResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipmentDocumentsWithHttpInfo($shipmentId, $packageClientReferenceId, $format = null, $dpi = null, $xAmznShippingBusinessId = null)
    {
        $request = $this->getShipmentDocumentsRequest($shipmentId, $packageClientReferenceId, $format, $dpi, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\GetShipmentDocumentsResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetShipmentDocumentsResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetShipmentDocumentsResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetShipmentDocumentsResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShipmentDocumentsAsync
     *
     * 
     *
     * @param  string $shipmentId The shipment identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $packageClientReferenceId The package client reference identifier originally provided in the request body parameter for the getRates operation. (required)
     * @param  string $format The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)
     * @param  float $dpi The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentDocumentsAsync($shipmentId, $packageClientReferenceId, $format = null, $dpi = null, $xAmznShippingBusinessId = null)
    {
        return $this->getShipmentDocumentsAsyncWithHttpInfo($shipmentId, $packageClientReferenceId, $format, $dpi, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentDocumentsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $shipmentId The shipment identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $packageClientReferenceId The package client reference identifier originally provided in the request body parameter for the getRates operation. (required)
     * @param  string $format The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)
     * @param  float $dpi The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentDocumentsAsyncWithHttpInfo($shipmentId, $packageClientReferenceId, $format = null, $dpi = null, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetShipmentDocumentsResponseV2';
        $request = $this->getShipmentDocumentsRequest($shipmentId, $packageClientReferenceId, $format, $dpi, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipmentDocuments'
     *
     * @param  string $shipmentId The shipment identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $packageClientReferenceId The package client reference identifier originally provided in the request body parameter for the getRates operation. (required)
     * @param  string $format The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)
     * @param  float $dpi The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getShipmentDocumentsRequest($shipmentId, $packageClientReferenceId, $format = null, $dpi = null, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'shipmentId' is set
        if ($shipmentId === null || (is_array($shipmentId) && count($shipmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentId when calling getShipmentDocuments'
            );
        }
        // verify the required parameter 'packageClientReferenceId' is set
        if ($packageClientReferenceId === null || (is_array($packageClientReferenceId) && count($packageClientReferenceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageClientReferenceId when calling getShipmentDocuments'
            );
        }

        $resourcePath = '/shipping/v2/shipments/{shipmentId}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($packageClientReferenceId)) {
            $packageClientReferenceId = ObjectSerializer::serializeCollection($packageClientReferenceId, '', true);
        }
        if ($packageClientReferenceId !== null) {
            $queryParams['packageClientReferenceId'] = $packageClientReferenceId;
        }
        // query params
        if (is_array($format)) {
            $format = ObjectSerializer::serializeCollection($format, '', true);
        }
        if ($format !== null) {
            $queryParams['format'] = $format;
        }
        // query params
        if (is_array($dpi)) {
            $dpi = ObjectSerializer::serializeCollection($dpi, '', true);
        }
        if ($dpi !== null) {
            $queryParams['dpi'] = $dpi;
        }

        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }

        // path params
        if ($shipmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipmentId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTracking
     *
     * @param  string $trackingId A carrier-generated tracking identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $carrierId A carrier identifier originally returned by the getRates operation for the selected rate. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\GetTrackingResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function getTracking($trackingId, $carrierId, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->getTrackingWithHttpInfo($trackingId, $carrierId, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation getTrackingWithHttpInfo
     *
     * @param  string $trackingId A carrier-generated tracking identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $carrierId A carrier identifier originally returned by the getRates operation for the selected rate. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\GetTrackingResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTrackingWithHttpInfo($trackingId, $carrierId, $xAmznShippingBusinessId = null)
    {
        $request = $this->getTrackingRequest($trackingId, $carrierId, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\GetTrackingResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetTrackingResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetTrackingResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetTrackingResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTrackingAsync
     *
     * 
     *
     * @param  string $trackingId A carrier-generated tracking identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $carrierId A carrier identifier originally returned by the getRates operation for the selected rate. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingAsync($trackingId, $carrierId, $xAmznShippingBusinessId = null)
    {
        return $this->getTrackingAsyncWithHttpInfo($trackingId, $carrierId, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTrackingAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $trackingId A carrier-generated tracking identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $carrierId A carrier identifier originally returned by the getRates operation for the selected rate. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingAsyncWithHttpInfo($trackingId, $carrierId, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetTrackingResponseV2';
        $request = $this->getTrackingRequest($trackingId, $carrierId, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTracking'
     *
     * @param  string $trackingId A carrier-generated tracking identifier originally returned by the purchaseShipment operation. (required)
     * @param  string $carrierId A carrier identifier originally returned by the getRates operation for the selected rate. (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTrackingRequest($trackingId, $carrierId, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'trackingId' is set
        if ($trackingId === null || (is_array($trackingId) && count($trackingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trackingId when calling getTracking'
            );
        }
        // verify the required parameter 'carrierId' is set
        if ($carrierId === null || (is_array($carrierId) && count($carrierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrierId when calling getTracking'
            );
        }

        $resourcePath = '/shipping/v2/tracking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($trackingId)) {
            $trackingId = ObjectSerializer::serializeCollection($trackingId, '', true);
        }
        if ($trackingId !== null) {
            $queryParams['trackingId'] = $trackingId;
        }
        // query params
        if (is_array($carrierId)) {
            $carrierId = ObjectSerializer::serializeCollection($carrierId, '', true);
        }
        if ($carrierId !== null) {
            $queryParams['carrierId'] = $carrierId;
        }

        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUnmanifestedShipments
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetUnmanifestedShipmentsRequestV2 $body body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\GetUnmanifestedShipmentsResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function getUnmanifestedShipments($body, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->getUnmanifestedShipmentsWithHttpInfo($body, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation getUnmanifestedShipmentsWithHttpInfo
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetUnmanifestedShipmentsRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\GetUnmanifestedShipmentsResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUnmanifestedShipmentsWithHttpInfo($body, $xAmznShippingBusinessId = null)
    {
        $request = $this->getUnmanifestedShipmentsRequest($body, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\GetUnmanifestedShipmentsResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetUnmanifestedShipmentsResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetUnmanifestedShipmentsResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetUnmanifestedShipmentsResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUnmanifestedShipmentsAsync
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetUnmanifestedShipmentsRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnmanifestedShipmentsAsync($body, $xAmznShippingBusinessId = null)
    {
        return $this->getUnmanifestedShipmentsAsyncWithHttpInfo($body, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUnmanifestedShipmentsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetUnmanifestedShipmentsRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnmanifestedShipmentsAsyncWithHttpInfo($body, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\GetUnmanifestedShipmentsResponseV2';
        $request = $this->getUnmanifestedShipmentsRequest($body, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUnmanifestedShipments'
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\GetUnmanifestedShipmentsRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUnmanifestedShipmentsRequest($body, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getUnmanifestedShipments'
            );
        }

        $resourcePath = '/shipping/v2/unmanifestedShipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation linkCarrierAccount
     *
     * @param  string $carrierId The unique identifier associated with the carrier account. (required)
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\LinkCarrierAccountRequestV2 $body body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\LinkCarrierAccountResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function linkCarrierAccount($carrierId, $body, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->linkCarrierAccountWithHttpInfo($carrierId, $body, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation linkCarrierAccountWithHttpInfo
     *
     * @param  string $carrierId The unique identifier associated with the carrier account. (required)
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\LinkCarrierAccountRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\LinkCarrierAccountResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function linkCarrierAccountWithHttpInfo($carrierId, $body, $xAmznShippingBusinessId = null)
    {
        $request = $this->linkCarrierAccountRequest($carrierId, $body, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\LinkCarrierAccountResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\LinkCarrierAccountResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\LinkCarrierAccountResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\LinkCarrierAccountResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation linkCarrierAccountAsync
     *
     * 
     *
     * @param  string $carrierId The unique identifier associated with the carrier account. (required)
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\LinkCarrierAccountRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkCarrierAccountAsync($carrierId, $body, $xAmznShippingBusinessId = null)
    {
        return $this->linkCarrierAccountAsyncWithHttpInfo($carrierId, $body, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation linkCarrierAccountAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $carrierId The unique identifier associated with the carrier account. (required)
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\LinkCarrierAccountRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkCarrierAccountAsyncWithHttpInfo($carrierId, $body, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\LinkCarrierAccountResponseV2';
        $request = $this->linkCarrierAccountRequest($carrierId, $body, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'linkCarrierAccount'
     *
     * @param  string $carrierId The unique identifier associated with the carrier account. (required)
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\LinkCarrierAccountRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function linkCarrierAccountRequest($carrierId, $body, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'carrierId' is set
        if ($carrierId === null || (is_array($carrierId) && count($carrierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrierId when calling linkCarrierAccount'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling linkCarrierAccount'
            );
        }

        $resourcePath = '/shipping/v2/carrierAccounts/{carrierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }

        // path params
        if ($carrierId !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierId' . '}',
                ObjectSerializer::toPathValue($carrierId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oneClickShipment
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\OneClickShipmentRequestV2 $body body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\OneClickShipmentResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function oneClickShipment($body, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->oneClickShipmentWithHttpInfo($body, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation oneClickShipmentWithHttpInfo
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\OneClickShipmentRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\OneClickShipmentResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function oneClickShipmentWithHttpInfo($body, $xAmznShippingBusinessId = null)
    {
        $request = $this->oneClickShipmentRequest($body, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\OneClickShipmentResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\OneClickShipmentResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\OneClickShipmentResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\OneClickShipmentResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oneClickShipmentAsync
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\OneClickShipmentRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oneClickShipmentAsync($body, $xAmznShippingBusinessId = null)
    {
        return $this->oneClickShipmentAsyncWithHttpInfo($body, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oneClickShipmentAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\OneClickShipmentRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oneClickShipmentAsyncWithHttpInfo($body, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\OneClickShipmentResponseV2';
        $request = $this->oneClickShipmentRequest($body, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oneClickShipment'
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\OneClickShipmentRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oneClickShipmentRequest($body, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling oneClickShipment'
            );
        }

        $resourcePath = '/shipping/v2/oneClickShipment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseShipment
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\PurchaseShipmentRequestV2 $body body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\PurchaseShipmentResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function purchaseShipment($body, $xAmznIdempotencyKey = null, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->purchaseShipmentWithHttpInfo($body, $xAmznIdempotencyKey, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation purchaseShipmentWithHttpInfo
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\PurchaseShipmentRequestV2 $body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\PurchaseShipmentResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseShipmentWithHttpInfo($body, $xAmznIdempotencyKey = null, $xAmznShippingBusinessId = null)
    {
        $request = $this->purchaseShipmentRequest($body, $xAmznIdempotencyKey, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\PurchaseShipmentResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\PurchaseShipmentResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\PurchaseShipmentResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\PurchaseShipmentResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseShipmentAsync
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\PurchaseShipmentRequestV2 $body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseShipmentAsync($body, $xAmznIdempotencyKey = null, $xAmznShippingBusinessId = null)
    {
        return $this->purchaseShipmentAsyncWithHttpInfo($body, $xAmznIdempotencyKey, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseShipmentAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\PurchaseShipmentRequestV2 $body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseShipmentAsyncWithHttpInfo($body, $xAmznIdempotencyKey = null, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\PurchaseShipmentResponseV2';
        $request = $this->purchaseShipmentRequest($body, $xAmznIdempotencyKey, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseShipment'
     *
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\PurchaseShipmentRequestV2 $body (required)
     * @param  string $xAmznIdempotencyKey A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseShipmentRequest($body, $xAmznIdempotencyKey = null, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling purchaseShipment'
            );
        }

        $resourcePath = '/shipping/v2/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xAmznIdempotencyKey !== null) {
            $headerParams['x-amzn-IdempotencyKey'] = ObjectSerializer::toHeaderValue($xAmznIdempotencyKey);
        }
        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unlinkCarrierAccount
     *
     * @param  string $carrierId carrier Id to unlink with merchant. (required)
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\UnlinkCarrierAccountRequestV2 $body body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Webcom\Amazon\Rest\ShippingApiV2\Model\UnlinkCarrierAccountResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2
     */
    public function unlinkCarrierAccount($carrierId, $body, $xAmznShippingBusinessId = null)
    {
        list($response) = $this->unlinkCarrierAccountWithHttpInfo($carrierId, $body, $xAmznShippingBusinessId);
        return $response;
    }

    /**
     * Operation unlinkCarrierAccountWithHttpInfo
     *
     * @param  string $carrierId carrier Id to unlink with merchant. (required)
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\UnlinkCarrierAccountRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \Webcom\Amazon\Rest\ShippingApiV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Webcom\Amazon\Rest\ShippingApiV2\Model\UnlinkCarrierAccountResponseV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2|\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function unlinkCarrierAccountWithHttpInfo($carrierId, $body, $xAmznShippingBusinessId = null)
    {
        $request = $this->unlinkCarrierAccountRequest($carrierId, $body, $xAmznShippingBusinessId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\UnlinkCarrierAccountResponseV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\UnlinkCarrierAccountResponseV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    if ('\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\UnlinkCarrierAccountResponseV2';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\UnlinkCarrierAccountResponseV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Webcom\Amazon\Rest\ShippingApiV2\Model\ErrorListV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unlinkCarrierAccountAsync
     *
     * 
     *
     * @param  string $carrierId carrier Id to unlink with merchant. (required)
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\UnlinkCarrierAccountRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unlinkCarrierAccountAsync($carrierId, $body, $xAmznShippingBusinessId = null)
    {
        return $this->unlinkCarrierAccountAsyncWithHttpInfo($carrierId, $body, $xAmznShippingBusinessId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unlinkCarrierAccountAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $carrierId carrier Id to unlink with merchant. (required)
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\UnlinkCarrierAccountRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unlinkCarrierAccountAsyncWithHttpInfo($carrierId, $body, $xAmznShippingBusinessId = null)
    {
        $returnType = '\Webcom\Amazon\Rest\ShippingApiV2\Model\UnlinkCarrierAccountResponseV2';
        $request = $this->unlinkCarrierAccountRequest($carrierId, $body, $xAmznShippingBusinessId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unlinkCarrierAccount'
     *
     * @param  string $carrierId carrier Id to unlink with merchant. (required)
     * @param  \Webcom\Amazon\Rest\ShippingApiV2\Model\UnlinkCarrierAccountRequestV2 $body (required)
     * @param  string $xAmznShippingBusinessId Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unlinkCarrierAccountRequest($carrierId, $body, $xAmznShippingBusinessId = null)
    {
        // verify the required parameter 'carrierId' is set
        if ($carrierId === null || (is_array($carrierId) && count($carrierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrierId when calling unlinkCarrierAccount'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling unlinkCarrierAccount'
            );
        }

        $resourcePath = '/shipping/v2/carrierAccounts/{carrierId}/unlink';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xAmznShippingBusinessId !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($xAmznShippingBusinessId);
        }

        // path params
        if ($carrierId !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierId' . '}',
                ObjectSerializer::toPathValue($carrierId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
