<?php
/**
 * FeaturedOfferSegment20220501
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Webcom\Amazon\Rest\ProductPricingApi20220501
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Pricing
 *
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-05-01
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Webcom\Amazon\Rest\ProductPricingApi20220501\Model;

use \Webcom\Amazon\Rest\ModelInterface;
use \ArrayAccess;
use \Webcom\Amazon\Rest\ObjectSerializer;

/**
 * FeaturedOfferSegment20220501 Class Doc Comment
 *
 * @category Class
 * @description Describes the segment in which the offer is featured.
 * @package  Webcom\Amazon\Rest\ProductPricingApi20220501
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class FeaturedOfferSegment20220501 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FeaturedOfferSegment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customerMembership' => 'string',
        'segmentDetails' => '\Webcom\Amazon\Rest\ProductPricingApi20220501\Model\SegmentDetails20220501'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customerMembership' => null,
        'segmentDetails' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customerMembership' => 'customerMembership',
        'segmentDetails' => 'segmentDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customerMembership' => 'setCustomerMembership',
        'segmentDetails' => 'setSegmentDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customerMembership' => 'getCustomerMembership',
        'segmentDetails' => 'getSegmentDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CUSTOMER_MEMBERSHIP_PRIME = 'PRIME';
    const CUSTOMER_MEMBERSHIP_NON_PRIME = 'NON_PRIME';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomerMembershipAllowableValues()
    {
        return [
            self::CUSTOMER_MEMBERSHIP_PRIME,
            self::CUSTOMER_MEMBERSHIP_NON_PRIME,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customerMembership'] = $data['customerMembership'] ?? null;
        $this->container['segmentDetails'] = $data['segmentDetails'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customerMembership'] === null) {
            $invalidProperties[] = "'customerMembership' can't be null";
        }
        $allowedValues = $this->getCustomerMembershipAllowableValues();
        if (!is_null($this->container['customerMembership']) && !in_array($this->container['customerMembership'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'customerMembership', must be one of '%s'",
                $this->container['customerMembership'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['segmentDetails'] === null) {
            $invalidProperties[] = "'segmentDetails' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customerMembership
     *
     * @return string
     */
    public function getCustomerMembership()
    {
        return $this->container['customerMembership'];
    }

    /**
     * Sets customerMembership
     *
     * @param string $customerMembership The customer membership type that make up this segment
     *
     * @return self
     */
    public function setCustomerMembership($customerMembership)
    {
        $allowedValues = $this->getCustomerMembershipAllowableValues();
        if (!in_array($customerMembership, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'customerMembership', must be one of '%s'",
                    $customerMembership,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customerMembership'] = $customerMembership;

        return $this;
    }

    /**
     * Gets segmentDetails
     *
     * @return \Webcom\Amazon\Rest\ProductPricingApi20220501\Model\SegmentDetails20220501
     */
    public function getSegmentDetails()
    {
        return $this->container['segmentDetails'];
    }

    /**
     * Sets segmentDetails
     *
     * @param \Webcom\Amazon\Rest\ProductPricingApi20220501\Model\SegmentDetails20220501 $segmentDetails segmentDetails
     *
     * @return self
     */
    public function setSegmentDetails($segmentDetails)
    {
        $this->container['segmentDetails'] = $segmentDetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


